{"version":3,"sources":["components/admin/main-accordion/AddItemModal.jsx","components/admin/main-accordion/inner-accordion/ShiftItemModal.jsx","components/admin/main-accordion/inner-accordion/ClassItem.jsx","components/admin/main-accordion/inner-accordion/SectionClass.jsx","components/admin/main-accordion/inner-accordion/Section.jsx","components/admin/main-accordion/MainAccordion.jsx","download.js","generateCourseDates.js","components/admin/GenerateDataShiftContent.jsx","components/admin/data-shift/ActiveCourses.jsx","generateBasicsMarkdown.js","components/schedules/GenerateCourseDayHeader.jsx","components/admin/data-shift/DatePicker.jsx","components/admin/data-shift/DataShift.jsx","components/admin/Tabs.jsx","assets/4-MILK.png","components/schedules/DisplaySection.jsx","components/schedules/GenerateNotifications.jsx","generateSectionArray.js","components/schedules/GenerateDatetypeSections.jsx","components/schedules/GenerateCourseDayContent.jsx","components/schedules/schedule-table/TableSectionContent.jsx","components/schedules/schedule-table/TableClass.jsx","components/schedules/schedule-table/TableProjects.jsx","components/schedules/schedule-table/ScheduleTable.jsx","generateTableData.js","components/schedules/schedule-table/ContentTable.jsx","components/schedules/current-day/CurrentDaySection.jsx","components/schedules/ScheduleContent.jsx","components/schedules/sidebar/ModuleSection.jsx","components/schedules/sidebar/Modules.jsx","components/schedules/sidebar/CourseWeeks.jsx","components/schedules/sidebar/SideBar.jsx","components/schedules/BatchSchedule.jsx","components/schedules/ScheduleContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddItemModal","show","onHide","bootcampdata","coursedate","setDaysInBatchFile","setDaysInMainFile","useState","title","setTitle","url","setUrl","section","setSection","sectionClass","setSectionClass","Modal","size","centered","Header","closeButton","Title","id","Body","Form","Group","className","controlId","Label","Control","type","placeholder","value","onChange","e","target","Select","Button","variant","onClick","preventDefault","newItem","name","dateTypes","items","push","constructor","Array","handleAddItem","Footer","ShiftItemModal","shiftitem","sectiontype","setbootcampdata","classtype","classindex","selectedDate","setSelectedDate","dates","map","date","courseDay","selectedItem","splice","length","targetDay","handleSubmitDate","shiftOneDay","direction","bootcampData","dayIndex","sectionType","classType","classIndex","bootcampDataArray","Object","holidayDates","keys","holidayData","forEach","courseDate","includes","ClassItem","setBootcampData","item","modalShow","setModalShow","shiftItem","setShiftItem","handleShift","datesArray","addDates","indexOf","addIndex","SectionClass","day","sectionclass","sectionIndex","handleClassShift","sectionArray","i","selectedSection","startDay","element","index","shiftSection","Section","classExists","preClass","inClass","postClass","projectDue","projectStart","ipDue","Accordion","Item","eventKey","filter","MainAccordion","setShowInputModal","setCourseDate","accordionKey","handleCloseAll","setAccordionKey","module","console","log","handlePlusClick","courseWeek","download","data","filename","dataStr","encodeURIComponent","JSON","stringify","dlAnchorElem","document","createElement","setAttribute","click","publicHolidays","PH","publicHolidayArray","key","companyHolidays","company","companyHolidayArray","winterBreak","phWithoutCh","holiday","getLocalDateTime","utc","timeString","courseName","courseType","changedFormat","toFormat","DateTime","fromISO","zone","toUTC","toISO","Number","weekday","generateHolidayObject","dateString","week","dateObj","dayNumber","generateCourseDayObject","weekDay","meetingDateTimeUTC","basicsData","days","getFilename","startDate","displayDate","fromFormat","generateDataObject","input","lessonDays","basicsTimeslots","bootcampDataJson","undefined","dateWeek","classDatesCount","courseDayCount","topLevelObject","daysOfWeek","courseStartIndex","totalCourseDays","bootcampDays","startIndex","fullTime","partTime","generateTopLevelObject","dayArray","firstDay","formattedDate","plus","weeks","set","differenceInDays","datesToAdd","newDate","newWeekday","newDateObjectsArray","k","addedCourseday","dateInfo","courseday","featureFreezeDay","lastDay","lastCourseDay","j","targetWeekday","addDateObjToSchedule","copyToClipboard","selBox","style","position","left","top","opacity","body","appendChild","focus","select","execCommand","removeChild","GenerateDataShiftContent","mainFile","batchFile","batchArray","showInputModal","handleDownloadMainClick","a","handleEditInGithub","gitbookUrl","repoUrls","edit","window","open","handleBatchEdit","batch","content","slice","ActiveCourses","lastWeek","localDate","meetingTime","timeZone","timeOffset","setBatchFile","Nav","Link","parse","handleSelectClick","timeZoneSet","generateSectionList","sectionName","sectionString","classList","mdText","generateClassList","dayNames","dayNumbers","weekDates","weekCount","tableRows","generateBasicsMarkdown","Set","sort","number","l","n","displayWeek","m","p","holidayType","location","generateCourseArrays","output","r","q","generateCourseDaysTable","localTime","generalDateTypes","general","projectDateTypes","projects","sectionNames","sectionTypes","t","generateCourseData","DatePicker","setStartDate","setCourseName","setCourseType","setFirstDay","secondDay","setSecondDay","handleRender","handleDownload","addToGitHubRepo","generateMarkdown","href","DataShift","TabsContainer","setKey","batchDays","setBatchDays","mainDataFile","setMainFile","mainDays","setMainDays","Tabs","activeKey","onSelect","Tab","NormalCourseDay","todaySectionHeader","HolidayCourseDay","GenerateCourseDayHeader","coursetype","DisplaySection","heading","rel","GenerateNotifications","status","projectdue","ipdue","projectstart","generateSectionArray","datetype","classTypeSection","x","GenerateDatetypeSections","GenerateCourseDayContent","ip","TableSectionContent","TableClass","classArray","TableProjects","ScheduleTable","weekNumbers","tableData","today","now","num","Table","bordered","hover","scroller","scrollTo","smooth","offset","duration","generateTableData","scheduleData","setWeekNumbers","setTableData","moveDate","firstDayMonth","lastDayMonth","moveDateMonth","startOf","endOf","weekDatesArray","monthDatesArray","currentWeekData","currentMonthData","ContentTable","useEffect","findPreviousDay","firstDayOfCourse","dayBefore","findNextDay","nextDay","CurrentDaySection","previousDayId","previousDay","currentDayId","ScheduleContent","nextToday","months","defaultActiveKey","ModuleSection","info","Modules","moduleNameArray","scheduleUrls","scheduleObjs","itemUrlArray","split","generatingDataArrays","accessingRequiredItems","moduleName","poce","ice","urlObj","splitName","dataObj","sortScheduleObjs","CourseWeeks","currentWeekRef","current","scrollIntoView","block","CurrentWeekDiv","ref","firstDayOfWeek","lastDayOfWeek","weeksDates","weekNumber","useRef","navbarScroll","navId","sidebarId","SideBar","BatchSchedule","courseDatesArray","b","ScheduleContainer","useRouteMatch","path","Navbar","bg","Brand","src","logo","alt","as","to","toUpperCase","exact","App","ptbc1","ptbc2","ftbc4","ftbc5","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0831f903.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nfunction AddItemModal({\n  show,\n  onHide,\n  bootcampdata,\n  coursedate,\n  setDaysInBatchFile,\n  setDaysInMainFile,\n}) {\n  // input fields for a entry of a new item into the main data file\n  const [title, setTitle] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [section, setSection] = useState(\"\");\n  const [sectionClass, setSectionClass] = useState(\"\");\n\n  // function that adds new item to main data file\n  const handleAddItem = (e) => {\n    e.preventDefault();\n\n    // new item that will be added to main data file\n    const newItem = {\n      name: title,\n      url: url,\n    };\n\n    // if the section that the new item is to be added to is empty, an empty array called items is added to it\n    if (!bootcampdata[coursedate].dateTypes[section][sectionClass].items) {\n      bootcampdata[coursedate].dateTypes[section][sectionClass].items = [];\n    }\n\n    // the new item is then pushed into items array\n    bootcampdata[coursedate].dateTypes[section][sectionClass].items.push(\n      newItem\n    );\n\n    // the new content is saved in state\n    bootcampdata.constructor === Array\n      ? setDaysInMainFile([...bootcampdata])\n      : setDaysInBatchFile({ ...bootcampdata });\n  };\n\n  return (\n    // modal that takes in user input for the creation of a new item\n    <Modal\n      show={show}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"add-input-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"add-input-modal\">Add an item</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Group className=\"mb-3\" controlId=\"title\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\" controlId=\"url\">\n            <Form.Label>URL</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter URL\"\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Label>Section</Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSection(e.target.value)}\n          >\n            <option>choose section</option>\n            <option value=\"general\">general</option>\n            <option value=\"css\">css</option>\n            <option value=\"ux\">ux</option>\n            <option value=\"projects\">projects</option>\n            <option value=\"ip\">ip</option>\n            <option value=\"algos\">algorithms</option>\n          </Form.Select>\n\n          <Form.Label>Class </Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSectionClass(e.target.value)}\n          >\n            <option>choose class type</option>\n            <option value=\"preClass\">preClass</option>\n            <option value=\"postClass\">postClass</option>\n            <option value=\"inClass\">inClass</option>\n            {section === \"projects\" && (\n              <>\n                <option value=\"projectDue\">projectDue</option>\n                <option value=\"projectStart\">projectStart</option>\n              </>\n            )}\n            {section === \"ip\" && <option value=\"ipDue\">ipDue</option>}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleAddItem(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default AddItemModal;\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\n// moves items to a specific date in the schedule\nfunction ShiftItemModal({\n  show,\n  onHide,\n  shiftitem,\n  bootcampdata,\n  setbootcampdata,\n  sectiontype,\n  classtype,\n  classindex,\n  section,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  const [selectedDate, setSelectedDate] = useState(\"\");\n\n  const handleSubmitDate = (e) => {\n    e.preventDefault();\n    // finding the selected item in the data file\n    let selectedItem = sectiontype[classtype].items[classindex];\n    // removing it from it's original position\n    sectiontype[classtype].items.splice(classindex, 1);\n\n    // if items array is empty after removing selected item, remove empty items array\n    if (sectiontype[classtype].items.length === 0) {\n      delete sectiontype[classtype].items;\n    }\n    // this is where we want to move the item to\n    const targetDay = bootcampdata[selectedDate].dateTypes[section];\n\n    // checking to see if items array exists at destination, if not, an empty array called items is added\n    if (!targetDay[classtype].items) {\n      targetDay[classtype].items = [];\n    }\n\n    // selected item is push into items array at destination\n    targetDay[classtype].items.push(selectedItem);\n\n    // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n    bootcampdata.constructor === Array\n      ? setDaysInMainFile([...bootcampdata])\n      : setDaysInBatchFile({...bootcampdata})\n  };\n\n  return (\n    <Modal\n      show={show}\n      shiftitem={shiftitem}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"item-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"item-modal\">Moving item ...</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"days\"\n            onChange={(e) => setSelectedDate(e.target.value)}\n          >\n            <option>--</option>\n            {shiftitem.dates.map((date) => {\n              if (typeof date === \"number\") {\n                return (\n                  <>\n                    <option value={date}>\n                      Day {bootcampdata[date].courseDay}\n                    </option>\n                    ;\n                  </>\n                );\n              } else {\n                return (\n                  <>\n                    <option value={date}>{date}</option>;\n                  </>\n                );\n              }\n            })}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleSubmitDate(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default ShiftItemModal;\n","import React, { useState } from \"react\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport ShiftItemModal from \"./ShiftItemModal\";\nimport DragIndicatorIcon from '@material-ui/icons/DragIndicator';\nimport holidayData from '../../../../data/2021-sg-stat-holidays.json';\n\n// helper functions that populates dateArray\n// ##########################################################\nconst addDates = (datesArray, date) => {\n  if (!datesArray.includes(date)) {\n    datesArray.push(date);\n  }\n  return datesArray;\n};\n\nconst addIndex = (bootcampData, datesArray, date) => {\n  if (!datesArray.includes(bootcampData.indexOf(date))) {\n    datesArray.push(bootcampData.indexOf(date));\n  }\n  return datesArray;\n};\n\n// helper function that shifts items 1 day\nconst shiftOneDay = (\n  direction, \n  bootcampData, \n  dayIndex, \n  sectionType, \n  classType, \n  classIndex, \n  section,\n  setDaysInMainFile,\n  setDaysInBatchFile\n  ) => {\n\n      let bootcampDataArray;\n      let target; \n       if(bootcampData.constructor === Object) {\n         const holidayDates = [];\n         Object.keys(holidayData).forEach((type) => {\n          Object.keys(holidayData[type]).forEach((date) => {\n            holidayDates.push(date);\n          })\n         })\n         bootcampDataArray = Object.keys(bootcampData);\n\n         if(direction === 'up') {\n           target = bootcampData[bootcampDataArray[dayIndex - 1]].courseDate;\n           if (holidayDates.includes(target)) {\n            target = bootcampData[bootcampDataArray[(dayIndex - 1) -1]].courseDate;\n           }         \n          \n         } else {\n           target = bootcampData[bootcampDataArray[dayIndex + 1]].courseDate;\n           if (holidayDates.includes(target)) {\n            target = bootcampData[bootcampDataArray[(dayIndex + 1) +1]].courseDate;\n           }\n           \n         }\n      } else {\n        if (direction === 'up') {\n          target = dayIndex - 1\n        } else {\n          target = dayIndex + 1\n        }\n      }\n      // finding the selected item in the data file\n      let selectedItem = sectionType[classType].items[classIndex];\n      // removing it from it's original position\n      sectionType[classType].items.splice(classIndex, 1);\n\n      // if items array is empty after removing selected item, remove empty items array\n      if (sectionType[classType].items.length === 0) {\n        delete sectionType[classType].items;\n      }\n      // this is where we want to move the item to\n      const targetDay = bootcampData[target].dateTypes[section];\n      // checking to see if items array exists at destination, if not, an empty array called items is added\n      if (!targetDay[classType].items) {\n        targetDay[classType].items = [];\n      }\n\n      // selected item is push into items array at destination\n      targetDay[classType].items.push(selectedItem);\n\n      // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n      bootcampData.constructor === Array\n        ? setDaysInMainFile([...bootcampData])\n        : setDaysInBatchFile({...bootcampData})\n\n    }\n// ############################################################\n\nfunction ClassItem({\n  setBootcampData,\n  section,\n  bootcampData,\n  classType,\n  sectionType,\n  item,\n  dayIndex,\n  classIndex,\n  setDaysInMainFile,\n  setDaysInBatchFile\n}) {\n  // toggle visibility of buttons\n  const [modalShow, setModalShow] = useState(false);\n  // object shift item is initialised with keys direction and dates to store data that will be passed into the nect component\n  const [shiftItem, setShiftItem] = useState({\n    direction: null,\n    dates: [],\n  });\n\n  // function that handles moving data from one day to another\n  const handleShift = (direction, dayIndex, classIndex) => {\n    // array that contains all the dates either before or after a selected date depending on direction chosen by user\n    let datesArray = [];\n\n    \n\n    // item is being moved backwards in the schedule\n    if (direction === \"any\") {\n      // if bootcampData either an object or an array depending on wether the user is editing the main or individual schedule files, and needs to be processed accordingly\n      bootcampData.constructor === Object\n        ? Object.keys(bootcampData)\n            .map((date) => {\n              datesArray = addDates(datesArray, date);\n            })\n        : bootcampData\n            .map((date) => {\n              datesArray = addIndex(bootcampData, datesArray, date);\n            });\n\n      // data is put into object shift item\n      setShiftItem({\n        ...shiftItem,\n        dates: datesArray,\n      });\n      // modal that takes user input to move item is shown\n      setModalShow(true);\n      // item is being moved forward in the schedule\n    } else if (direction === \"down\") {\n     shiftOneDay(\n        'down', \n        bootcampData, \n        dayIndex, \n        sectionType, \n        classType, \n        classIndex, \n        section,\n        setDaysInMainFile,\n        setDaysInBatchFile\n     )\n\n    } else if (direction === \"up\") {\n      shiftOneDay(\n        'up', \n        bootcampData, \n        dayIndex, \n        sectionType, \n        classType, \n        classIndex, \n        section,\n        setDaysInMainFile,\n        setDaysInBatchFile\n     )\n    } else {\n      // here the item is being deleted from the schedule\n      sectionType[classType].items.splice(classIndex, 1);\n      if (sectionType[classType].items.length === 0) {\n        delete sectionType[classType].items;\n      }\n      // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n      bootcampData.constructor === Array\n        ? setDaysInMainFile([...bootcampData])\n        : setDaysInBatchFile({...bootcampData})\n\n    }\n  };\n\n  return (\n    <div>\n      <div\n        className=\"class-item\"\n      >\n        {item.name}\n        \n          <div>\n            {/* remove item  */}\n            <button className=\"trash-can\" onClick={() => handleShift(\"delete\", dayIndex, classIndex)}>\n              <DeleteOutlinedIcon />\n            </button>\n            {/* move item backwards in the schedule  */}\n            <button onClick={() => handleShift(\"up\", dayIndex, classIndex)}>\n              <ExpandLessIcon />\n            </button>\n            {/* move item forward in the schedule  */}\n            <button onClick={() => handleShift(\"down\", dayIndex, classIndex)}>\n              <ExpandMoreIcon />\n            </button>\n            <button className=\"select\" onClick={() => handleShift('any', dayIndex, classIndex)}>\n              <DragIndicatorIcon />\n            </button>\n          </div>\n        \n        {modalShow && (\n          // modal that is shown when the user clicks either of the above buttons\n          <ShiftItemModal\n            show={modalShow}\n            onHide={() => setModalShow(false)}\n            shiftitem={shiftItem}\n            bootcampdata={bootcampData}\n            setbootcampdata={setBootcampData}\n            sectiontype={sectionType}\n            classtype={classType}\n            classindex={classIndex}\n            section={section}\n            setDaysInMainFile={setDaysInMainFile}\n            setDaysInBatchFile={setDaysInBatchFile}\n            />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ClassItem;\n","import React from \"react\";\nimport ClassItem from \"./ClassItem\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nfunction SectionClass({\n  day,\n  sectionIndex,\n  sectionclass,\n  sectionType,\n  bootcampData,\n  setBootcampData,\n  section,\n  dayIndex,\n  setDaysInBatchFile,\n  setDaysInMainFile,\n}) {\n\n  // helper function that maps each element in section array to a new course day\n  const shiftSection = (sectionArray, startDay, bootcampData) => {\n    sectionArray.forEach((element, index) => {\n      if (element !== null && bootcampData.constructor === Object) {\n        if (bootcampData[bootcampDataArray[startDay + index]].dateTypes[section] &&\n          bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][sectionclass]) {\n          if (bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][sectionclass]\n              .items) {\n            sectionArray[index].forEach((item) => {\n              bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][\n                sectionclass\n              ].items.push(item);\n            });\n          } else {\n            bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][\n              sectionclass\n            ].items = sectionArray[index];\n          }\n        }\n      } else if (element !== null && bootcampData.constructor === Array) {\n          if (bootcampData[startDay + index].dateTypes[section][sectionclass]\n            .items) {\n          sectionArray[index].forEach((item) => {\n            bootcampData[startDay + index].dateTypes[section][\n              sectionclass\n            ].items.push(item);\n          });\n          } else {\n            bootcampData[startDay + index].dateTypes[section][\n              sectionclass\n            ].items = sectionArray[index];\n          }\n        }\n      });\n    return bootcampData;\n  };\n\n  let bootcampDataArray;\n  const handleClassShift = (direction, dayIndex) => {\n    // puts all the items in selected class in an array and deletes them from their original position\n    const sectionArray = [];\n    \n    if (bootcampData.constructor === Object) {\n      bootcampDataArray = Object.keys(bootcampData);\n\n        for (let i = dayIndex; i < bootcampDataArray.length - 1; i += 1) {\n          if(bootcampData[bootcampDataArray[i]].dateTypes[section] && bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass]) {\n            if (bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items) {\n            const selectedSection =\n              bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items;\n              sectionArray.push(selectedSection);\n              delete bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items;\n            } else {\n              sectionArray.push(null);\n            }\n          }\n          \n        }\n      \n    } else {\n      for (let i = dayIndex; i < bootcampData.length - 1; i += 1) {\n        if (bootcampData[i].dateTypes[section][sectionclass].items) {\n          const selectedSection =\n            bootcampData[i].dateTypes[section][sectionclass].items;\n          sectionArray.push(selectedSection);\n          delete bootcampData[i].dateTypes[section][sectionclass].items;\n        } else {\n          sectionArray.push(null);\n        }\n      }\n    }\n    \n\n    let startDay;\n    // when user clicks the down button, items are put into section/class of the next day\n    if (direction === \"down\") {\n      startDay = dayIndex + 1;\n    } else {\n      // when user clicks the up button, items are put into section/class of the previous day\n      startDay = dayIndex - 1;\n    }\n\n    bootcampData = shiftSection(sectionArray, startDay, bootcampData);\n    \n     // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n    bootcampData.constructor === Array\n      ? setDaysInMainFile([...bootcampData])\n      : setDaysInBatchFile({...bootcampData})\n  };\n\n  return (\n    <div>\n      {sectionType[sectionclass].items && (\n        <div className=\"section-class\">\n          <div className=\"class-title\">{sectionclass}</div>\n          <div className=\"class-items\">\n            {sectionType[sectionclass].items.map((item, classIndex) => {\n              return (\n                <ClassItem\n                  day={day}\n                  sectionclass={sectionclass}\n                  bootcampData={bootcampData}\n                  setBootcampData={setBootcampData}\n                  section={section}\n                  classType={sectionclass}\n                  sectionType={sectionType}\n                  item={item}\n                  dayIndex={dayIndex}\n                  classIndex={classIndex}\n                  setDaysInBatchFile={setDaysInBatchFile}\n                  setDaysInMainFile={setDaysInMainFile}\n                />\n              );\n            })}\n          </div>\n          <div\n            className=\"section-class-header\"\n  \n          >\n              <div>\n                <button\n                  onClick={() => handleClassShift(\"up\", dayIndex, sectionIndex)}\n                >\n                  <ExpandLessIcon />\n                </button>\n                <button\n                  onClick={() =>\n                    handleClassShift(\"down\", dayIndex, sectionIndex)\n                  }\n                >\n                  <ExpandMoreIcon />\n                </button>\n              </div>\n          \n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SectionClass;\n","import React from \"react\";\nimport SectionClass from \"./SectionClass\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction Section({\n  day,\n  setBootcampData,\n  section,\n  sectionType,\n  dayIndex,\n  bootcampData,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  // variable classExists is created to track if any class of a section exists (it is initially set to false)\n  // if any class of a section exists, classExists is set to true\n  // if classExists is true, a header for this section will be created\n  let classExists = false;\n  if (sectionType.constructor === Object) {\n    if (\n      sectionType.preClass.items ||\n      sectionType.inClass.items ||\n      sectionType.postClass.items ||\n      (sectionType === \"projects\" &&\n        (sectionType.projectDue.items || sectionType.projectStart.items)) ||\n      (sectionType === \"ip\" && sectionType.ipDue.items)\n    ) {\n      classExists = true;\n    }\n  }\n\n  return (\n    <div>\n      {sectionType.constructor === Object && (\n        <>\n          <Accordion>\n            {classExists && (\n              <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>{sectionType.type}</Accordion.Header>\n                <Accordion.Body>\n                  {Object.keys(sectionType)\n                    .filter((sectionClass) => sectionType[sectionClass].items)\n                    .map((sectionclass, sectionIndex) => {\n                      return (\n                        <div className=\"all-classes\">\n                          <SectionClass\n                            day={day}\n                            sectionIndex={sectionIndex}\n                            sectionclass={sectionclass}\n                            sectionType={sectionType}\n                            bootcampData={bootcampData}\n                            setBootcampData={setBootcampData}\n                            section={section}\n                            dayIndex={dayIndex}\n                            setDaysInBatchFile={setDaysInBatchFile}\n                            setDaysInMainFile={setDaysInMainFile}\n                          />\n                        </div>\n                      );\n                    })}\n                </Accordion.Body>\n              </Accordion.Item>\n            )}\n          </Accordion>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Section;\n","import React from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Section from \"./inner-accordion/Section\";\n\nfunction MainAccordion({\n  dayIndex,\n  bootcampData,\n  setBootcampData,\n  day,\n  setShowInputModal,\n  setCourseDate,\n  handleCloseAll,\n  setAccordionKey,\n  accordionKey,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  \n\n  const handlePlusClick = (day) => {\n    console.log(day);\n    setCourseDate(day);\n    setShowInputModal(true);\n  };\n\n  return (\n    <div>\n      {bootcampData[day].dateTypes.module && (\n        <Accordion key={accordionKey}>\n          <Accordion.Item eventKey={dayIndex}>\n            <div\n                className=\"course-day-symbol\"\n                onClick={() => handlePlusClick(day)}\n              >\n                {\" \"}\n                <AddIcon />\n            </div>\n            <Accordion.Header>\n              <div className=\"course-day-header\">\n                {bootcampData.constructor === Object ? (\n                  <>\n                    {day}, Week: {bootcampData[day].courseWeek}, Course Day:{\" \"}\n                    {bootcampData[day].courseDay},{\" \"}\n                    {bootcampData[day].dateTypes.module}{\" \"}\n                  </>\n                ) : (\n                  <>\n                    Course Day: {bootcampData[day].courseDay},{\" \"}\n                    {bootcampData[day].dateTypes.module}{\" \"}\n                  </>\n                )}\n              </div>\n            </Accordion.Header>\n            <Accordion.Body>\n              <div className=\"course-day\">\n                <div>\n                  {Object.keys(bootcampData[day].dateTypes).map(\n                    (section) => (\n                      <Section\n                        day={day}\n                        setBootcampData={setBootcampData}\n                        section={section}\n                        sectionType={bootcampData[day].dateTypes[section]}\n                        dayIndex={dayIndex}\n                        bootcampData={bootcampData}\n                        setDaysInBatchFile={setDaysInBatchFile}\n                        setDaysInMainFile={setDaysInMainFile}\n                      />\n                    )\n                  )}\n                </div>\n              </div>\n            </Accordion.Body>\n          </Accordion.Item>\n        </Accordion>\n      )}\n    </div>\n  );\n}\n\nexport default MainAccordion;\n","const download = (data, filename) => {\n        // from: https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\n        var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data));\n        var dlAnchorElem = document.createElement('a');\n        dlAnchorElem.setAttribute(\"href\",     dataStr     );\n        dlAnchorElem.setAttribute(\"download\", filename);\n        dlAnchorElem.click();\n    };\n\nexport default download;","import { DateTime } from 'luxon';\nimport holidayData from './data/2021-sg-stat-holidays.json';\nimport basicsData from './data/basics-course-days.json';\nimport bootcampDataJson from './data/bootcamp-course-days.json';\n\nconst publicHolidays = holidayData.PH;\nconst publicHolidayArray = [];\n// get array of all public holiday dates\nObject.keys(publicHolidays).map((key, index) => {\n    publicHolidayArray.push(key);\n});\n\nconst companyHolidays = holidayData.company;\nconst companyHolidayArray = [];\nconst winterBreak = [];\n// get array of all company holiday dates\nObject.keys(companyHolidays).map((key, index) => {\n    companyHolidayArray.push(key);\n    // get array of winter break dates\n    if(companyHolidays[key].name === 'winter break') {\n        winterBreak.push(companyHolidays[key].date);\n    }\n});\n\nconst phWithoutCh = [];\n// get array of public holidays not including those included in winter break\npublicHolidayArray.forEach((holiday) => {\n    if(!companyHolidayArray.includes(holiday)) {\n        phWithoutCh.push(holiday);\n    }\n});\n\nlet bootcampData;\n\n// helper function for getting utc date/time\nconst getLocalDateTime = (utc, timeString, courseName, courseType, date) => {\n    const changedFormat = date.toFormat(\"yyyy-MM-dd\");\n    if (courseType === 'Basics') {\n        utc = DateTime.fromISO(changedFormat + timeString, {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp FT' && Number(courseName) % 2 === 0) {\n        utc = DateTime.fromISO(changedFormat + 'T13:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if ((courseType === 'Bootcamp FT' && Number(courseName) % 2 !== 0) || (courseType === 'Bootcamp PT' && (date.weekday === 6))) {\n        utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp PT' && (date.weekday === 1)) {\n        utc = DateTime.fromISO(changedFormat + 'T19:30', {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp PT' && (date.weekday === 6)) {\n        utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n    }\n    return utc;\n}\n\n// helper function for deciding what goes in topLevelObject based on course type\nconst generateTopLevelObject = (courseType, topLevelObject, lessonDays, courseName) => {\n\n    if (courseType === 'Basics') {\n        topLevelObject = {\n            daysOfWeek: lessonDays,\n            courseStartIndex: basicsData.courseStartIndex,\n            totalCourseDays: basicsData.totalCourseDays,\n            ...topLevelObject\n        };\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n        let bootcampDays;\n        // TODO:  this is to be removed when ftbc4 finishes\n        let startIndex;\n\n        if (courseType === 'Bootcamp FT') {\n            bootcampDays = bootcampData.daysOfWeek.fullTime;\n            startIndex = bootcampData.courseStartIndex;\n            if (courseName === '4') {\n                startIndex = 4;\n            }\n        } else {\n            bootcampDays = bootcampData.daysOfWeek.partTime;\n            startIndex = bootcampData.courseStartIndex;\n        }\n\n        topLevelObject = {\n            daysOfWeek: bootcampDays,\n            courseStartIndex: startIndex,\n            totalCourseDays: bootcampData.totalCourseDays,\n            ...topLevelObject\n        }\n    }\n\n    return topLevelObject;\n    }\n\n// helper function that generates dateObj if the course date falls on a public holiday\nconst generateHolidayObject = (dateString, week, date, dateObj, courseType) => {\n\n    let weekOfCourse;\n    if (courseType.includes('Bootcamp') && companyHolidayArray.includes(dateString)) {\n        weekOfCourse = null;\n    } else {\n        weekOfCourse = week;\n    }\n\n    dateObj = {\n        courseDay: null,\n        courseDate: dateString,\n        courseWeek: weekOfCourse,\n        dayNumber: date.weekday,\n        dateTypes: {}\n    }\n\n    if (phWithoutCh.includes(dateString)) {\n        dateObj.dateTypes = publicHolidays[dateString];\n    } else {\n        dateObj.dateTypes = companyHolidays[dateString];\n    }\n\n    return dateObj;\n}\n\n// helper function that generates dateObj for a normal courseday\nconst generateCourseDayObject = (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay) => {\n    // get whatever index of basicsData that is specified by courseDayCount\n    \n        dateObj = {\n            courseDate: dateString,\n            courseWeek: week,\n            weekDay: weekDay,\n            dayNumber: date.weekday, \n            meetingDateTimeUTC: utc,\n            };\n    \n    // data is different for basics and bootcamp\n    if (courseType === 'Basics') {\n        dateObj = {\n            ...dateObj, ...basicsData.days[courseDay]\n        }\n     } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            dateObj = {\n            ...dateObj, ...bootcampData.days[courseDay]\n        }\n    }\n    return dateObj;\n}\n\n// helper function for generating filename\nconst getFilename = (startDate, dateString, courseName) => {\n    const displayDate = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    const displayName = `${displayDate.toFormat('dd-MM-yyyy')}_${dateString}_BATCH${courseName}`;\n    return displayName;\n}\n \n// ##################################################################\n// ##################################################################\n\nconst generateDataObject = (startDate, courseName, courseType, input, lessonDays) => {\n    // used if we are generating batch schedule straight after making changes to main json file\n    if (input) {\n        bootcampData = input;\n    } else {\n        bootcampData = bootcampDataJson;\n    }\n\n    console.log('lesson days', lessonDays);\n    // used to set the time for basics course\n    let basicsTimeslots;\n    if (lessonDays) {\n        if (lessonDays[0] === 1 && lessonDays[1] === 4) {\n            basicsTimeslots = ['T19:30', 'T19:30'];\n        } else if (lessonDays[0] === 7 && lessonDays[1] === 4) {\n            basicsTimeslots = ['T19:00', 'T19:30'];\n        } else {\n            basicsTimeslots = ['T19:30', 'T13:00'];\n        }\n    }\n\n    // random times, basicsTimeslots is only used for basics course\n    if (basicsTimeslots === undefined) {\n        basicsTimeslots = ['T19:30', 'T13:00'];\n    }\n\n    let date = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let utc;\n    utc = getLocalDateTime(utc, 'T16:00', courseName, courseType, date);\n    let dateWeek = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let classDatesCount = 1;\n    let week;\n    if (courseType === 'Basics') {\n        week = 0;\n    } else {\n        week = 1;\n    }\n    let weekDay = 1;\n    let data;\n    let courseDayCount;\n    // starts from 0 because it's tracking the index of the json data file\n    let courseDay = 0;\n\n    let topLevelObject = {\n            courseType: courseType,\n            days: {}\n        };\n\n    data = generateTopLevelObject(courseType, topLevelObject, lessonDays, courseName);\n\n    // set the number of course days based on course type\n    if (courseType === 'Basics') {\n        courseDayCount = 13;\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n        courseDayCount = 116;\n    }\n\n    const dayArray = data.daysOfWeek;\n    console.log('day array', dayArray);\n    let dayIndex = data.courseStartIndex;\n\n    while (courseDayCount > 0) {\n        const dateString = date.toFormat('dd-MM-yyyy');\n\n        // setting filename from start date, end date, courseName of course \n        // if this condition is met, dateString will be the end date of course\n        if (courseDay + 1 === data.totalCourseDays) {\n            // start date\n            data.courseName = getFilename(startDate, dateString, courseName);\n        }\n\n        let dateObj;\n        // if date is a public holiday\n        if (phWithoutCh.includes(dateString) || winterBreak.includes(dateString)) {\n            dateObj = generateHolidayObject (dateString, week, date, dateObj, courseType);\n        // if date is not a holiday\n        } else {\n            dateObj = generateCourseDayObject (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay);\n\n            // increase course days on days that classes are held,\n            // DO NOT increase course days on holidays\n            courseDayCount -= 1;\n            courseDay += 1;\n        }\n        data.days[dateString] = dateObj;\n\n        // used to check for first day of basics course\n        const firstDay = DateTime.fromFormat(startDate, \"yyyy-MM-dd\").toFormat('dd-MM-yyyy');\n        const formattedDate = date.toFormat('dd-MM-yyyy');\n\n        if (classDatesCount === data.totalCourseDays && courseType === 'Basics') {\n            date = date.plus({ weeks: 1 }).set({weekday: 1}); \n            utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n            weekDay += 1;\n            week += 1;\n\n            // checking if the last day of bootcamp is a friday, if not, we need to add days to schedule\n            // to make it end on a friday\n        } else if (courseType === 'Bootcamp FT' && data.days[date.toFormat('dd-MM-yyyy')].courseDay === 112 && date.weekday !== 2) {\n            // getting the number days to Friday\n            let differenceInDays;\n            if (date.weekday === 1) {\n                differenceInDays = 5 - date.weekday;\n            } else if (date.weekday === 5) {\n                differenceInDays = 7;\n                week += 1;\n            } else if (date.weekday === 4) {\n                differenceInDays = 8;\n            } else {\n                differenceInDays = 9;\n            }\n    \n            // getting the extra dates to Friday\n            const datesToAdd = [];\n            for (let i = 1; i <= differenceInDays; i += 1) {\n                const newDate =  date.plus({ days: i }).toFormat('dd-MM-yyyy');\n                const newWeekday =  DateTime.fromFormat(newDate, 'dd-MM-yyyy').weekday;\n                console.log('new ', newWeekday);\n                if (newWeekday < 6) {\n                    datesToAdd.push(newDate);\n                }\n            }\n            \n            // put all dates we want to add to schedule in combinedDates array\n            // take into consideration possibility of public holiday occuring during those days\n            const newDateObjectsArray = [];\n            for (let k = 0; k < datesToAdd.length; k += 1) {\n                let addedCourseday;\n                if (phWithoutCh.includes(datesToAdd[k])) {\n                    addedCourseday = null;\n                } else {\n                    addedCourseday = 113 + k;\n                }\n                const dateInfo = {\n                    date: datesToAdd[k],\n                    courseday: addedCourseday\n                }\n                newDateObjectsArray.push(dateInfo);\n            }\n            // third last courseday is feature freeze day\n            // move it forward if this day falls on a public holiday\n            let featureFreezeDay;\n            if (phWithoutCh.includes(newDateObjectsArray[newDateObjectsArray.length - 3].date)) {\n                featureFreezeDay = newDateObjectsArray[newDateObjectsArray.length - 4].date;\n            } else {\n                featureFreezeDay = newDateObjectsArray[newDateObjectsArray.length - 3].date;\n            }\n\n            // last day of course is project presentation day\n            // move it forward if this day falls on a public holiday\n            let lastDay;\n            if (phWithoutCh.includes(newDateObjectsArray[newDateObjectsArray.length - 1].date)) {\n                lastDay = newDateObjectsArray[newDateObjectsArray.length - 2].date;\n            } else {\n                lastDay = newDateObjectsArray[newDateObjectsArray.length - 1].date;\n\n            };\n            \n            // needed to find totalcourse days after adding days\n            let lastCourseDay;\n            // generate new dateObjs \n            for (let j = 0; j < newDateObjectsArray.length; j += 1) {\n                const targetWeekday = DateTime.fromFormat(newDateObjectsArray[j].date, 'dd-MM-yyyy').weekday;\n                const newDate = DateTime.fromFormat(newDateObjectsArray[j].date, 'dd-MM-yyyy');\n                utc = getLocalDateTime (utc, 'T13:00', courseName, courseType, newDate);\n                // helper function for adding dateObj to schedule data\n                const addDateObjToSchedule = (dateObj) => {\n                    data.days[newDateObjectsArray[j].date] = dateObj;\n                    data.days[newDateObjectsArray[j].date].courseDay = newDateObjectsArray[j].courseday;\n                }\n                \n                if (newDateObjectsArray[j].date === featureFreezeDay) {\n                    dateObj = generateCourseDayObject (dateObj, newDateObjectsArray[j].date, week, targetWeekday, newDate, utc, courseType, 113);\n                    addDateObjToSchedule(dateObj);\n                } else if (newDateObjectsArray[j].date === lastDay) {\n                    dateObj = generateCourseDayObject (dateObj, newDateObjectsArray[j].date, week, targetWeekday, newDate, utc, courseType, 115);\n                    addDateObjToSchedule(dateObj);\n                    lastCourseDay = dateObj.courseDay;\n                    // content is the same for all other days, except if the day is a public holiday\n                } else {\n                    if (phWithoutCh.includes(newDateObjectsArray[j].date)) {\n                        dateObj = generateHolidayObject (newDateObjectsArray[j].date, week, newDate, dateObj, courseType);\n                        addDateObjToSchedule(dateObj);\n                    } else {\n                        dateObj = generateCourseDayObject (dateObj, newDateObjectsArray[j].date, week, targetWeekday, newDate, utc, courseType, 114);\n                        addDateObjToSchedule(dateObj);\n                    }\n                }\n\n\n            }\n            data.courseName = getFilename(startDate, lastDay, courseName);\n            data.totalCourseDays = lastCourseDay;\n            break;\n\n        } else {\n            // first meeting of basics is a pre-course meeting that always starts on a saturday\n            // (not included in daysOfWeek)\n           // this is the end of the dayArray (last day of the week)\n            if (( dayIndex === dayArray.length -1) || \n                (formattedDate === firstDay && courseType === 'Basics')) {\n                    weekDay = 1;\n                    // return to beginning of array (return to beginning of week)\n                    dayIndex = 0;\n                    date = date.plus({ weeks: 1 }).set({ weekday: dayArray[dayIndex] })\n                    dateWeek = dateWeek.plus({ weeks: 1 });\n                    if (!companyHolidayArray.includes(dateString)) {\n                        week += 1;\n                    };\n                    utc = getLocalDateTime (utc, basicsTimeslots[0], courseName, courseType, date);\n                    \n            } else {\n                // day within the week\n                dayIndex += 1;\n                date = date.set({ weekday: dayArray[dayIndex] })\n                    if (!phWithoutCh.includes(dateString)) {\n                        weekDay += 1;\n                    }\n                utc = getLocalDateTime (utc, basicsTimeslots[1], courseName, courseType, date);\n            }\n        }\n        // increase classDatesCount regardless of whether it is a public holiday\n        classDatesCount += 1;\n    }\n    // TODO: needs to be removed after ftbc4 is finished\n    if (courseType === 'Bootcamp FT' && courseName === '4') {\n        data.days['09-07-2021'].dayNumber = 1;\n    }\n    console.log('data', data);\n    return data;\n}\n\nexport default generateDataObject;","import React, { useState } from \"react\";\nimport AddItemModal from \"./main-accordion/AddItemModal\";\nimport MainAccordion from \"./main-accordion/MainAccordion\";\nimport Button from \"react-bootstrap/Button\";\nimport download from \"../../download\";\nimport generateDataObject from \"../../generateCourseDates\";\nimport { DateTime } from \"luxon\";\n\n// helper function for cpoying data to clipboard\nconst copyToClipboard = (data) => {\n  // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n  let selBox = document.createElement('textarea');\n  selBox.style.position = 'fixed';\n  selBox.style.left = '0';\n  selBox.style.top = '0';\n  selBox.style.opacity = '0';\n  // this copies the JSON data to clipboard with original formatting\n  selBox.value = JSON.stringify(data, undefined, 2);\n  document.body.appendChild(selBox);\n  selBox.focus();\n  selBox.select();\n  document.execCommand('copy');\n  document.body.removeChild(selBox);\n}\n \n// ############################################################################\n// ############################################################################\nconst GenerateDataShiftContent = ({\n  bootcampData,\n  setBootcampData,\n  mainFile,\n  batchFile,\n  setDaysInBatchFile,\n  setDaysInMainFile,\n  batchArray\n}) => {\n  const [showInputModal, setShowInputModal] = useState(false);\n  const [courseDate, setCourseDate] = useState(\"\");\n  // used in the close all functionality\n  const [accordionKey, setAccordionKey] = useState(1234);\n\n  // function that handles download of main data file after edits\n  const handleDownloadMainClick = async () => {\n    download(mainFile, \"modified-main-data-file.json\");\n  };\n\n  // function that handles download of individual batch data file after edits\n  const handleBatchDownloadClick = () => {\n    download(\n      batchFile,\n      `modified-${batchFile.courseName}-file.json`\n    );\n  };\n\n  // state set so that rerender occurs\n  const handleCloseAll = () => {\n    const newAccordionKeyValue = accordionKey + 1;\n    setAccordionKey(newAccordionKeyValue);\n  }\n\n  // copys json data file to clipboard\n  const handleEditInGithub = (data) => {\n    copyToClipboard(data);\n\n    let gitbookUrl;\n    if (data.repoUrls) {\n      gitbookUrl = mainFile.repoUrls.edit;\n    } else {\n      gitbookUrl = `https://github.com/rocketacademy/scheduler/edit/main/src/data/${batchFile.courseName}.json`;\n    }\n    // opens a new window in the browser at specified address(gitbook edit page)\n    window.open(gitbookUrl, \"_blank\")\n  }\n\n  const handleBatchEdit = async (index) => {\n    try {\n      const batch = batchArray[index];\n      const startDate = DateTime.fromFormat(batch.content.courseName.slice(0, 10), 'dd-MM-yyyy').toFormat('yyyy-MM-dd');\n      let courseType;\n      if (batch.name.includes('pt')) {\n        courseType = 'Bootcamp PT';\n      } else {\n        courseType = 'Bootcamp FT';\n      }\n      const courseName = batch.content.courseName[batch.content.courseName.length-1];\n      const data = await generateDataObject(startDate, courseName, courseType, mainFile);\n      copyToClipboard(data);\n      window.open(`https://github.com/rocketacademy/scheduler/edit/main/src/data/${data.courseName}.json`, \"_blank\")\n\n    }\n    catch (error) {\n      console.log(error);\n    }\n  }\n  \n  return (\n    <>\n      {/* renders batch schedule data file  */}\n      {bootcampData.constructor === Object &&\n        Object.keys(bootcampData).length > 0 && (\n          <div>\n            <div className=\"download-button-container\">\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={() => handleEditInGithub(batchFile)}\n              >\n                  Edit in GitHub Repo\n              </Button>\n              {\" \"}\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={handleBatchDownloadClick}\n              >\n                Download Modified Batch File\n              </Button>\n            </div>\n            <div className=\"close-all-container\">\n              <Button onClick={handleCloseAll}>close all</Button>\n            </div>\n            {Object.keys(bootcampData).map((day, dayIndex) => {\n              return (\n                <>\n                <div>\n                  <MainAccordion\n                    dayIndex={dayIndex}\n                    bootcampData={bootcampData}\n                    setBootcampData={setBootcampData}\n                    day={day}\n                    setShowInputModal={setShowInputModal}\n                    setCourseDate={setCourseDate}\n                    handleCloseAll={handleCloseAll}\n                    accordionKey={accordionKey}\n                    setAccordionKey={setAccordionKey}\n                    setDaysInBatchFile={setDaysInBatchFile}\n                    setDaysInMainFile={setDaysInMainFile}\n                  />\n                </div>\n                </>\n              );\n            })}\n            {/* modal that takes in user input to create a new item in the schedule  */}\n            {showInputModal && courseDate && (\n              <AddItemModal\n                show={showInputModal}\n                onHide={() => setShowInputModal(false)}\n                bootcampdata={bootcampData}\n                setbootcampdata={setBootcampData}\n                setShowInputModal={setShowInputModal}\n                coursedate={courseDate}\n                setDaysInBatchFile={setDaysInBatchFile}\n                setDaysInMainFile={setDaysInMainFile}\n              />\n            )}\n          </div>\n        )}\n      {/* displays main data file  */}\n      {bootcampData.constructor === Array && (\n        <div className=\"accordion-container\">\n          <div className=\"download-button-container\">\n            <Button\n              className=\"btn btn-primary\"\n              onClick={() => handleEditInGithub(mainFile)}\n            >\n            Edit in GitHub Repo\n            </Button>\n            <Button\n              className=\"btn btn-primary\"\n              onClick={handleDownloadMainClick}\n            >\n              download modified file\n            </Button>\n          </div>\n          <div className=\"batchfile-edit-container\">\n          {batchArray.map((batch, index) => {\n            return (\n              <>\n              <Button className=\"batch-update\" onClick={() => handleBatchEdit(index)}>\n                Update {batch.name}\n              </Button>\n              </>\n            )\n          })}\n          </div>\n          <div className=\"close-all-container\">\n            <Button onClick={handleCloseAll}>Close All</Button>\n          </div>\n          {bootcampData.map((day, dayIndex) => {\n            return (\n              <MainAccordion\n                dayIndex={dayIndex}\n                bootcampData={bootcampData}\n                setBootcampData={setBootcampData}\n                day={dayIndex}\n                setShowInputModal={setShowInputModal}\n                setCourseDate={setCourseDate}\n                handleCloseAll={handleCloseAll}\n                accordionKey={accordionKey}\n                setAccordionKey={setAccordionKey}\n                setDaysInMainFile={setDaysInMainFile}\n                setDaysInBatchFile={setDaysInBatchFile}\n              />\n            );\n          })}\n          {showInputModal && (\n            <AddItemModal\n              show={showInputModal}\n              onHide={() => setShowInputModal(false)}\n              bootcampdata={bootcampData}\n              setbootcampdata={setBootcampData}\n              setShowInputModal={setShowInputModal}\n              coursedate={courseDate}\n              setDaysInMainFile={setDaysInMainFile}\n              setDaysInBatchFile={setDaysInBatchFile}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateDataShiftContent;\n\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\n\n// side navbar that displays links to all batch schedules in batchArray\nfunction ActiveCourses({ batchArray, setBootcampData, setBatchFile }) {\n  const handleSelectClick = (batch) => {\n     setBootcampData(\n      JSON.parse(JSON.stringify(batch.content.days))\n    )\n    setBatchFile(\n      JSON.parse(JSON.stringify(batch.content))\n    )\n  };\n\n  return (\n    <div>\n      <h4>Batches</h4>\n      <Nav variant=\"pills\" className=\"flex-column \">\n        {/* a link is rendered for each element in batchArray */}\n        {batchArray.map((batch, index) => {\n          return (\n            <Nav.Link\n              // when a link is clicked , the content of the selected batch file is rendered\n              onClick={() =>\n                handleSelectClick(batch)\n              }\n              eventKey={index}\n            >\n              {batch.name}\n            </Nav.Link>\n          );\n        })}\n      </Nav>\n    </div>\n  );\n}\n\nexport default ActiveCourses;\n","import { DateTime } from 'luxon';\n\n// timezone is manually set to 'Asia/Singapore' because we are located here\nconst timeZoneSet = 'Asia/Singapore';\n\n// helper function , generates list for pre-class, in-class, post-class\nconst generateClassList = (classList, classType) => {\n    if (classType.mdText) {\n        classList += classType.mdText;\n    }\n\n    if ( classType.items.length > 0) {\n        for (let j = 0; j < classType.items.length; j +=1 ) {\n            if (classType.items[j].url) {\n                classList += `* [${classType.items[j].name}](${classType.items[j].url})\\n`;\n            } else {\n                classList += `* ${classType.items[j].name}\\n`;\n            }  \n        }\n        classList += '\\n';\n    }\n    return classList;\n}\n\n// helper function, generates content list for each section \nconst generateSectionList = (sectionName, sectionType) => {\n    let sectionString = '';\n    if (sectionType.items.length > 0) {\n        if (sectionName === 'preclass') {\n            sectionString = '### Pre Class\\n';\n        } else if (sectionName === 'inclass') {\n            sectionString = '### In Class\\n';\n        } else if (sectionName === 'postclass') {\n            sectionString = '### Post Class\\n';\n        } \n    }\n    \n    sectionString = generateClassList (sectionString, sectionType);\n    return sectionString;\n}\n\n// helper function to get arrays needed to generate markdown\nconst generateCourseArrays = (data) => {\n    // get all course dates\n    Object.keys(data.days).forEach((date) => {\n        dates.push(date);\n    })\n\n    // all possible day numbers that course days fall on\n    dates.forEach((date) => {\n        dayNumbers.push(data.days[date].dayNumber);\n    })\n    dayNumbers = [...new Set(dayNumbers)].sort();\n    \n    // all possible names of days of week courdays fall on (this is the table header)\n    dayNumbers.forEach((number) => {\n        daysOfWeek.push(dayNames[number]);\n    })\n\n    // getting last week of course, + 1 because course week starts at 0\n    lastWeek = data.days[dates[dates.length -1]].courseWeek + 1;\n\n    // getting the dates the coursedays fall on for each week\n    for  (let l = 0; l < lastWeek; l += 1) {\n        const week = [];\n        for (let k = 0; k < dates.length; k += 1) {\n            console.log(data.days[dates[k]].courseWeek);\n            if (data.days[dates[k]].courseWeek === weekCount) {\n                week.push(data.days[dates[k]].courseDate);\n            }\n        }\n        weekDates.push(week);\n        weekCount += 1;\n    }\n\n    // getting rows of table\n    // for each subarray in the weekDates array, displayWeek is initialised to ['-', '-', '-']\n    for (let n = 0; n < weekDates.length; n += 1) {\n        let displayWeek = [];\n        dayNumbers.forEach((day) => {\n            displayWeek.push('-');\n        })\n        \n        // each element in each subarray of weekDates is compared to the element in the same index\n        // position in dayNumbers array\n        console.log(dayNumbers);\n        for (let m = 0; m < weekDates[n].length; m += 1) {\n            for (let p = 0; p < dayNumbers.length; p += 1) {\n                console.log(data.days[weekDates[n][m]].dayNumber === dayNumbers[p])\n                // if element.dayNumber === element at the same index position in dayNumbers array \n                if (data.days[weekDates[n][m]].dayNumber === dayNumbers[p]) {\n                    if (data.days[weekDates[n][m]].dateTypes.title) {\n                        // the '-' in displayWeek is replaced by the dateString\n                        const dateString = DateTime.fromISO(data.days[weekDates[n][m]].meetingDateTimeUTC, { zone: timeZoneSet }).toFormat('d MMM');\n                        displayWeek[p] = `[${dateString}](#course-day-${data.days[weekDates[n][m]].courseDay})`;\n                    } else {\n                        // if title of the day does not exist, it means it's a public holiday\n                        console.log('public holiday', data.days[weekDates[n][m]].dateTypes.holidayType);\n                        displayWeek[p] = `${data.days[weekDates[n][m]].dateTypes.holidayType} (${data.days[weekDates[n][m]].dateTypes.location})`;\n                    }\n                }\n            }\n        }\n        tableRows.push(displayWeek);\n    }\n}\n\n// helper function that generates course days table marksown\nconst generateCourseDaysTable = (output) => {\n    // schedule table header \n    output += '| Week |';\n    for (let p = 0; p < daysOfWeek.length; p += 1) {\n        output += ` ${daysOfWeek[p]} |`;\n    }\n\n    output += '\\n| :---: |';\n    for (let r = 0; r < daysOfWeek.length; r += 1) {\n        output += ' :---: |';\n    }\n\n    output += '\\n';\n\n    // schedule table content\n    for (let q = 0; q < tableRows.length; q += 1) {\n        output += `| ${q} |`;\n        for (let r = 0; r < tableRows[q].length; r += 1) {\n            output += ` ${tableRows[q][r]} |`;\n        }\n        output += '\\n';\n    }\n    return output;\n}\n\n// helper function that produces the main content of the page (in markdown)\nconst generateCourseData = (output, data) => {\n    // loop that generates the main part of the page\n    for (let i = 0; i < Object.keys(data.days).length; i += 1) {\n        let localDate;\n        // course day\n        if (data.days[dates[i]].meetingDateTimeUTC) {\n            // getting the date/time from utc string, timezone is manually set\n            localDate = DateTime.fromISO(data.days[dates[i]].meetingDateTimeUTC, { zone: timeZoneSet });\n            const formattedDate = localDate.toFormat('EEE d MMM');\n            output += `# ${formattedDate}, Week ${data.days[dates[i]].courseWeek}, Course Day ${data.days[dates[i]].courseDay}{#course-day-${data.days[dates[i]].courseDay}}:`;\n            // adding title to heading\n            output += ` ${data.days[dates[i]].dateTypes.title}\\n`;\n            // getting meeting time\n            const localTime = localDate.toFormat('t');\n            output += `Meeting time: ${localTime} `;\n            const timeZone = localDate.toFormat('z');\n            // luxon does not provide abbreviated localised timezones\n            if (timeZone === 'Asia/Singapore') {\n                output += 'SGT ';\n            }\n            const timeOffset = localDate.toFormat('ZZZZ');\n            output += `(${timeOffset})\\n\\n`;\n        } else {\n            // public holiday, as public holiday has no meeting time\n            localDate = DateTime.fromFormat(data.days[dates[i]].courseDate, 'dd-MM-yyyy').toFormat('EEE, d MMM');\n            output += `# ${localDate}: `;\n            if (data.days[dates[i]].dateTypes.location === 'SG') {\n                output += `Singapore `;\n            }\n            output += `${data.days[dates[i]].dateTypes.holidayType}, ${data.days[dates[i]].dateTypes.name}`;\n        }\n\n        // generate day's course material\n        const generalDateTypes = data.days[dates[i]].dateTypes.general;\n        const projectDateTypes = data.days[dates[i]].dateTypes.projects;\n\n        if (projectDateTypes) {\n            if (projectDateTypes.projectDue.items) {\n                output += '### Project Due\\n';\n                output += `[${projectDateTypes.projectDue.items[0].name}](${projectDateTypes.projectDue.items[0].url})\\n\\n`;\n            }\n        }\n\n        if (generalDateTypes) {\n            const sectionNames = ['preclass', 'inclass', 'postclass'];\n            const sectionTypes = [generalDateTypes.preClass, generalDateTypes.inClass, generalDateTypes.postClass];\n            for (let t = 0; t < sectionNames.length; t += 1) {\n                output += generateSectionList(sectionNames[t], sectionTypes[t]);\n            }\n        };\n\n        if (projectDateTypes) {\n            if (projectDateTypes.projectStart.items) {\n                if (projectDateTypes.projectStart.items.length > 0) {\n                output += '### Project Start\\n';\n                output += `[${projectDateTypes.projectStart.items[0].name}](${projectDateTypes.projectStart.items[0].url})\\n\\n`;\n                }\n            }\n        }\n        output += '\\n\\n';\n    }\n    return output;\n}\n\nconst dayNames = {\n        1: 'Monday',\n        2: 'Tuesday',\n        3: 'Wednesday',\n        4: 'Thursday',\n        5: 'Friday',\n        6: 'Saturday',\n        7: 'Sunday'\n    }\n\n/* ###################################################\n######################################################\n################################################### */\n\nconst dates = [];\nlet dayNumbers = [];\nconst daysOfWeek = [];\nconst weekDates = [];\nlet weekCount = 0;\nlet lastWeek;\nconst tableRows = [];\n\nconst generateBasicsMarkdown = (data) => {\n  \n    // generate all arrays needed to produce markdown\n    generateCourseArrays(data);\n    \n    // initialize output\n    let output = '---\\ndescription: What and when we will learn\\n---\\n# Course Dates\\n';\n\n    // add course table to output\n    output = generateCourseDaysTable(output);\n    output += '\\n';\n\n    // add course data to output\n    output = generateCourseData(output, data);\n\n    // add further reading section to the end of page\n    output += '# Further Reading\\n### Past Projects\\n * [Drawing With Emojis](https://basics.rocketacademy.co/past-projects/drawing-with-emojis)\\n * [Guess The Word](https://basics.rocketacademy.co/past-projects/guess-the-word)';\n\n    console.log(output);\n   return output;\n}\n\nexport default generateBasicsMarkdown;\n\n","import React from \"react\";\nimport { DateTime } from \"luxon\";\n\n// helper function that generates course day header for a normal course day\nconst NormalCourseDay = ({ todaySectionHeader, day, timeZoneSet, id }) => {\n  localDate = DateTime.fromISO(day.meetingDateTimeUTC, { zone: timeZoneSet });\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  meetingTime = localDate.toFormat(\"t\");\n  timeOffset = localDate.toFormat(\"ZZZZ\");\n  timeZone = localDate.toFormat(\"z\");\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header-div\">\n          <div className=\"main-header\">\n            {!todaySectionHeader ? (\n              <h3 className=\"day-header\">\n                {formattedDate}, Week {day.courseWeek}, Course Day{\" \"}\n                {day.courseDay}\n              </h3>\n            ) : (\n              <h3 className=\"day-header\">{formattedDate}</h3>\n            )}\n          </div>\n          <p>\n            Meeting Time: {meetingTime} SGT ({timeOffset})\n          </p>\n          {day.courseDay > 0 && (\n            <p>{day.dateTypes.module}</p>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\n// helper function that generates courseday header for a holiday\nconst HolidayCourseDay = ({ day, timeZoneSet, id }) => {\n  localDate = DateTime.fromFormat(day.courseDate, \"dd-MM-yyyy\");\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  timeZone = localDate.toFormat(\"z\");\n  // depending on if the holiday is a public/company holiday,\n  // a different output will be rendered\n  if (day.dateTypes.holidayType === \"public holiday\") {\n    holiday = `Public Holiday (${day.dateTypes.name})`;\n  } else {\n    holiday = `Company Holiday (${day.dateTypes.name})`;\n  }\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header\">\n          <h2>\n            {formattedDate}: {day.dateTypes.location} {holiday}\n          </h2>\n        </div>\n      )}\n    </>\n  );\n};\n\nlet localDate;\nlet formattedDate;\nlet meetingTime;\nlet timeZone;\nlet timeOffset;\nlet holiday;\n\n// ######################################################\n// ######################################################\n\n// function that generates the header for each course day\nconst GenerateCourseDayHeader = ({ todaySectionHeader, day, coursetype }) => {\n  // this is the timezone of the area we are in\n  const timeZoneSet = \"Asia/Singapore\";\n\n  if (day.meetingDateTimeUTC) {\n    return (\n      <NormalCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n      />\n    );\n  } else {\n    return (\n      <HolidayCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n      />\n    );\n  }\n};\n\nexport default GenerateCourseDayHeader;\n","import React, { useState } from \"react\";\nimport generateDataObject from \"../../../generateCourseDates.js\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport download from \"../../../download.js\";\nimport generateBasicsMarkdown from \"../../../generateBasicsMarkdown.js\";\n\nconst DatePicker = ({ \n  setBootcampData, \n  setBatchFile\n }) => {\n    // inputs from user used to generate course data\n  const [startDate, setStartDate] = useState(\"\");\n  const [courseName, setCourseName] = useState(\"\");\n  const [courseType, setCourseType] = useState(\"\");\n  const [firstDay, setFirstDay] = useState(null);\n  const [secondDay, setSecondDay] = useState(null);\n\n  // function that generates and downloads schedule data when download button is clicked\n  const handleDownload = () => {\n    const data = generateDataObject(startDate, courseName, courseType, null, null);\n    download(data, `${data.courseName}.json`);\n  };\n\n  // function that generates and renders schedule data when button is clicked\n  const handleRender = () => {\n    const data = generateDataObject(startDate, courseName, courseType, null, null);\n    console.log('batch 4 data', data);\n    setBootcampData(JSON.parse(JSON.stringify(data.days)));\n    setBatchFile(JSON.parse(JSON.stringify(data)))\n  };\n\n  const addToGitHubRepo = () => {\n      const data = generateDataObject(startDate, courseName, courseType, null, null);\n      console.log('data', data);\n      // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n      let selBox = document.createElement('textarea');\n      selBox.style.position = 'fixed';\n      selBox.style.left = '0';\n      selBox.style.top = '0';\n      selBox.style.opacity = '0';\n      // this copies the JSON data to clipboard with original formatting\n      selBox.value = JSON.stringify(data, undefined, 2);\n      document.body.appendChild(selBox);\n      selBox.focus();\n      selBox.select();\n      document.execCommand('copy');\n      document.body.removeChild(selBox);\n\n      // opens a new window in the browser at specified address(gitbook create new page)\n      window.open('https://github.com/rocketacademy/scheduler/new/main/src/data', \"_blank\");\n  }\n\n  const generateMarkdown = () => {\n      const dayNumbers = {\n        'Monday': 1,\n        'Tuesday': 2,\n        'Wednesday': 3,\n        'Thursday': 4,\n        'Friday': 5,\n        'Saturday': 6,\n        'Sunday': 7\n      };\n\n      const lessonDays = [dayNumbers[firstDay], dayNumbers[secondDay]];\n      let data = generateDataObject(startDate, courseName, courseType, null, lessonDays);\n      data = generateBasicsMarkdown(data);\n      console.log('data', data);\n      // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n      let selBox = document.createElement('textarea');\n      selBox.style.position = 'fixed';\n      selBox.style.left = '0';\n      selBox.style.top = '0';\n      selBox.style.opacity = '0';\n      selBox.value = data;\n      document.body.appendChild(selBox);\n      selBox.focus();\n      selBox.select();\n      document.execCommand('copy');\n      document.body.removeChild(selBox);\n\n      // opens a new window in the browser at specified address(gitbook create new page)\n      window.open('https://github.com/rocketacademy/basics-docs/new/master/course-logistics', \"_blank\")\n    }\n\n  return (\n    <>\n      <div className=\"date-picker\">\n        <div>\n          <h2>Generate Schedule Data File</h2>\n        </div>\n        <div className=\"input-form-container\">\n          <Form className=\"input-form\">\n            <div className=\"input-fields\">\n            <Form.Group className=\"mb-3 input\" controlId=\"formDate\">\n              <Form.Label>Start Date</Form.Label>\n              <Form.Control\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Batch Number</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={courseName}\n                onChange={(e) => setCourseName(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Course Type</Form.Label>\n              <Form.Select\n                aria-label=\"course-type\"\n                onChange={(e) => setCourseType(e.target.value)}\n              >\n                <option>Select course type</option>\n                <option value=\"Basics\">Basics</option>\n                <option value=\"Bootcamp FT\">Bootcamp FT</option>\n                <option value=\"Bootcamp PT\">Bootcamp PT</option>\n              </Form.Select>\n            </Form.Group>\n            </div>\n            {courseType === 'Basics' && (\n              <div className=\"basics-days\">\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                  <Form.Label>1st Course Day</Form.Label>\n                  <Form.Select\n                    aria-label=\"course-day-1\"\n                    onChange={(e) => setFirstDay(e.target.value)}\n                  >\n                    <option>Select day</option>\n                    <option value=\"Monday\">Monday</option>\n                    <option value=\"Tuesday\">Tuesday</option>\n                    <option value=\"Wednesday\">Wednesday</option>\n                    <option value=\"Thursday\">Thursday</option>\n                    <option value=\"Friday\">Friday</option>\n                    <option value=\"Saturday\">Saturday</option>\n                    <option value=\"Sunday\">Sunday</option>\n                  </Form.Select>\n                </Form.Group>\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                  <Form.Label>2nd Course Day</Form.Label>\n                  <Form.Select\n                    aria-label=\"course-day-2\"\n                    onChange={(e) => setSecondDay(e.target.value)}\n                  >\n                  <option>Select day</option>\n                  <option value=\"Monday\">Monday</option>\n                  <option value=\"Tuesday\">Tuesday</option>\n                  <option value=\"Wednesday\">Wednesday</option>\n                  <option value=\"Thursday\">Thursday</option>\n                  <option value=\"Friday\">Friday</option>\n                  <option value=\"Saturday\">Saturday</option>\n                  <option value=\"Sunday\">Sunday</option>\n                  </Form.Select>\n                </Form.Group>\n              </div>\n            )}\n          </Form>\n          <div className=\"submit-button-container\">\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                handleRender();\n              }}\n            >\n              Render Schedule\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                handleDownload();\n              }}\n            >\n              Download Schedule\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                addToGitHubRepo();\n              }}\n            >\n              Add to GitHub Repo\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                generateMarkdown();\n              }}\n            >\n              Basics Markdown\n            </Button>\n          </div>\n          <br></br>\n          <div>\n            <a href=\"https://github.com/rocketacademy/scheduler\">\n              link to GitHub repo\n            </a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DatePicker;\n","import React from \"react\";\nimport GenerateDataShiftContent from \"../GenerateDataShiftContent\";\nimport ActiveCourses from \"./ActiveCourses.jsx\";\nimport DatePicker from \"./DatePicker.jsx\";\n\nconst DataShift = ({ \n  batchArray, \n  bootcampData, \n  setBootcampData, \n  setBatchFile, \n  batchFile, \n  setDaysInBatchFile, \n  setDaysInMainFile\n }) => {\n \n  return (\n    <>\n      <div className=\"datashift-container\">\n        <div className=\"all-courses-navbar\">\n          {/* this component contains links to indivudual batch schedules to be rendered and edited */}\n          <ActiveCourses\n            batchArray={batchArray}\n            setBootcampData={setBootcampData}\n            setBatchFile={setBatchFile}\n          />\n        </div>\n        <div className=\"data-shift\">\n          <div className=\"data-container\">\n            {/* this component generates a course schedule based on start date and course type from the main json data file */}\n            <DatePicker\n              bootcampData={bootcampData}\n              setBootcampData={setBootcampData}\n              setBatchFile={setBatchFile}\n            />\n            {/* this component allows the user to edit the schedule rendered */}\n            <GenerateDataShiftContent\n              batchArray={batchArray}\n              bootcampData={bootcampData}\n              setBootcampData={setBootcampData}\n              batchFile={batchFile}\n              setDaysInBatchFile={setDaysInBatchFile}\n              setDaysInMainFile={setDaysInMainFile}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DataShift;\n","import React, { useState, useEffect } from \"react\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport DataShift from \"./data-shift/DataShift\";\nimport mainDataFile from \"../../data/bootcamp-course-days.json\";\nimport GenerateDataShiftContent from \"./GenerateDataShiftContent\";\n\nconst TabsContainer = ({ batchArray }) => {\n  const [key, setKey] = useState(\"datePicker\");\n\n  // remains empty until user picks/ generates schedule to edit. this is the days section of the batch data file\n  const [batchDays, setBatchDays] = useState({});\n  // this is the whole data file\n  const [batchFile, setBatchFile] = useState({});\n\n  // this is the main bootcamp data json file that has not been mapped onto any dates\n  const [mainFile, setMainFile] = useState(\n    JSON.parse(JSON.stringify(mainDataFile))\n  );\n  // this is the course days section of the bootcamp data json file  \n  const [mainDays, setMainDays] = useState(\n    JSON.parse(JSON.stringify(mainDataFile.days))\n  );\n  // helper function for setting state (mainFile)\n  const setDaysInMainFile = (mainDays) => {\n    setMainFile({...mainFile, days: mainDays})\n  }\n\n  // helper function for setting state (batchFile)\n  const setDaysInBatchFile = (batchDays) => {\n    setBatchFile({...batchFile, days: batchDays})\n  }\n\n  return (\n    <div className=\"container\">\n    <Tabs\n      id=\"controlled-tab-example\"\n      activeKey={key}\n      onSelect={(k) => setKey(k)}\n      className=\"\"\n    >\n      {/* this tab contains the component for editing the main data file */}\n      <Tab eventKey=\"datePicker\" title=\"Main\">\n        <GenerateDataShiftContent\n          bootcampData={mainDays}\n          setBootcampData={setMainDays}\n          mainFile={mainFile}\n          setMainFile={setMainFile}\n          setDaysInBatchFile={setDaysInBatchFile}\n          setDaysInMainFile={setDaysInMainFile}\n          batchArray={batchArray}\n        />\n      </Tab>\n      {/* this tab contains the component for generating/ editing individual batch schedules */}\n      <Tab eventKey=\"dataShift\" title=\"Batch\">\n        <DataShift\n          batchArray={batchArray}\n          bootcampData={batchDays}\n          setBootcampData={setBatchDays}\n          setBatchFile={setBatchFile}\n          batchFile={batchFile}\n          setDaysInBatchFile={setDaysInBatchFile}\n          setDaysInMainFile={setDaysInMainFile}\n        />\n      </Tab>\n    </Tabs>\n    </div>\n  );\n};\n\nexport default TabsContainer;\n","export default __webpack_public_path__ + \"static/media/4-MILK.46ae71aa.png\";","import React from \"react\";\n\n// displays items in a section's classes\nfunction DisplaySection({ heading, sectionType, day }) {\n  return (\n    <div>\n      <h6 className=\"class-header\">{heading}</h6>\n      <ul>\n        {sectionType.map((item, index) => {\n          let id;\n          // id used for scrollTo function of sidebar modules\n          if (heading === \"Pre Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpc-${index}`;\n          } else if (heading === \"In Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gic-${index}`;\n          } else {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpostc-${index}`;\n          }\n\n          return (\n            <>\n              {item.url && (\n                <li id={id}>\n                  <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">{item.name}</a>\n                </li>\n              )}\n              {!item.url && <li>{item.name}</li>}\n            </>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default DisplaySection;\n","import React from \"react\";\nimport DisplaySection from \"./DisplaySection\";\n\n// if sections project due/ project start/ ip due exist in a course day,\n// this function will generate a header and content for these sections\nconst GenerateNotifications = ({\n  status,\n  projectdue,\n  ipdue,\n  projectstart,\n  day,\n}) => {\n  let heading;\n\n  // generates header for the section\n  if (status) {\n    if (status.items) {\n      if (status === projectdue) {\n        heading = \"Project Due\";\n      } else if (status === projectstart) {\n        heading = \"Project Start\";\n      } else if (status === ipdue) {\n        heading = \"Inteview Prep due\";\n      }\n    }\n  }\n\n  return (\n    <>\n      {status && status.items && (\n        status.items.map((item) => {\n          return (\n            <li>\n              <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"notification-item\"><h6>{item.name}</h6></a>\n            </li>\n          )\n        })\n        // <div className=\"notifications\">\n        //   <DisplaySection\n        //     heading={heading}\n        //     sectionType={status.items}\n        //     day={day}\n        //   />\n        // </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateNotifications;\n","const generateSectionArray = (datetype, classType, sectionArray) => {\n    Object.keys(datetype).forEach((section) => {\n        let classTypeSection;\n    // classTypeSection is determined by what classType is\n        if (classType === 'preClass') {\n            classTypeSection = datetype[section].preClass;\n        } else if (classType === 'inClass') {\n            classTypeSection = datetype[section].inClass;\n        } else {\n            classTypeSection = datetype[section].postClass;\n        } \n\n        if (classTypeSection) {\n            // if there are items in classTypeSection, the items are pushed into sectionArray\n            if (classTypeSection.items) {\n                for (let x = 0; x < classTypeSection.items.length; x += 1) {\n                    sectionArray.push(classTypeSection.items[x]);\n                }\n            }\n        }\n    })\n    return sectionArray;\n}\n\nexport default generateSectionArray;","import React from 'react';\nimport DisplaySection from './DisplaySection';\nimport generateSectionArray from '../../generateSectionArray';\n\n\nfunction GenerateDatetypeSections ({ \n                                datetype, \n                                classType, \n                                day \n                                }) { \n    // stores items that are in a particular section of a datetype\n    const sectionArray = [];\n\n    generateSectionArray(datetype, classType, sectionArray);\n\n    // sets the heading depending on the classtype\n    let heading;\n    if (sectionArray.length > 0) {\n           // a header will be created \n        if (classType === 'preClass') {\n            heading ='Pre Class';\n        } else if (classType === 'inClass') {\n            heading = 'In Class';\n        } else {\n            heading = 'Post Class';\n        }\n    }\n\n    return (\n        <div>\n            <DisplaySection \n                        heading={heading} \n                        sectionType={sectionArray} \n                        day={day}\n                        />\n        </div>\n    )\n}\n\nexport default GenerateDatetypeSections\n","import React from \"react\";\nimport GenerateNotifications from \"./GenerateNotifications\";\nimport GenerateDatetypeSections from \"./GenerateDatetypeSections\";\n\n// generates the content and section headings for each course day\nconst GenerateCourseDayContent = ({ day }) => {\n  const projectdue = day.dateTypes.projects.projectDue;\n  const projectstart = day.dateTypes.projects.projectStart;\n  const ipdue = day.dateTypes.ip.ipDue;\n\n  return (\n    <>\n      {/* project due notification  */}\n      <GenerateNotifications\n        status={projectdue}\n        ipdue={ipdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      {/* career prep due notification  */}\n      <GenerateNotifications\n        status={ipdue}\n        ipdue={ipdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      {/* preclass section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"preClass\"\n        day={day}\n      />\n      {/* in class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"inClass\"\n        day={day}\n      />\n      {/* post class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"postClass\"\n        day={day}\n      />\n      {/* project start notification  */}\n      <GenerateNotifications\n        status={projectstart}\n        ipdue={ipdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n    </>\n  );\n};\n\nexport default GenerateCourseDayContent;\n","import React from 'react'\n\n// renders items in a section\nfunction TableSectionContent({ sectionArray }) {\n    return (\n        <ul>\n        {sectionArray.map((item) => {\n            \n            return (\n                <>\n                {item.url && (\n                    <li>\n                        <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">{item.name}</a>\n                    </li>\n                )}\n                {!item.url && (\n                    <li>\n                        {item.name}\n                    </li>\n                )}\n                </>\n            )\n        })}\n        </ul>\n    )\n}\n\nexport default TableSectionContent\n","import React from 'react';\nimport generateSectionArray from '../../../generateSectionArray';\nimport TableSectionContent from './TableSectionContent';\n\n// renders in class/ preclass section of table\nfunction TableClass({ day, \n                      sectionClass\n                     }) {\n\n    const classArray = [];\n    const datetype = day.dateTypes;\n\n    // gets all items in a particular section\n    generateSectionArray(datetype, sectionClass, classArray);\n\n    return (\n        <td>\n            <TableSectionContent sectionArray={classArray} />\n        </td>\n    )\n}\n\nexport default TableClass\n","import React from 'react';\nimport GenerateNotifications from '../GenerateNotifications';\n\n// renders projects section of table\nfunction TableProjects({ day }) {\n    \n    const projectdue = day.dateTypes.projects.projectDue;\n    const projectstart = day.dateTypes.projects.projectStart;\n    const ipdue = day.dateTypes.ip.ipDue;\n\n    return (\n        <div className=\"table-projects\">\n            <GenerateNotifications status={projectdue} \n                               ipdue={ipdue} \n                               projectdue={projectdue} \n                               projectstart={projectstart} \n                               day={day}\n                               />\n            <GenerateNotifications status={projectstart} \n                               ipdue={ipdue} \n                               projectdue={projectdue} \n                               projectstart={projectstart} \n                               day={day}\n                               />\n        </div>\n    )\n}\n\nexport default TableProjects\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport Table from \"react-bootstrap/Table\";\nimport { DateTime } from \"luxon\";\nimport TableClass from \"./TableClass\";\nimport TableProjects from \"./TableProjects\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction ScheduleTable({ weekNumbers, tableData, coursetype, today }) {\n  return (\n    <>\n      <Accordion.Header>\n        <h5>\n          {/* header shows different info depending on date and coursetype  */}\n          {coursetype === \"ft\" &&\n            today.toFormat(\"dd-MM-yyyy\") ===\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>\n                Current Course Week:{\" \"}\n                {weekNumbers.map((num) => {\n                  return <span>{num}</span>;\n                })}\n              </>\n            )}\n          {coursetype === \"ft\" &&\n            today.toFormat(\"dd-MM-yyyy\") !==\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>\n                Next Course Week:{\" \"}\n                {weekNumbers.map((num) => {\n                  return <span>{num}</span>;\n                })}\n              </>\n            )}\n          {coursetype === \"pt\" && (\n              <>Current Month's Schedule</>\n            )}\n        </h5>\n      </Accordion.Header>\n      <Accordion.Body>\n        <Table bordered hover size=\"sm\">\n          <thead>\n            <tr>\n              <th></th>\n              <th>Projects</th>\n              <th>Pre Class</th>\n              <th>In Class</th>\n              <th>Post Class</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tableData.map((date, index) => {\n              // getting the formatted date that will be shown in the table\n              const formattedDate = DateTime.fromFormat(\n                date.courseDate,\n                \"dd-MM-yyyy\"\n              ).toFormat(\"EEE d MMM\");\n              // getting the id that links formattedDate to element in main content page\n              const id = `${coursetype}-week-${date.courseWeek}-day-${date.dayNumber}`;\n\n              return (\n                <tr\n                  className={\n                    today.toFormat(\"dd-MM-yyyy\") ===\n                      DateTime.now().toFormat(\"dd-MM-yyyy\") &&\n                    date.courseDate === today.toFormat(\"dd-MM-yyyy\")\n                      ? \"table-secondary\"\n                      : null\n                  }\n                >\n                  <td\n                    // library react-scroll used to scroll to an element with matching id on main page\n                    className=\"table-date\"\n                  >\n                    <h6\n                      onClick={() =>\n                        scroller.scrollTo(id, {\n                          smooth: true,\n                          offset: -70,\n                          duration: 100,\n                        })\n                      }\n                    >\n                      {formattedDate}\n                    </h6>\n                    <p>\n                      Week {date.courseWeek}\n                      <br></br>Course Day {date.courseDay}\n                    </p>\n                  </td>\n                  {/* getting data for projects section of table */}\n                  <td>\n                    <TableProjects day={tableData[index]} />\n                  </td>\n                  {/* getting data for preclass and inclass section of table */}\n                  <TableClass day={tableData[index]} sectionClass=\"preClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"inClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"postClass\" />\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Accordion.Body>\n    </>\n  );\n}\n\nexport default ScheduleTable;\n","// function that generates data required for rendering schedule table\nconst generateTableData = (scheduleData, coursetype, weekNumbers, tableData, setWeekNumbers, setTableData, today ) => {\n  let firstDay;\n  let moveDate;\n  let lastDay;\n  let firstDayMonth;\n  let lastDayMonth;\n  let moveDateMonth;\n  weekNumbers = [];\n  // shows current month for part time bootcamp\n  firstDayMonth = today.startOf(\"month\");\n  lastDayMonth = today.endOf(\"month\");\n\n  // shows current week for full time bootcamp\n  firstDay = today.startOf(\"week\");\n  lastDay = today.endOf(\"week\");\n\n  moveDate = firstDay;\n  const weekDatesArray = [];\n  // getting all the dates between first day and last day of week inclusive and storing them in an array\n  while (moveDate <= lastDay) {\n    weekDatesArray.push(moveDate.toFormat(\"dd-MM-yyyy\"));\n    moveDate = moveDate.plus({ days: 1 });\n  }\n\n  moveDateMonth = firstDayMonth;\n\n  const monthDatesArray = [];\n  if (coursetype === \"pt\") {\n    // getting all the dates between first day and last day of week inclusive and storing them in an array\n    while (moveDateMonth <= lastDayMonth) {\n      monthDatesArray.push(moveDateMonth.toFormat(\"dd-MM-yyyy\"));\n      moveDateMonth = moveDateMonth.plus({ days: 1 });\n    }\n  }\n\n  const currentWeekData = [];\n  const currentMonthData = [];\n\n  // getting the data (object) for each individual day of the month (used for pt schedule table)\n  if (coursetype === \"pt\") {\n    for (let i = 0; i < monthDatesArray.length; i += 1) {\n      Object.keys(scheduleData).map((day) => {\n        if (day === monthDatesArray[i]) {\n          currentMonthData.push(scheduleData[day]);\n        }\n      });\n    }\n    setTableData(currentMonthData);\n  } else {\n    // getting the data (object) for each individual day of the week\n  for (let i = 0; i < weekDatesArray.length; i += 1) {\n    Object.keys(scheduleData).map((day) => {\n      if (day === weekDatesArray[i]) {\n        currentWeekData.push(scheduleData[day]);\n      }\n    });\n  }\n    setTableData(currentWeekData);\n  }\n\n  \n  // getting the week's courseWeek that the indicator will point to\n  weekDatesArray.forEach((date) => {\n    if (\n      scheduleData[date] &&\n      !weekNumbers.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumbers.push(scheduleData[date].courseWeek);\n    }\n  });\n  setWeekNumbers(weekNumbers);\n}\n\nexport default generateTableData;","import React, { useEffect, useState } from \"react\";\nimport ScheduleTable from \"./ScheduleTable\";\nimport generateTableData from \"../../../generateTableData\";\n\nconst ContentTable = ({ scheduleData, coursetype, startDay }) => {\n  const [weekNumbers, setWeekNumbers] = useState();\n  const [tableData, setTableData] = useState();\n\n  useEffect(() => {\n    generateTableData(\n      scheduleData,\n      coursetype,\n      weekNumbers,\n      tableData,\n      setWeekNumbers,\n      setTableData,\n      startDay\n    );\n  }, [scheduleData]);\n\n  return (\n    <div className=\"schedule-table\">\n      {/* table which displays current week's/ month's content based on course type */}\n      {weekNumbers && tableData && (\n        <ScheduleTable\n          weekNumbers={weekNumbers}\n          tableData={tableData}\n          coursetype={coursetype}\n          today={startDay}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ContentTable;\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport GenerateCourseDayHeader from \"../GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"../GenerateCourseDayContent\";\nimport GenerateDatetypeSections from \"../GenerateDatetypeSections\";\nimport { DateTime } from \"luxon\";\n\n// helper function that finds previous course day\nconst findPreviousDay = (scheduleData, today, coursetype, firstDayOfCourse) => {\n  let dayBefore;\n\n  if (coursetype === \"ft\" && DateTime.now() > firstDayOfCourse) {\n    if (today.weekday === 1) {\n      dayBefore = today.plus({ days: -3 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      dayBefore = today.plus({ days: -2 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.plus({ days: -1 }).toFormat('dd-MM-yyyy');\n    }\n  } else if (coursetype === \"pt\" && DateTime.now() > firstDayOfCourse) {\n    if (today.weekday === 1) {\n      dayBefore = today\n        .plus({ weeks: -1 })\n        .set({ weekday: 6 })\n        .toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday > 1 && today.weekday <= 6) {\n      dayBefore = today.set({ weekday: 1 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    }\n  }\n\n  if (scheduleData[dayBefore] && scheduleData[dayBefore].dateTypes.holidayType) {\n    dayBefore = findPreviousDay(scheduleData, dayBefore, coursetype);\n  }\n\n  return dayBefore;\n};\n\n//helper function that finds next course day\nconst findNextDay = (scheduleData, today, coursetype, firstDayOfCourse) => {\n  let nextDay;\n\n  if (coursetype === \"ft\" && DateTime.now() >= firstDayOfCourse) {\n    if (today.weekday === 6) {\n      nextDay = today.plus({ days: 2 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      nextDay = today.plus({ days: 1}).toFormat('dd-MM-yyyy');\n    } else {\n      nextDay = today.toFormat(\"dd-MM-yyyy\");\n    }\n  } else if (coursetype === \"pt\" && DateTime.now() >= firstDayOfCourse) {\n    if (today.weekday === 1) {\n      nextDay = today.toFormat('dd-MM-yyyy');\n    } else if (today.weekday > 1 && today.weekday <= 6) {\n      nextDay = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      nextDay = today.plus({ days: 1 }).toFormat(\"dd-MM-yyyy\");\n    }\n  } else {\n    nextDay = today.toFormat('dd-MM-yyyy');\n  }\n\n  if (scheduleData[nextDay] && scheduleData[nextDay].dateTypes.holidayType) {\n    nextDay = findNextDay(scheduleData, nextDay, coursetype);\n  }\n\n  return nextDay;\n};\n// ##############################################################################\n\nfunction CurrentDaySection({ scheduleData, coursetype, today, firstDayOfCourse }) {\n  // indicates whether or not courseweek and course day is shown on the courseday header\n  const todaySectionHeader = true;\n  let previousDay = null;\n  let nextDay;\n  let previousDayId;\n  // finds previous course day, only applicable if course has already started\n  if (DateTime.now() > firstDayOfCourse) {\n    previousDay = findPreviousDay(scheduleData, today, coursetype, firstDayOfCourse);\n    if(scheduleData[previousDay]) {\n      previousDayId = `${coursetype}-week-${scheduleData[previousDay].courseWeek}-day-${scheduleData[previousDay].dayNumber}`;\n    }\n  }\n\n  // find the next day if current day is not a course day\n  nextDay = findNextDay(scheduleData, today, coursetype, firstDayOfCourse);\n\n  // creating ids for scrollTo function for top section\n  const currentDayId = `${coursetype}-week-${scheduleData[nextDay].courseWeek}-day-${scheduleData[nextDay].dayNumber}`;\n\n  return (\n    <div>\n      <div className=\"today-date\">\n        {scheduleData[nextDay] && (\n          <>\n            <div>\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[nextDay]}\n                coursetype={coursetype}\n              />\n            </div>\n            <div className=\"main-header-course-day\">\n              <h5>\n                Current Course Day:{\" \"}\n                {/* shows either today's content or next course day's content depending on if today's content exists  */}\n                {scheduleData[today.toFormat(\"dd-MM-yyyy\")] ? (\n                  <span>\n                    {scheduleData[today.toFormat(\"dd-MM-yyyy\")].courseDay}\n                  </span>\n                ) : (\n                  <span> {scheduleData[nextDay].courseDay}</span>\n                )}\n              </h5>\n            </div>\n            <div className=\"top-content-container\">\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(currentDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Current Course Day:\n                  </h5>\n                  <br></br>\n                  <GenerateCourseDayContent day={scheduleData[nextDay]} />\n                </>\n              </div>\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(previousDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Previous Course Day:\n                  </h5>\n                  <br></br>\n                  {scheduleData[previousDay] && (\n                    <GenerateDatetypeSections\n                    datetype={scheduleData[previousDay].dateTypes}\n                    classType=\"postClass\"\n                    day={scheduleData[previousDay]}\n                  />\n                  )}\n                </>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default CurrentDaySection;\n","import React from \"react\";\nimport GenerateCourseDayHeader from \"./GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"./GenerateCourseDayContent\";\nimport ContentTable from \"./schedule-table/ContentTable\";\nimport { scroller } from \"react-scroll\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport CurrentDaySection from \"./current-day/CurrentDaySection\";\nimport { DateTime } from \"luxon\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\n// generates schedule content for a particular course\nfunction ScheduleContent({ scheduleData, coursetype, title, today, firstDayOfCourse }) {\n  // used by scrollTo function to identify where to scroll to from the up arrow at the bottom of the screen\n  const id = `${coursetype}-top`;\n  const todaySectionHeader = false;\n  // let today = DateTime.now();\n\n  // // checking if first day of course is after today, if so today = first day of course, so that current day\n  // // section and tables and display first day/ weeks info\n  // const courseDatesArray = [];\n  // Object.keys(scheduleData).map((day) => {\n  //   courseDatesArray.push(day);\n  // });\n  // courseDatesArray.sort(function(a, b){return a-b});\n  // const firstDayOfCourse = DateTime.fromFormat(courseDatesArray[0], 'dd-MM-yyyy');\n\n  // if (today < firstDayOfCourse) {\n  //   today = firstDayOfCourse;\n  // }\n\n  let nextToday;\n  if (coursetype === \"ft\") {\n    nextToday = today.plus({ weeks: 1 });\n  } else {\n    nextToday = today.plus({ months: 1 });\n  }\n  \n  return (\n    <div className=\"content\">\n      {/* button that takes user back to the top of the page  */}\n      <div\n        className=\"up-arrow\"\n        onClick={() =>\n          scroller.scrollTo(id, {\n            smooth: true,\n            offset: -70,\n            duration: 100,\n          })\n        }\n      >\n        <ExpandLessIcon />\n      </div>\n      <h1 className=\"schedule-header\">{title}</h1>\n      <p id={id}></p>\n     \n      {/* generates table which shows schedule for current week/ month depending on course type */}\n      <CurrentDaySection\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        today={today}\n        firstDayOfCourse={firstDayOfCourse}\n      />\n      <div className=\"schedule-accordion-container\">\n        <Accordion className=\"current-week-accordion\" defaultActiveKey=\"0\">\n          <Accordion.Item eventKey=\"0\">\n            <ContentTable\n              scheduleData={scheduleData}\n              coursetype={coursetype}\n              startDay={today}\n            />\n          </Accordion.Item>\n        </Accordion>\n        <Accordion className=\"current-week-accordion\">\n          {coursetype === \"ft\" && (\n            <Accordion.Item eventKey=\"0\">\n              <ContentTable\n                scheduleData={scheduleData}\n                coursetype={coursetype}\n                startDay={nextToday}\n              />\n            </Accordion.Item>\n          )}\n        </Accordion>\n      </div>\n      <div className=\"schedule-list\">\n        <h1>Full Schedule</h1>\n        {/* generates individual day schedule content */}\n        {Object.keys(scheduleData).map((day) => {\n          const id = `${coursetype}-week-${scheduleData[day].courseWeek}-day-${scheduleData[day].dayNumber}`;\n\n          return (\n            <div className=\"day-class\" id={id}>\n              {/* generates schedule header for individual day */}\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[day]}\n                coursetype={coursetype}\n              />\n              {/* generates content if course day is not a holiday */}\n              {!scheduleData[day].dateTypes.holidayType && (\n                <GenerateCourseDayContent day={scheduleData[day]} />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default ScheduleContent;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { scroller } from 'react-scroll';\n\nfunction ModuleSection({ \n                    section, \n                    index, \n                    sectionNames, \n                    coursetype, \n                    scheduleData \n                }) {\n    return (\n        <>\n        {section.length > 1 && (\n        <Accordion.Item eventKey={index}>\n            <Accordion.Header>{sectionNames[index]}</Accordion.Header>\n            <Accordion.Body>\n            {section.map((info) => {\n            const id = `${coursetype}-week-${scheduleData[info.date].courseWeek}-day-${scheduleData[info.date].dayNumber}`;\n    \n                return (\n                <p onClick={() =>\n                scroller.scrollTo(id, {\n                    smooth: true,\n                    offset: -70,\n                    duration: 100,\n                })\n                }\n                >\n                {info.name}\n                </p>\n                )\n            })}\n            </Accordion.Body>\n        </Accordion.Item>\n        )}\n        </>\n    )\n}\n\nexport default ModuleSection\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Accordion from 'react-bootstrap/Accordion';\nimport ModuleSection from \"./ModuleSection\";\n\n// helper function for generating scheduleObjs array and moduleNameArray\nconst generatingDataArrays = (\n                              scheduleData, \n                              day, \n                              section, \n                              classtype, \n                              scheduleUrls, \n                              scheduleObjs, \n                              moduleNameArray\n                              ) => {\n  if (scheduleData[day].dateTypes[section][classtype].items) {\n    scheduleData[day].dateTypes[section][classtype].items.map((item) => {\n      // if the item has a url\n      if(item.url && !scheduleUrls.includes(item.url)) {\n        // push the url into scheduleUrls\n        scheduleUrls.push(item.url);\n        // push item name, url and date into scheduleObjs\n        scheduleObjs.push({name: item.name, url: item.url, date: day});\n      }\n      if (item.url) {\n        const itemUrlArray = item.url.split('/');\n        // itemUrlArray[3] is used as the heading of each module section\n        // we're filtering out everythign that does not come from the gitbook \n        if (!moduleNameArray.includes(itemUrlArray[3]) && itemUrlArray[2] === 'bootcamp.rocketacademy.co') {\n          moduleNameArray.push(itemUrlArray[3]);\n        }\n      }\n    })\n  }\n}\n\n// helper finction for accessing required items (items in each class of each section of each day)\nconst accessingRequiredItems = (\n                              scheduleData, \n                              day, \n                              scheduleUrls, \n                              scheduleObjs, \n                              moduleNameArray\n                              ) => {\n  if (scheduleData[day].dateTypes.module) {\n    Object.keys(scheduleData[day].dateTypes)\n    // filtering out module key\n    .filter(section => section !== 'module')\n    .map((section) => {\n      Object.keys(scheduleData[day].dateTypes[section])\n      // filtering out type key\n      .filter(classtype => classtype !== 'type')\n      .map((classtype) => {\n        // if there item array exists in a section, call the function that gets the required data\n        generatingDataArrays(scheduleData, \n                            day, \n                            section, \n                            classtype, \n                            scheduleUrls, \n                            scheduleObjs, \n                            moduleNameArray);\n        \n      })\n    })\n  }\n}\n\nconst sortScheduleObjs = (urlObj, moduleName, general, ice, poce) => {\n  const urlModule = urlObj.url.split('/');\n  // this is the part of the url which we used to get the moduleName\n  const urlModuleName = urlModule[3];\n  // if the module name in the url is the current moduleName\n  if (urlModuleName === moduleName) {\n    const splitName = urlObj.name.split('.');\n    const dataObj = { name: urlObj.name, date: urlObj.date }\n    // push the object into the relevant array\n    if (splitName[1] === 'ICE') {\n      ice.push(dataObj);\n    } else if (splitName[1] === 'POCE') {\n      poce.push(dataObj);\n    } else {\n      general.push(dataObj);\n    }\n  }\n}\n \n// ###################################################################\n// ###################################################################\n\nfunction Modules({ scheduleData, coursetype }) {\n  const moduleNameArray = [];\n  const scheduleUrls = [];\n  const scheduleObjs = [];\n\n  // looking through entire data file \n  Object.keys(scheduleData).map((day) => {\n    accessingRequiredItems (\n                            scheduleData, \n                            day, \n                            scheduleUrls, \n                            scheduleObjs, \n                            moduleNameArray\n                            );\n  })\n\n  moduleNameArray.sort();\n\n  return (\n    <div className=\"sidebar-modules\">\n      <h4>Modules</h4>\n      <Nav className=\"flex-column\">\n        {moduleNameArray.map((moduleName) => {\n          // creating array to store items of each section\n          const general = [];\n          const poce = [];\n          const ice = [];\n\n          // sort each object in scheduleObjs into one of 3 arrays, general, ice, poce\n          scheduleObjs.forEach((urlObj) => {\n            sortScheduleObjs(urlObj, moduleName, general, ice, poce);\n          })\n\n          const sectionArray = [];\n          sectionArray.push(general);\n          sectionArray.push(ice);\n          sectionArray.push(poce);\n\n          // names of each section \n          const sectionNames = ['General', 'In Class', 'Post Class'];\n\n          return (\n            <>\n            <h6 className=\"sidebar-subheading\">{moduleName}</h6>\n            <Accordion className=\"modules-accordion\">\n            {sectionArray.map((section, index) => {\n              return (\n              <ModuleSection\n                        section={section} \n                        index={index} \n                        sectionNames={sectionNames} \n                        coursetype={coursetype} \n                        scheduleData={scheduleData} \n                        />\n              )\n            })}\n            </Accordion>\n            </>\n            )\n          }\n        )}\n      </Nav>\n    </div>\n  );\n}\n\nexport default Modules;\n\n\n","import React, { useEffect, useRef } from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { scroller } from \"react-scroll\";\nimport { DateTime } from \"luxon\";\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\nimport Modules from './Modules';\n\n// one of the components in Sidebar\nfunction CourseWeeks({ scheduleData, coursetype, firstDayOfCourse }) {\n  const weeks = [];\n  // used to scroll to current week on page load \n  const executeScroll = () => currentWeekRef.current.scrollIntoView({ block: \"center\" });\n\n  useEffect(() => {\n    if (DateTime.now() > firstDayOfCourse) {\n      executeScroll();\n    }\n  }, []);\n\n  const CurrentWeekDiv = () => {\n    return (\n      <>\n        <div ref={currentWeekRef}></div>\n      </>\n    );\n  };\n\n  // getting all the week numbers\n  Object.keys(scheduleData).forEach((day) => {\n    if (!weeks.includes(scheduleData[day].courseWeek)) {\n      weeks.push(scheduleData[day].courseWeek);\n    }\n  });\n\n  // getting first and last days of week\n  const firstDayOfWeek = DateTime.now().startOf(\"week\");\n  const lastDayOfWeek = DateTime.now().endOf(\"week\");\n  let target = firstDayOfWeek;\n  // array where all course dates in current week will be stored\n  const weeksDates = [];\n\n  // storing week's dates in the array\n  while (target <= lastDayOfWeek) {\n    weeksDates.push(target.toFormat(\"dd-MM-yyyy\"));\n    target = target.plus({ days: 1 });\n  }\n\n  // getting the week's courseWeek that the indicator will point to\n  const weekNumber = [];\n  const currentWeekRef = useRef(null);\n\n  weeksDates.forEach((date) => {\n    if (\n      scheduleData[date] &&\n      !weekNumber.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumber.push(scheduleData[date].courseWeek);\n    }\n  });\n\n  return (\n    <div className=\"sidebar-courseweeks\">\n      <h4>Course Weeks</h4>\n      <Nav\n        variant=\"pills\"\n        defaultActiveKey=\"0\"\n        className=\"flex-column\"\n        navbarScroll=\"true\"\n      >\n        <Nav.Item>\n          <Nav.Link\n            eventKey=\"0\"\n            // uses react-scroll library for scroll function\n            onClick={() =>\n              scroller.scrollTo(`${coursetype}-top`, {\n                smooth: true,\n                offset: -70,\n                duration: 100,\n              })\n            }\n          >\n            Current Day\n          </Nav.Link>\n        </Nav.Item>\n        {weeks.map((week, index) => {\n          // generating id that is linked to id of an element in main content of page\n          // on click, page will scroll to where the element is\n          const navId = `${index + 1}`;\n          const id = `${coursetype}-week-${week}-day-1`;\n          const sidebarId = `${coursetype}-sidebar-week-${week}`;\n          console.log('week', week);\n          console.log('week number', weekNumber);\n          return (\n            <Nav.Item>\n              <Nav.Link\n                eventKey={navId}\n                // uses react-scroll library for scroll function\n                onClick={() =>\n                  scroller.scrollTo(id, {\n                    smooth: true,\n                    offset: -70,\n                    duration: 100,\n                  })\n                }\n              >\n                {week === weekNumber[0] && DateTime.now() > firstDayOfCourse && <CurrentWeekDiv />}\n                <div>\n                  {week === null ? \"Break\" : `Week ${week}`}\n                  {/* week indicator that indicates that a certain week is the current week  */}\n                  {weeks[index] === weekNumber[0] && (\n                    <span id={sidebarId} className=\"current-wk-indicator\">\n                      <KeyboardBackspaceIcon />\n                      {\"  \"}\n                      this week\n                    </span>\n                  )}\n                </div>\n              </Nav.Link>\n            </Nav.Item>\n          );\n        })}\n      </Nav>\n      <Modules scheduleData={scheduleData} coursetype={coursetype} />\n    </div>\n  );\n}\n\nexport default CourseWeeks;\n","import React from \"react\";\nimport CourseWeeks from \"./CourseWeeks\";\n\n// side navbar , displays a list of course weeks\nfunction SideBar({ scheduleData, coursetype, firstDayOfCourse }) {\n  return (\n    <div className=\"sidebar\">\n      <CourseWeeks \n        scheduleData={scheduleData} \n        coursetype={coursetype} \n        firstDayOfCourse={firstDayOfCourse}  />\n    </div>\n  );\n}\n\nexport default SideBar;\n","import React from \"react\";\nimport ScheduleContent from \"./ScheduleContent\";\nimport SideBar from \"./sidebar/SideBar\";\nimport { DateTime } from 'luxon';\n\nfunction BatchSchedule({ data, title }) {\n  const scheduleData = JSON.parse(JSON.stringify(data.days));\n\n  // needed to generate id for use with react-scroll library, also indicates if course is full time/ part time\n  let coursetype;\n  if (data.courseType === \"Bootcamp PT\") {\n    coursetype = \"pt\";\n  } else {\n    coursetype = \"ft\";\n  }\n\n  let today = DateTime.now();\n\n  // checking if first day of course is after today, if so today = first day of course, so that current day\n  // section and tables and display first day/ weeks info\n  const courseDatesArray = [];\n  Object.keys(scheduleData).map((day) => {\n    courseDatesArray.push(day);\n  });\n  courseDatesArray.sort(function(a, b){return a-b});\n  const firstDayOfCourse = DateTime.fromFormat(courseDatesArray[0], 'dd-MM-yyyy');\n\n  if (today < firstDayOfCourse) {\n    today = firstDayOfCourse;\n  }\n\n  return (\n    <div className=\"course-schedule\">\n      {/* contains links to main part of schedule page */}\n\n      <SideBar \n        scheduleData={scheduleData} \n        coursetype={coursetype}  \n        firstDayOfCourse={firstDayOfCourse} \n        />\n      {/* contains current schedule table and main content of page */}\n      <ScheduleContent\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        title={title}\n        today={today}\n        firstDayOfCourse={firstDayOfCourse}\n      />\n    </div>\n  );\n}\n\nexport default BatchSchedule;\n","import React from \"react\";\nimport { Route, Switch, Link, useRouteMatch, Redirect } from \"react-router-dom\";\nimport logo from \"../../assets/4-MILK.png\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport BatchSchedule from \"./BatchSchedule\";\n\nfunction ScheduleContainer({ batchArray }) {\n  let { path, url } = useRouteMatch();\n \n  // pass individual batch json files into BatchSchedule to generate schedules\n  return (\n    <>\n      <Navbar variant=\"dark\" bg=\"secondary\">\n        <Navbar.Brand href=\"#home\">\n          <img src={logo} alt=\"company logo\"></img>\n        </Navbar.Brand>\n        <Nav className=\"me-auto\">\n          {batchArray.map((batch) => {\n            return (\n              <>\n              <Nav.Link as={Link} to={`${url}/${batch.name}`}>\n                {batch.name.toUpperCase()}\n              </Nav.Link>\n              </>\n            );\n          })}\n        </Nav>\n      </Navbar>\n      <Switch>\n        <Route exact path={path}>\n          <Redirect to={`${path}/${batchArray[0].name}`} />\n        </Route>\n        {batchArray.map((batch) => {\n          return (\n            <Route path={`${path}/${batch.name}`}>\n              <BatchSchedule\n                data={batch.content}\n                title={batch.name.toUpperCase()}\n              />\n            </Route>\n          );\n        })}\n      </Switch>\n    </>\n  );\n}\n\nexport default ScheduleContainer;\n","import React from 'react';\nimport TabsContainer from './components/admin/Tabs';\nimport ptbc1 from '../src/data/16-08-2021_15-10-2022_BATCH1.json';\nimport ftbc4 from '../src/data/09-07-2021_24-12-2021_BATCH4.json';\nimport ptbc2 from '../src/data/15-11-2021_21-01-2023_BATCH2.json';\nimport ftbc5 from '../src/data/04-10-2021_25-03-2022_BATCH5.json';\n\nimport {\n  HashRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport ScheduleContainer from './components/schedules/ScheduleContainer';\n\nfunction App() {\n\n  // put all batch data files in an array to be passed into separate components for /shedule and /admin\n  const batchArray = [{name:\"ptbc1\", content: ptbc1}, {name:\"ptbc2\", content: ptbc2}, {name: \"ftbc4\", content: ftbc4}, {name:\"ftbc5\", content: ftbc5}];\n\n  return (\n    <div className=\"App\">\n        <HashRouter>\n          <Switch>\n            {/* route that takes user to part of app that edits course schedules */}\n            <Route path=\"/admin\">\n              <TabsContainer batchArray={batchArray} />\n            </Route>\n            {/* route that takes user to part of app that displays batch schedules for student use */}\n            <Route path=\"/schedules\">\n              <ScheduleContainer batchArray={batchArray} />\n            </Route>\n          </Switch>\n        </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}