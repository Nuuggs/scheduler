{"version":3,"sources":["components/AddItemModal.jsx","components/ShiftItemModal.jsx","components/ClassItem.jsx","components/SectionClass.jsx","components/Section.jsx","components/MainAccordion.jsx","download.js","components/GenerateDataShiftContent.jsx","components/ActiveCourses.jsx","generateCourseDates.js","components/GenerateCourseDayHeader.jsx","components/DatePicker.jsx","components/DataShift.jsx","components/Tabs.jsx","components/DisplaySection.jsx","components/GenerateNotifications.jsx","generateSectionArray.js","components/GenerateDatetypeSections.jsx","components/GenerateCourseDayContent.jsx","components/TableSectionContent.jsx","components/TableClass.jsx","components/TableProjects.jsx","components/CurrentContentTable.jsx","components/ScheduleContent.jsx","components/CourseWeeks.jsx","components/SideBar.jsx","components/BatchSchedule.jsx","components/ScheduleContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddItemModal","show","onHide","bootcampdatacopy","setbootcampdatacopy","coursedate","useState","title","setTitle","url","setUrl","section","setSection","sectionClass","setSectionClass","Modal","size","centered","Header","closeButton","Title","id","Body","Form","Group","className","controlId","Label","Control","type","placeholder","value","onChange","e","target","Select","Button","variant","onClick","preventDefault","newItem","name","dateTypes","items","push","handleAddItem","Footer","ShiftItemModal","heading","shiftitem","sectiontype","classtype","classindex","selectedDate","setSelectedDate","direction","dates","map","date","courseDay","selectedItem","splice","length","targetDay","constructor","Array","handleSubmitDate","addDates","datesArray","includes","addIndex","bootcampDataCopy","indexOf","ClassItem","setBootcampDataCopy","classType","sectionType","item","dayIndex","classIndex","buttonsVisible","setButtonsVisible","modalShow","setModalShow","shiftItem","setShiftItem","handleShift","Object","keys","filter","onMouseEnter","onMouseLeave","SectionClass","day","sectionclass","sectionIndex","classButtonsVisible","setClassButtonsVisible","shiftSection","sectionArray","startDay","forEach","element","index","console","log","handleClassShift","i","selectedSection","Section","classExists","preClass","inClass","postClass","projectDue","projectStart","cpDue","Accordion","Item","eventKey","MainAccordion","setShowInputModal","setCourseDate","module","handlePlusClick","courseWeek","download","data","filename","dataStr","encodeURIComponent","JSON","stringify","dlAnchorElem","document","createElement","setAttribute","click","GenerateDataShiftContent","showInputModal","courseDate","courseName","ActiveCourses","batchArray","Nav","batch","Link","parse","content","days","publicHolidays","holidayData","PH","publicHolidayArray","key","companyHolidays","company","companyHolidayArray","winterBreak","phWithoutCh","holiday","localDate","formattedDate","meetingTime","timeZone","timeOffset","getLocalDateTime","utc","timeString","courseType","changedFormat","toFormat","DateTime","fromISO","zone","toUTC","toISO","Number","weekday","generateHolidayObject","dateString","week","dateObj","dayNumber","generateCourseDayObject","weekDay","meetingDateTimeUTC","basicsData","bootcampData","generateDataObject","startDate","fromFormat","courseDayCount","dateWeek","classDatesCount","dayArray","topLevelObject","daysOfWeek","courseStartIndex","totalCourseDays","bootcampDays","fullTime","partTime","generateTopLevelObject","displayDate","displayName","plus","weeks","set","DatePicker","setStartDate","setCourseName","setCourseType","handleDownload","a","handleRender","href","DataShift","TabsContainer","setKey","batchDataCopy","setBatchDataCopy","mainDataFile","mainDataCopy","setMainDataCopy","Tabs","activeKey","onSelect","k","Tab","NormalCourseDay","todaySectionHeader","timeZoneSet","scroller","scrollTo","smooth","offset","duration","HolidayCourseDay","holidayType","location","GenerateCourseDayHeader","coursetype","DisplaySection","GenerateNotifications","status","projectdue","cpdue","projectstart","generateSectionArray","datetype","classTypeSection","x","GenerateDatetypeSections","GenerateCourseDayContent","projects","cp","TableSectionContent","TableClass","classArray","TableProjects","findPreviousDay","scheduleData","today","dayBefore","findNextDay","nextDay","CurrentContentTable","firstDay","moveDate","lastDay","previousDay","now","startOf","endOf","weekDatesArray","todayFormatted","todayId","currentWeekData","Table","striped","bordered","hover","ScheduleContent","CourseWeeks","firstDayOfWeek","lastDayOfWeek","weeksDates","weekNumber","defaultActiveKey","navbarScroll","navId","SideBar","BatchSchedule","ScheduleContainer","useRouteMatch","path","to","exact","toUpperCase","App","ptbc1","ftbc3","ftbc4","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ece5abc3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nfunction AddItemModal({\n  show,\n  onHide,\n  bootcampdatacopy,\n  setbootcampdatacopy,\n  coursedate,\n}) {\n  // input fields for a entry of a new item into the main data file\n  const [title, setTitle] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [section, setSection] = useState(\"\");\n  const [sectionClass, setSectionClass] = useState(\"\");\n\n  // function that adds new item to main data file\n  const handleAddItem = (e) => {\n    e.preventDefault();\n\n    // new item that will be added to main data file\n    const newItem = {\n      name: title,\n      url: url,\n    };\n\n    // if the section that the new item is to be added to is empty, an empty array called items is added to it\n    if (!bootcampdatacopy[coursedate].dateTypes[section][sectionClass].items) {\n      bootcampdatacopy[coursedate].dateTypes[section][sectionClass].items = [];\n    }\n\n    // the new item is then pushed into items array\n    bootcampdatacopy[coursedate].dateTypes[section][sectionClass].items.push(\n      newItem\n    );\n\n    // the new content is saved in state\n    setbootcampdatacopy({ ...bootcampdatacopy });\n  };\n\n  return (\n    // modal that takes in user input for the creation of a new item\n    <Modal\n      show={show}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"add-input-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"add-input-modal\">Add an item</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Group className=\"mb-3\" controlId=\"title\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\" controlId=\"url\">\n            <Form.Label>URL</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter URL\"\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Label>Section</Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSection(e.target.value)}\n          >\n            <option>choose section</option>\n            <option value=\"general\">general</option>\n            <option value=\"css\">css</option>\n            <option value=\"ux\">ux</option>\n            <option value=\"projects\">projects</option>\n            <option value=\"cp\">cp</option>\n            <option value=\"dsa\">dsa</option>\n          </Form.Select>\n\n          <Form.Label>Class </Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSectionClass(e.target.value)}\n          >\n            <option>choose class type</option>\n            <option value=\"preClass\">preClass</option>\n            <option value=\"postClass\">postClass</option>\n            <option value=\"inClass\">inClass</option>\n            {section === \"projects\" && (\n              <>\n                <option value=\"projectDue\">projectDue</option>\n                <option value=\"projectStart\">projectStart</option>\n              </>\n            )}\n            {section === \"cp\" && <option value=\"cpDue\">cpDue</option>}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleAddItem(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default AddItemModal;\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\n// moves items to a specific date in the schedule\nfunction ShiftItemModal({\n  show,\n  onHide,\n  shiftitem,\n  bootcampdatacopy,\n  setbootcampdatacopy,\n  sectiontype,\n  classtype,\n  classindex,\n  section,\n}) {\n  const [selectedDate, setSelectedDate] = useState(\"\");\n\n  let heading;\n  if (shiftitem.direction === \"up\") {\n    heading = \"Moving back ... \";\n  } else {\n    heading = \"Moving forward ... \";\n  }\n\n  const handleSubmitDate = (e) => {\n    e.preventDefault();\n    // finding the selected item in the data file\n    let selectedItem = sectiontype[classtype].items[classindex];\n    // removing it from it's original position\n    sectiontype[classtype].items.splice(classindex, 1);\n\n    // if items array is empty after removing selected item, remove empty items array\n    if (sectiontype[classtype].items.length === 0) {\n      delete sectiontype[classtype].items;\n    }\n    // this is where we want to move the item to\n    const targetDay = bootcampdatacopy[selectedDate].dateTypes[section];\n\n    // checking to see if items array exists at destination, if not, an empty array called items is added\n    if (!targetDay[classtype].items) {\n      targetDay[classtype].items = [];\n    }\n\n    // selected item is push into items array at destination\n    targetDay[classtype].items.push(selectedItem);\n\n    // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n    bootcampdatacopy.constructor === Array\n      ? setbootcampdatacopy([...bootcampdatacopy])\n      : setbootcampdatacopy({ ...bootcampdatacopy });\n  };\n\n  return (\n    <Modal\n      show={show}\n      shiftitem={shiftitem}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"item-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"item-modal\">{heading}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"days\"\n            onChange={(e) => setSelectedDate(e.target.value)}\n          >\n            <option>--</option>\n            {shiftitem.dates.map((date) => {\n              if (typeof date === \"number\") {\n                return (\n                  <>\n                    <option value={date}>\n                      Day {bootcampdatacopy[date].courseDay}\n                    </option>\n                    ;\n                  </>\n                );\n              } else {\n                return (\n                  <>\n                    <option value={date}>{date}</option>;\n                  </>\n                );\n              }\n            })}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleSubmitDate(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default ShiftItemModal;\n","import React, { useState } from \"react\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport ShiftItemModal from \"./ShiftItemModal\";\n\n// helper functions that populates dateArray\n// ##########################################################\nconst addDates = (datesArray, date) => {\n  if (!datesArray.includes(date)) {\n    datesArray.push(date);\n  }\n  return datesArray;\n};\n\nconst addIndex = (bootcampDataCopy, datesArray, date) => {\n  if (!datesArray.includes(bootcampDataCopy.indexOf(date))) {\n    datesArray.push(bootcampDataCopy.indexOf(date));\n  }\n  return datesArray;\n};\n// ############################################################\n\nfunction ClassItem({\n  setBootcampDataCopy,\n  section,\n  bootcampDataCopy,\n  classType,\n  sectionType,\n  item,\n  dayIndex,\n  classIndex,\n}) {\n  // toggle visibility of buttons\n  const [buttonsVisible, setButtonsVisible] = useState(false);\n  const [modalShow, setModalShow] = useState(false);\n  // object shift item is initialised with keys direction and dates to store data that will be passed into the nect component\n  const [shiftItem, setShiftItem] = useState({\n    direction: null,\n    dates: [],\n  });\n\n  // function that handles moving data from one day to another\n  const handleShift = (direction, dayIndex, classIndex) => {\n    // array that contains all the dates either before or after a selected date depending on direction chosen by user\n    let datesArray = [];\n\n    // item is being moved backwards in the schedule\n    if (direction === \"up\") {\n      // if bootcampDataCopy either an object or an array depending on wether the user is editing the main or individual schedule files, and needs to be processed accordingly\n      bootcampDataCopy.constructor === Object\n        ? Object.keys(bootcampDataCopy)\n            .filter(\n              (date) =>\n                bootcampDataCopy[date].courseDay < dayIndex + 1 &&\n                bootcampDataCopy[date].courseDay !== null\n            )\n            .map((date) => {\n              datesArray = addDates(datesArray, date);\n            })\n        : bootcampDataCopy\n            .filter((date) => bootcampDataCopy.indexOf(date) < dayIndex)\n            .map((date) => {\n              datesArray = addIndex(bootcampDataCopy, datesArray, date);\n            });\n\n      // data is put into object shift item\n      setShiftItem({\n        ...shiftItem,\n        direction: \"up\",\n        dates: datesArray,\n      });\n      // modal that takes user input to move item is shown\n      setModalShow(true);\n      // item is being moved forward in the schedule\n    } else if (direction === \"down\") {\n      bootcampDataCopy.constructor === Object\n        ? Object.keys(bootcampDataCopy)\n            .filter(\n              (date) =>\n                bootcampDataCopy[date].courseDay > dayIndex + 1 &&\n                bootcampDataCopy[date].courseDay !== null\n            )\n            .map((date) => {\n              datesArray = addDates(datesArray, date);\n            })\n        : bootcampDataCopy\n            .filter((date) => bootcampDataCopy.indexOf(date) > dayIndex)\n            .map((date) => {\n              datesArray = addIndex(bootcampDataCopy, datesArray, date);\n            });\n\n      setShiftItem({\n        ...shiftItem,\n        direction: \"down\",\n        dates: datesArray,\n      });\n\n      setModalShow(true);\n    } else {\n      // here the item is being removed from the schedule altogether\n      sectionType[classType].items.splice(classIndex, 1);\n      setBootcampDataCopy({ ...bootcampDataCopy });\n    }\n  };\n\n  return (\n    <div>\n      <div\n        className=\"class-item\"\n        onMouseEnter={() => setButtonsVisible(true)}\n        onMouseLeave={() => setButtonsVisible(false)}\n      >\n        {item.name}\n        {buttonsVisible && (\n          <div>\n            {/* remove item  */}\n            <button onClick={() => handleShift(\"delete\", dayIndex, classIndex)}>\n              <RemoveIcon />\n            </button>\n            {/* move item backwards in the schedule  */}\n            <button onClick={() => handleShift(\"up\", dayIndex, classIndex)}>\n              <ExpandLessIcon />\n            </button>\n            {/* move item forward in the schedule  */}\n            <button onClick={() => handleShift(\"down\", dayIndex, classIndex)}>\n              <ExpandMoreIcon />\n            </button>\n          </div>\n        )}\n        {modalShow && (\n          // modal that is shown when the user clicks either of the above buttons\n          <ShiftItemModal\n            show={modalShow}\n            onHide={() => setModalShow(false)}\n            shiftitem={shiftItem}\n            bootcampdatacopy={bootcampDataCopy}\n            setbootcampdatacopy={setBootcampDataCopy}\n            sectiontype={sectionType}\n            classtype={classType}\n            classindex={classIndex}\n            section={section}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ClassItem;\n","import React, { useState } from \"react\";\nimport ClassItem from \"./ClassItem\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nfunction SectionClass({\n  day,\n  sectionIndex,\n  sectionclass,\n  sectionType,\n  bootcampDataCopy,\n  setBootcampDataCopy,\n  section,\n  dayIndex,\n}) {\n  const [classButtonsVisible, setClassButtonsVisible] = useState(false);\n\n  const [showInputModal, setShowInputModal] = useState(false);\n  // helper function that maps each element in section array to a new course day\n  const shiftSection = (sectionArray, startDay, bootcampDataCopy) => {\n    sectionArray.forEach((element, index) => {\n      console.log(\"day index\", dayIndex);\n      if (element !== null) {\n        if (\n          bootcampDataCopy[startDay + index].dateTypes[section][sectionclass]\n            .items\n        ) {\n          sectionArray[index].forEach((item) => {\n            bootcampDataCopy[startDay + index].dateTypes[section][\n              sectionclass\n            ].items.push(item);\n          });\n        } else {\n          bootcampDataCopy[startDay + index].dateTypes[section][\n            sectionclass\n          ].items = sectionArray[index];\n        }\n      }\n    });\n    return bootcampDataCopy;\n  };\n\n  const handleClassShift = (direction, dayIndex) => {\n    // puts all the items in selected class in an array and deletes them from their original position\n    const sectionArray = [];\n    for (let i = dayIndex; i < bootcampDataCopy.length - 1; i += 1) {\n      if (bootcampDataCopy[i].dateTypes[section][sectionclass].items) {\n        const selectedSection =\n          bootcampDataCopy[i].dateTypes[section][sectionclass].items;\n        sectionArray.push(selectedSection);\n        delete bootcampDataCopy[i].dateTypes[section][sectionclass].items;\n      } else {\n        sectionArray.push(null);\n      }\n    }\n\n    let startDay;\n    // when user clicks the down button, items are put into section/class of the next day\n    if (direction === \"down\") {\n      startDay = dayIndex + 1;\n      bootcampDataCopy = shiftSection(sectionArray, startDay, bootcampDataCopy);\n    } else {\n      // when user clicks the up button, items are put into section/class of the previous day\n      startDay = dayIndex - 1;\n      bootcampDataCopy = shiftSection(sectionArray, startDay, bootcampDataCopy);\n    }\n\n    console.log(\"boot camp data copy\", bootcampDataCopy);\n    setBootcampDataCopy([...bootcampDataCopy]);\n  };\n\n  return (\n    <div>\n      {sectionType[sectionclass].items && (\n        <div className=\"section-class\">\n          <div className=\"class-title\">{sectionclass}</div>\n          <div className=\"class-items\">\n            {sectionType[sectionclass].items.map((item, classIndex) => {\n              const id = `day-${dayIndex}-section-${section}-class-${sectionclass}-${classIndex}`;\n              return (\n                <ClassItem\n                  day={day}\n                  sectionclass={sectionclass}\n                  bootcampDataCopy={bootcampDataCopy}\n                  setBootcampDataCopy={setBootcampDataCopy}\n                  section={section}\n                  classType={sectionclass}\n                  sectionType={sectionType}\n                  item={item}\n                  dayIndex={dayIndex}\n                  classIndex={classIndex}\n                />\n              );\n            })}\n          </div>\n          <div\n            className=\"section-class-header\"\n            onMouseEnter={() => setClassButtonsVisible(true)}\n            onMouseLeave={() => setClassButtonsVisible(false)}\n          >\n            {classButtonsVisible && (\n              <div>\n                <button\n                  onClick={() => handleClassShift(\"up\", dayIndex, sectionIndex)}\n                >\n                  <ExpandLessIcon />\n                </button>\n                <button\n                  onClick={() =>\n                    handleClassShift(\"down\", dayIndex, sectionIndex)\n                  }\n                >\n                  <ExpandMoreIcon />\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SectionClass;\n","import React from \"react\";\nimport SectionClass from \"./SectionClass\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction Section({\n  day,\n  setBootcampDataCopy,\n  section,\n  sectionType,\n  dayIndex,\n  bootcampDataCopy,\n}) {\n  // variable classExists is created to track if any class of a section exists (it is initially set to false)\n  // if any class of a section exists, classExists is set to true\n  // if classExists is true, a header for this section will be created\n  let classExists = false;\n  if (sectionType.constructor === Object) {\n    if (\n      sectionType.preClass.items ||\n      sectionType.inClass.items ||\n      sectionType.postClass.items ||\n      (sectionType === \"projects\" &&\n        (sectionType.projectDue.items || sectionType.projectStart.items)) ||\n      (sectionType === \"cp\" && sectionType.cpDue.items)\n    ) {\n      classExists = true;\n    }\n  }\n\n  return (\n    <div>\n      {sectionType.constructor === Object && (\n        <>\n          <Accordion>\n            {classExists && (\n              <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>{sectionType.type}</Accordion.Header>\n                <Accordion.Body>\n                  {Object.keys(sectionType)\n                    .filter((sectionClass) => sectionType[sectionClass].items)\n                    .map((sectionclass, sectionIndex) => {\n                      return (\n                        <div className=\"all-classes\">\n                          <SectionClass\n                            day={day}\n                            sectionIndex={sectionIndex}\n                            sectionclass={sectionclass}\n                            sectionType={sectionType}\n                            bootcampDataCopy={bootcampDataCopy}\n                            setBootcampDataCopy={setBootcampDataCopy}\n                            section={section}\n                            dayIndex={dayIndex}\n                          />\n                        </div>\n                      );\n                    })}\n                </Accordion.Body>\n              </Accordion.Item>\n            )}\n          </Accordion>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Section;\n","import React, { useState, useContext } from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Section from \"./Section\";\n\nfunction MainAccordion({\n  dayIndex,\n  bootcampDataCopy,\n  setBootcampDataCopy,\n  day,\n  setShowInputModal,\n  setCourseDate,\n  // fold,\n  // setFold,\n}) {\n  const handlePlusClick = (day) => {\n    console.log(day);\n    setCourseDate(day);\n    setShowInputModal(true);\n  };\n\n  return (\n    <div>\n      {bootcampDataCopy[day].dateTypes.module && (\n        <Accordion>\n          <Accordion.Item eventKey={dayIndex}>\n            <Accordion.Header>\n              <div\n                className=\"course-day-symbol\"\n                onClick={() => handlePlusClick(day)}\n              >\n                {\" \"}\n                <AddIcon />\n              </div>\n              <div className=\"course-day-header\">\n                {bootcampDataCopy.constructor === Object ? (\n                  <>\n                    {day}, Week: {bootcampDataCopy[day].courseWeek}, Course Day:{\" \"}\n                    {bootcampDataCopy[day].courseDay},{\" \"}\n                    {bootcampDataCopy[day].dateTypes.module}{\" \"}\n                  </>\n                ) : (\n                  <>\n                    Course Day: {bootcampDataCopy[day].courseDay},{\" \"}\n                    {bootcampDataCopy[day].dateTypes.module}{\" \"}\n                  </>\n                )}\n              </div>\n            </Accordion.Header>\n            <Accordion.Body>\n              <div className=\"course-day\">\n                <div>\n                  {Object.keys(bootcampDataCopy[day].dateTypes).map(\n                    (section) => (\n                      <Section\n                        day={day}\n                        setBootcampDataCopy={setBootcampDataCopy}\n                        section={section}\n                        sectionType={bootcampDataCopy[day].dateTypes[section]}\n                        dayIndex={dayIndex}\n                        bootcampDataCopy={bootcampDataCopy}\n                      />\n                    )\n                  )}\n                </div>\n              </div>\n            </Accordion.Body>\n          </Accordion.Item>\n        </Accordion>\n      )}\n    </div>\n  );\n}\n\nexport default MainAccordion;\n","const download = (data, filename) => {\n        // from: https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\n        var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data));\n        var dlAnchorElem = document.createElement('a');\n        dlAnchorElem.setAttribute(\"href\",     dataStr     );\n        dlAnchorElem.setAttribute(\"download\", filename);\n        dlAnchorElem.click();\n    };\n\nexport default download;","import React, { useState } from \"react\";\nimport AddItemModal from \"./AddItemModal\";\nimport MainAccordion from \"./MainAccordion\";\nimport Button from \"react-bootstrap/Button\";\nimport download from \"../download\";\n\nconst GenerateDataShiftContent = ({\n  bootcampDataCopy,\n  setBootcampDataCopy,\n}) => {\n  const [showInputModal, setShowInputModal] = useState(false);\n  const [courseDate, setCourseDate] = useState(\"\");\n\n  // function that handles download of main data file after edits\n  const handleDownloadMainClick = () => {\n    console.log(\"main data file mod\", bootcampDataCopy);\n    download(bootcampDataCopy, \"modified-main-data-file.json\");\n  };\n\n  // function that handles download of individual batch data file after edits\n  const handleBatchDownloadClick = () => {\n    console.log(\"batch data copy\", bootcampDataCopy);\n    download(\n      bootcampDataCopy,\n      `modified-${bootcampDataCopy.courseName}-file.json`\n    );\n  };\n\n  // TODO: need to find another way to close all tabs of accordion\n  // const handleClose = () => {\n  //   const element = document.getElementsByClassName(\n  //     \"accordion-collapse collapse show\"\n  //   );\n\n  //   Array.from(element).forEach((subelement) => {\n  //     subelement.classList.remove(\"show\");\n  //   });\n  //   // setFold(true);\n  // };\n\n  return (\n    <>\n      {/* renders batch schedule data file  */}\n      {bootcampDataCopy.constructor === Object &&\n        Object.keys(bootcampDataCopy).length > 0 && (\n          <div>\n            <div className=\"download-button-container\">\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={handleBatchDownloadClick}\n              >\n                Download File\n              </Button>\n            </div>\n            {/* TODO: not being used at the moment */}\n            {/* <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              onClick={handleClose}\n            >\n              close all\n            </button> */}\n            {Object.keys(bootcampDataCopy).map((day, dayIndex) => {\n              return (\n                <>\n                  <MainAccordion\n                    dayIndex={dayIndex}\n                    bootcampDataCopy={bootcampDataCopy}\n                    setBootcampDataCopy={setBootcampDataCopy}\n                    day={day}\n                    setShowInputModal={setShowInputModal}\n                    setCourseDate={setCourseDate}\n                  />\n                </>\n              );\n            })}\n            {/* modal that takes in user input to create a new item in the schedule  */}\n            {showInputModal && courseDate && (\n              <AddItemModal\n                show={showInputModal}\n                onHide={() => setShowInputModal(false)}\n                bootcampdatacopy={bootcampDataCopy}\n                setbootcampdatacopy={setBootcampDataCopy}\n                setShowInputModal={setShowInputModal}\n                coursedate={courseDate}\n              />\n            )}\n          </div>\n        )}\n      {/* displays main data file  */}\n      {bootcampDataCopy.constructor === Array && (\n        <div className=\"accordion-container\">\n          <div className=\"download-button-container\">\n            <button\n              className=\"btn btn-primary\"\n              onClick={handleDownloadMainClick}\n            >\n              download modified file\n            </button>\n          </div>\n          {/* <button\n            type=\"submit\"\n            className=\"btn btn-primary\"\n            onClick={handleClose}\n          >\n            close all\n          </button> */}\n          {bootcampDataCopy.map((day, dayIndex) => {\n            return (\n              <MainAccordion\n                dayIndex={dayIndex}\n                bootcampDataCopy={bootcampDataCopy}\n                setBootcampDataCopy={setBootcampDataCopy}\n                day={dayIndex}\n                setShowInputModal={setShowInputModal}\n                setCourseDate={setCourseDate}\n              />\n            );\n          })}\n          {showInputModal && courseDate && (\n            <AddItemModal\n              show={showInputModal}\n              onHide={() => setShowInputModal(false)}\n              bootcampdatacopy={bootcampDataCopy}\n              setbootcampdatacopy={setBootcampDataCopy}\n              setShowInputModal={setShowInputModal}\n              coursedate={courseDate}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateDataShiftContent;\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\n\n// side navbar that displays links to all batch schedules in batchArray\nfunction ActiveCourses({ batchArray, setBootcampDataCopy }) {\n  return (\n    <div>\n      <h4>Batches</h4>\n      <Nav variant=\"pills\" className=\"flex-column \">\n        {/* a link is rendered for each element in batchArray */}\n        {batchArray.map((batch, index) => {\n          return (\n            <Nav.Link\n              // when a link is click , the content of the selected batch file is rendered\n              onClick={() =>\n                setBootcampDataCopy(\n                  JSON.parse(JSON.stringify(batch.content.days))\n                )\n              }\n              eventKey={index}\n            >\n              {batch.name}\n            </Nav.Link>\n          );\n        })}\n      </Nav>\n    </div>\n  );\n}\n\nexport default ActiveCourses;\n","import { DateTime } from 'luxon';\nimport holidayData from './data/2021-sg-stat-holidays.json';\nimport basicsData from './data/basics-course-days.json';\nimport bootcampData from './data/bootcamp-course-days.json';\n\nconst publicHolidays = holidayData.PH;\nconst publicHolidayArray = [];\n// get array of all public holiday dates\nObject.keys(publicHolidays).map((key, index) => {\n    publicHolidayArray.push(key);\n});\n\nconst companyHolidays = holidayData.company;\nconst companyHolidayArray = [];\nconst winterBreak = [];\n// get array of all company holiday dates\nObject.keys(companyHolidays).map((key, index) => {\n    companyHolidayArray.push(key);\n    // get array of winter break dates\n    if(companyHolidays[key].name === 'winter break') {\n        winterBreak.push(companyHolidays[key].date);\n    }\n});\n\nconst phWithoutCh = [];\n// get array of public holidays not including those included in winter break\npublicHolidayArray.forEach((holiday) => {\n    if(!companyHolidayArray.includes(holiday)) {\n        phWithoutCh.push(holiday);\n    }\n});\n\n// helper function for getting utc date/time\nconst getLocalDateTime = (utc, timeString, courseName, courseType, date) => {\n    const changedFormat = date.toFormat(\"yyyy-MM-dd\");\n    if (courseType === 'Basics') {\n        utc = DateTime.fromISO(changedFormat + timeString, {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp FT' && Number(courseName) % 2 === 0) {\n        utc = DateTime.fromISO(changedFormat + 'T13:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if ((courseType === 'Bootcamp FT' && Number(courseName) % 2 !== 0) || (courseType === 'Bootcamp PT' && (date.weekday === 6))) {\n        utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp PT' && (date.weekday === 1)) {\n        utc = DateTime.fromISO(changedFormat + 'T19:30', {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp PT' && (date.weekday === 6)) {\n        utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n    }\n    return utc;\n}\n\n// helper function for deciding what goes in topLevelObject based on course type\nconst generateTopLevelObject = (courseType, topLevelObject) => {\n        if (courseType === 'Basics') {\n            topLevelObject = {\n                daysOfWeek: basicsData.daysOfWeek,\n                courseStartIndex: basicsData.courseStartIndex,\n                totalCourseDays: basicsData.totalCourseDays,\n                ...topLevelObject\n            };\n        } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            let bootcampDays;\n            if (courseType === 'Bootcamp FT') {\n                bootcampDays = bootcampData.daysOfWeek.fullTime;\n            } else {\n                bootcampDays = bootcampData.daysOfWeek.partTime;\n            }\n            topLevelObject = {\n                daysOfWeek: bootcampDays,\n                courseStartIndex: bootcampData.courseStartIndex,\n                totalCourseDays: bootcampData.totalCourseDays,\n                ...topLevelObject\n            }\n        }\n\n        return topLevelObject;\n    }\n\n// helper function that generates dateObj if the course date falls on a public holiday\nconst generateHolidayObject = (dateString, week, date, dateObj) => {\n    dateObj = {\n        courseDay: null,\n        courseDate: dateString,\n        courseWeek: week,\n        dayNumber: date.weekday,\n        dateTypes: {}\n    }\n\n    if (phWithoutCh.includes(dateString)) {\n        dateObj.dateTypes = publicHolidays[dateString];\n    } else {\n        dateObj.dateTypes = companyHolidays[dateString];\n    }\n\n    return dateObj;\n}\n\n// helper function that generates dateObj for a normal courseday\nconst generateCourseDayObject = (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay) => {\n    // get whatever index of basicsData that is specified by courseDayCount\n    dateObj = {\n        courseDate: dateString,\n        courseWeek: week,\n        weekDay: weekDay,\n        dayNumber: date.weekday,\n        meetingDateTimeUTC: utc,\n        };\n\n    // data is different for basics and bootcamp\n    if (courseType === 'Basics') {\n        dateObj = {\n            ...dateObj, ...basicsData.days[courseDay]\n        }\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            dateObj = {\n            ...dateObj, ...bootcampData.days[courseDay]\n        }\n    }\n    return dateObj;\n}\n\n// ##################################################################\n// ##################################################################\n\nconst generateDataObject = (startDate, courseName, courseType) => {\n    let date = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let utc;\n    utc = getLocalDateTime(utc, 'T16:00', courseName, courseType, date);\n    let dateWeek = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let classDatesCount = 1;\n    let week = 1;\n    let weekDay = 1;\n    let data;\n    let courseDayCount;\n    // starts from 0 because it's tracking the index of the json data file\n    let courseDay = 0;\n\n    let topLevelObject = {\n            courseType: courseType,\n            days: {}\n        };\n\n    data = generateTopLevelObject(courseType, topLevelObject);\n\n    // set the number of course days based on course type\n    if (courseType === 'Basics') {\n        courseDayCount = 13;\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n        courseDayCount = 115;\n    }\n\n    const dayArray = data.daysOfWeek;\n    let dayIndex = data.courseStartIndex;\n\n    while (courseDayCount > 0) {\n        const dateString = date.toFormat('dd-MM-yyyy');\n\n        // setting filename from start date, end date, courseName of course \n        // if this consition is met, dateString will be the end date of course\n        if (courseDay + 1 === data.totalCourseDays) {\n            // start date\n            const displayDate = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n            const displayName = `${displayDate.toFormat('dd-MM-yyyy')}_${dateString}_BATCH${courseName}`;\n            data.courseName = displayName;\n        }\n\n        let dateObj;\n        // if date is a public holiday\n        if (phWithoutCh.includes(dateString) || winterBreak.includes(dateString)) {\n            dateObj = generateHolidayObject (dateString, week, date, dateObj);\n\n        // if date is not a holiday\n        } else {\n            dateObj = generateCourseDayObject (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay);\n\n            // increase course days on days that classes are held,\n            // DO NOT increase course days on holidays\n            courseDayCount -= 1;\n            courseDay += 1;\n        }\n        data.days[dateString] = dateObj;\n\n        \n        if (classDatesCount === data.totalCourseDays && courseType === 'Basics') {\n            date = date.plus({ days: 2 }); \n            utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n            weekDay += 1;\n            week += 1;\n\n        } else {\n            // this is the end of the dayArray (last day of the week)\n            if ( dayIndex === dayArray.length -1) {\n                weekDay = 1;\n                week += 1;\n                dateWeek = dateWeek.plus({ weeks: 1 });\n                // return to beginning of array (return to beginning of week)\n                dayIndex = 0;\n                date = date.plus({ weeks: 1 }).set({ weekday: dayArray[dayIndex] })\n                utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n\n            } else {\n                // day with the week\n                dayIndex += 1;\n                date = date.set({ weekday: dayArray[dayIndex] })\n                utc = getLocalDateTime (utc, 'T13:00', courseName, courseType, date);\n\n                if (!phWithoutCh.includes(dateString)) {\n                    weekDay += 1;\n                }\n            }\n        }\n        // increase classDatesCount regardless of whether it is a public holiday\n        classDatesCount += 1;\n    }\n\n    return data;\n}\n\nexport default generateDataObject;","import React from \"react\";\nimport { DateTime } from \"luxon\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport { scroller } from \"react-scroll\";\n\n// helper function that generates course day header for a normal course day\nconst NormalCourseDay = ({ todaySectionHeader, day, timeZoneSet, id }) => {\n  localDate = DateTime.fromISO(day.meetingDateTimeUTC, { zone: timeZoneSet });\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  meetingTime = localDate.toFormat(\"t\");\n  timeOffset = localDate.toFormat(\"ZZZZ\");\n  timeZone = localDate.toFormat(\"z\");\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <>\n          <div className=\"main-header\">\n            <h3 className=\"day-header\">\n              {formattedDate}, Week {day.courseWeek}, Course Day {day.courseDay}\n            </h3>\n            {/* scrolls back up to the top of the page  */}\n            {!todaySectionHeader && (\n              <div\n                onClick={() =>\n                  scroller.scrollTo(id, {\n                    smooth: true,\n                    offset: -70,\n                    duration: 100,\n                  })\n                }\n              >\n                <ExpandLessIcon />\n              </div>\n            )}\n          </div>\n          <p>\n            Meeting Time: {meetingTime} SGT ({timeOffset})\n          </p>\n          <p>{day.dateTypes.module}</p>\n        </>\n      )}\n    </>\n  );\n};\n\n// helper function that generates courseday header for a holiday\nconst HolidayCourseDay = ({ todaySectionHeader, day, timeZoneSet, id }) => {\n  localDate = DateTime.fromFormat(day.courseDate, \"dd-MM-yyyy\");\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  timeZone = localDate.toFormat(\"z\");\n  // depending on if the holiday is a public/company holiday,\n  // a different output will be rendered\n  if (day.dateTypes.holidayType === \"public holiday\") {\n    holiday = `Public Holiday (${day.dateTypes.name})`;\n  } else {\n    holiday = `Company Holiday (${day.dateTypes.name})`;\n  }\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header\">\n          <h2>\n            {formattedDate}: {day.dateTypes.location} {holiday}\n          </h2>\n          {!todaySectionHeader && (\n            <div\n              onClick={() =>\n                scroller.scrollTo(id, {\n                  smooth: true,\n                  offset: -70,\n                  duration: 100,\n                })\n              }\n            >\n              <ExpandLessIcon />\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nlet localDate;\nlet formattedDate;\nlet meetingTime;\nlet timeZone;\nlet timeOffset;\nlet holiday;\n\n// ######################################################\n// ######################################################\n\n// function that generates the header for each course day\nconst GenerateCourseDayHeader = ({ todaySectionHeader, day, coursetype }) => {\n  // this is the timezone of the area we are in\n  const timeZoneSet = \"Asia/Singapore\";\n  // used by scrollTo function to identify where to scroll to\n  const id = `${coursetype}-top`;\n\n  if (day.meetingDateTimeUTC) {\n    return (\n      <NormalCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n        id={id}\n      />\n    );\n  } else {\n    return (\n      <HolidayCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n        id={id}\n      />\n    );\n  }\n};\n\nexport default GenerateCourseDayHeader;\n","import React, { useState } from \"react\";\nimport generateDataObject from \"../generateCourseDates.js\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport download from \"../download.js\";\n\nconst DatePicker = ({ setBootcampDataCopy }) => {\n  // inputs from user used to generate course data\n  const [startDate, setStartDate] = useState(\"\");\n  const [courseName, setCourseName] = useState(\"\");\n  const [courseType, setCourseType] = useState(\"\");\n\n  // function that generates and downloads schedule data when download button is clicked\n  const handleDownload = async (e) => {\n    try {\n      const data = await generateDataObject(startDate, courseName, courseType);\n      download(data, `${data.courseName}.json`);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // function that generates and renders schedule data when button is clicked\n  const handleRender = async (e) => {\n    try {\n      const data = await generateDataObject(startDate, courseName, courseType);\n      await setBootcampDataCopy(JSON.parse(JSON.stringify(data.days)));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"date-picker\">\n        <div>\n          <h2>Generate Schedule Data File</h2>\n        </div>\n        <div className=\"input-form-container\">\n          <Form className=\"input-form\">\n            <Form.Group className=\"mb-3 input\" controlId=\"formDate\">\n              <Form.Label>Start Date</Form.Label>\n              <Form.Control\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Batch Number</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={courseName}\n                onChange={(e) => setCourseName(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Course Type</Form.Label>\n              <Form.Select\n                aria-label=\"Default select example\"\n                onChange={(e) => setCourseType(e.target.value)}\n              >\n                <option>Select course type</option>\n                <option value=\"Basics\">Basics</option>\n                <option value=\"Bootcamp FT\">Bootcamp FT</option>\n                <option value=\"Bootcamp PT\">Bootcamp PT</option>\n              </Form.Select>\n            </Form.Group>\n          </Form>\n          <div className=\"submit-button-container\">\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={(e) => {\n                handleRender(e);\n              }}\n            >\n              Render Schedule\n            </Button>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={(e) => {\n                handleDownload(e);\n              }}\n            >\n              Download Schedule\n            </Button>\n          </div>\n          <br></br>\n          <div>\n            <a href=\"https://github.com/rocketacademy/scheduler\">\n              link to GitHub repo\n            </a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DatePicker;\n","import React from \"react\";\nimport GenerateDataShiftContent from \"./GenerateDataShiftContent\";\nimport ActiveCourses from \"./ActiveCourses.jsx\";\nimport DatePicker from \"./DatePicker.jsx\";\n\nconst DataShift = ({ batchArray, bootcampDataCopy, setBootcampDataCopy }) => {\n  return (\n    <>\n      <div className=\"datashift-container\">\n        <div className=\"all-courses-navbar\">\n          {/* this component contains links to indivudual batch schedules to be rendered and edited */}\n          <ActiveCourses\n            batchArray={batchArray}\n            setBootcampDataCopy={setBootcampDataCopy}\n          />\n        </div>\n        <div className=\"data-shift\">\n          <div className=\"data-container\">\n            {/* this component generates a course schedule based on start date and course type from the main json data file */}\n            <DatePicker\n              bootcampDataCopy={bootcampDataCopy}\n              setBootcampDataCopy={setBootcampDataCopy}\n            />\n            {/* this component allows the user to edit the schedule rendered */}\n            <GenerateDataShiftContent\n              batchArray={batchArray}\n              bootcampDataCopy={bootcampDataCopy}\n              setBootcampDataCopy={setBootcampDataCopy}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DataShift;\n","import React, { useState } from \"react\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport DataShift from \"./DataShift\";\nimport mainDataFile from \"../data/bootcamp-course-days.json\";\nimport GenerateDataShiftContent from \"./GenerateDataShiftContent\";\n\nconst TabsContainer = ({ batchArray }) => {\n  const [key, setKey] = useState(\"datePicker\");\n  // remains empty until user picks/ generates schedule to edit\n  const [batchDataCopy, setBatchDataCopy] = useState({});\n  // this is the main bootcamp data json file that has not been mapped onto any dates\n  const [mainDataCopy, setMainDataCopy] = useState(\n    JSON.parse(JSON.stringify(mainDataFile.days))\n  );\n  console.log(\"main data copy\", mainDataCopy);\n\n  return (\n    <Tabs\n      id=\"controlled-tab-example\"\n      activeKey={key}\n      onSelect={(k) => setKey(k)}\n      className=\"mb-3\"\n    >\n      {/* this tab contains the component for editing the main data file */}\n      <Tab eventKey=\"datePicker\" title=\"Main\">\n        <GenerateDataShiftContent\n          bootcampDataCopy={mainDataCopy}\n          setBootcampDataCopy={setMainDataCopy}\n        />\n      </Tab>\n      {/* this tab contains the component for generating/ editing individual batch schedules */}\n      <Tab eventKey=\"dataShift\" title=\"Batch\">\n        <DataShift\n          batchArray={batchArray}\n          bootcampDataCopy={batchDataCopy}\n          setBootcampDataCopy={setBatchDataCopy}\n        />\n      </Tab>\n    </Tabs>\n  );\n};\n\nexport default TabsContainer;\n","import React from \"react\";\n\n// displays items in a section's classes\nfunction DisplaySection({ heading, sectionType, day }) {\n  return (\n    <div>\n      <h5>{heading}</h5>\n      <ul>\n        {sectionType.map((item, index) => {\n          let id;\n          // id used for scrollTo function\n          if (heading === \"Pre Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpc-${index}`;\n          }\n\n          return (\n            <>\n              {item.url && (\n                <li id={id}>\n                  <a href={item.url}>{item.name}</a>\n                </li>\n              )}\n              {!item.url && <li>{item.name}</li>}\n            </>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default DisplaySection;\n","import React from 'react';\nimport DisplaySection from './DisplaySection';\n\n// if sections project due/ project start/ cp due exist in a course day, \n// this function will generate a header and content for these sections\nconst GenerateNotifications = ({ \n                                status, \n                                projectdue, \n                                cpdue, \n                                projectstart, \n                                day\n                             }) => {\n    let heading;\n\n    // generates header for the section\n    if (status) {\n        if (status.items) {\n            if (status === projectdue) {\n                heading = 'Project Due';\n            } else if (status === projectstart) {\n                heading = 'Project Start';\n            } else if (status === cpdue) {\n                heading = 'Inteview Prep due';\n            }\n        }\n    }\n\n    return (\n        <>\n        {status && status.items && (\n            <>\n            <DisplaySection \n                        heading={heading} \n                        sectionType={status.items} \n                        day={day} \n                        />\n            </>\n        )}\n    </>\n    )  \n}\n\nexport default GenerateNotifications;","const generateSectionArray = (datetype, classType, sectionArray) => {\n    Object.keys(datetype).forEach((section) => {\n        let classTypeSection;\n    // classTypeSection is determined by what classType is\n        if (classType === 'preClass') {\n            classTypeSection = datetype[section].preClass;\n        } else if (classType === 'inClass') {\n            classTypeSection = datetype[section].inClass;\n        } else {\n            classTypeSection = datetype[section].postClass;\n        } \n\n        if (classTypeSection) {\n            // if there are items in classTypeSection, the items are pushed into sectionArray\n            if (classTypeSection.items) {\n                for (let x = 0; x < classTypeSection.items.length; x += 1) {\n                    sectionArray.push(classTypeSection.items[x]);\n                }\n            }\n        }\n    })\n    return sectionArray;\n}\n\nexport default generateSectionArray;","import React from 'react';\nimport DisplaySection from './DisplaySection';\nimport generateSectionArray from '../generateSectionArray';\n\n\nfunction GenerateDatetypeSections ({ \n                                datetype, \n                                classType, \n                                day \n                                }) { \n    // stores items that are in a particular section of a datetype\n    const sectionArray = [];\n\n    generateSectionArray(datetype, classType, sectionArray);\n\n    // sets the heading depending on the classtype\n    let heading;\n    if (sectionArray.length > 0) {\n           // a header will be created \n        if (classType === 'preClass') {\n            heading ='Pre Class';\n        } else if (classType === 'inClass') {\n            heading = 'In Class';\n        } else {\n            heading = 'Post Class';\n        }\n    }\n\n    return (\n        <div>\n            <DisplaySection \n                        heading={heading} \n                        sectionType={sectionArray} \n                        day={day}\n                        />\n        </div>\n    )\n}\n\nexport default GenerateDatetypeSections\n","import React from \"react\";\nimport GenerateNotifications from \"./GenerateNotifications\";\nimport GenerateDatetypeSections from \"./GenerateDatetypeSections\";\n\n// generates the content and section headings for each course day\nconst GenerateCourseDayContent = ({ day }) => {\n  const projectdue = day.dateTypes.projects.projectDue;\n  const projectstart = day.dateTypes.projects.projectStart;\n  const cpdue = day.dateTypes.cp.cpDue;\n\n  return (\n    <>\n      {/* project due notification  */}\n      <GenerateNotifications\n        status={projectdue}\n        cpdue={cpdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      {/* career prep due notification  */}\n      <GenerateNotifications\n        status={cpdue}\n        cpdue={cpdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      {/* preclass section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"preClass\"\n        day={day}\n      />\n      {/* in class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"inClass\"\n        day={day}\n      />\n      {/* post class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"postClass\"\n        day={day}\n      />\n      {/* project start notification  */}\n      <GenerateNotifications\n        status={projectstart}\n        cpdue={cpdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n    </>\n  );\n};\n\nexport default GenerateCourseDayContent;\n","import React from 'react'\n\n// renders items in a section\nfunction TableSectionContent({ sectionArray }) {\n    return (\n        <ul>\n        {sectionArray.map((item) => {\n            \n            return (\n                <>\n                {item.url && (\n                    <li>\n                        <a href={item.url}>{item.name}</a>\n                    </li>\n                )}\n                {!item.url && (\n                    <li>\n                        {item.name}\n                    </li>\n                )}\n                </>\n            )\n        })}\n        </ul>\n    )\n}\n\nexport default TableSectionContent\n","import React from 'react';\nimport generateSectionArray from '../generateSectionArray';\nimport TableSectionContent from './TableSectionContent';\n\n// renders in class/ preclass section of table\nfunction TableClass({ day, \n                      sectionClass\n                     }) {\n\n    const classArray = [];\n    const datetype = day.dateTypes;\n\n    // gets all items in a particular section\n    generateSectionArray(datetype, sectionClass, classArray);\n\n    return (\n        <td>\n            <TableSectionContent sectionArray={classArray} />\n        </td>\n    )\n}\n\nexport default TableClass\n","import React from 'react';\nimport GenerateNotifications from './GenerateNotifications';\n\n// renders projects section of table\nfunction TableProjects({ day }) {\n    const projectdue = day.dateTypes.projects.projectDue;\n    const projectstart = day.dateTypes.projects.projectStart;\n    const cpdue = day.dateTypes.cp.cpDue;\n\n    return (\n        <div className=\"table-projects\">\n            <GenerateNotifications status={projectdue} \n                               cpdue={cpdue} \n                               projectdue={projectdue} \n                               projectstart={projectstart} \n                               day={day}\n                               />\n            <GenerateNotifications status={projectstart} \n                               cpdue={cpdue} \n                               projectdue={projectdue} \n                               projectstart={projectstart} \n                               day={day}\n                               />\n        </div>\n    )\n}\n\nexport default TableProjects\n","import React, { useState } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport { DateTime } from \"luxon\";\nimport TableClass from \"./TableClass\";\nimport TableProjects from \"./TableProjects\";\nimport { scroller } from \"react-scroll\";\nimport GenerateCourseDayContent from \"./GenerateCourseDayContent\";\nimport GenerateDatetypeSections from \"./GenerateDatetypeSections\";\nimport GenerateCourseDayHeader from \"./GenerateCourseDayHeader\";\n\n// helper function that finds previous course day\nconst findPreviousDay = (scheduleData, today, coursetype) => {\n  let dayBefore;\n  if (coursetype === \"ft\") {\n    if (today.weekday === 1) {\n      dayBefore = today.plus({ days: -3 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.plus({ days: -1 }).toFormat(\"dd-MM-yyyy\");\n    }\n  } else if (coursetype === \"pt\") {\n    if (today.weekday === 1) {\n      dayBefore = today\n        .plus({ weeks: -1 })\n        .set({ weekday: 6 })\n        .toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday > 1 && today.weekday <= 6) {\n      dayBefore = today.set({ weekday: 1 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    }\n  }\n\n  if (scheduleData[dayBefore].dateTypes.holidayType) {\n    dayBefore = findPreviousDay(dayBefore);\n  }\n\n  return dayBefore;\n};\n\n//helper funcyion that finds next course day\nconst findNextDay = (scheduleData, today, coursetype) => {\n  let nextDay;\n  if (coursetype === \"ft\") {\n    if (today.weekday === 6) {\n      nextDay = today.plus({ days: 3 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      nextDay = today.toFormat(\"dd-MM-yyyy\");\n    }\n  } else if (coursetype === \"pt\") {\n    if (today.weekday <= 6) {\n      nextDay = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      nextDay = today.plus({ days: 2 }).toFormat(\"dd-MM-yyyy\");\n    }\n  }\n\n  if (scheduleData[nextDay].dateTypes.holidayType) {\n    nextDay = findNextDay(nextDay);\n  }\n\n  return nextDay;\n};\n// ##############################################################################\n\nfunction CurrentContentTable({ scheduleData, coursetype }) {\n  const today = DateTime.now();\n  let firstDay;\n  let moveDate;\n  let lastDay;\n  let previousDay;\n  let nextDay;\n\n  // getting first and last days shown in table , depending on type of bootcamp\n  if (coursetype === \"pt\") {\n    // shows current month for part time bootcamp\n    firstDay = DateTime.now().startOf(\"month\");\n    lastDay = DateTime.now().endOf(\"month\");\n  } else {\n    // shows current week for full time bootcamp\n    firstDay = DateTime.now().startOf(\"week\");\n    lastDay = DateTime.now().endOf(\"week\");\n  }\n\n  moveDate = firstDay;\n\n  const weekDatesArray = [];\n  // getting all the dates between first day and last day inclusive and storing them in an array\n  while (moveDate <= lastDay) {\n    weekDatesArray.push(moveDate.toFormat(\"dd-MM-yyyy\"));\n    moveDate = moveDate.plus({ days: 1 });\n  }\n\n  // getting the current date and formatting it such that it follows the format used in the data files\n  const todayFormatted = today.toFormat(\"dd-MM-yyyy\");\n\n  // finds previous course day\n  previousDay = findPreviousDay(scheduleData, today, coursetype);\n\n  // find the next day if current day is not a course day\n  nextDay = findNextDay(scheduleData, today, coursetype);\n\n  // getting the data objects that correspond to the dates in weekDatesArray and storing them in an array\n  const currentWeekData = [];\n  for (let i = 0; i < weekDatesArray.length; i += 1) {\n    Object.keys(scheduleData).map((day) => {\n      if (day === weekDatesArray[i]) {\n        currentWeekData.push(scheduleData[day]);\n      }\n    });\n  }\n\n  let todayId;\n  // if today's date matches a date in the schedule file, an id is generated for the scrollTo function\n  if (scheduleData[todayFormatted]) {\n    todayId = `${coursetype}-week-${scheduleData[todayFormatted].courseWeek}-day-${scheduleData[todayFormatted].dayNumber}`;\n  }\n\n  // indicates whether or not the up arrow is shown on the courseday header\n  const todaySectionHeader = true;\n\n  return (\n    <div className=\"schedule-table\">\n      <div\n        className=\"today-date\"\n        onClick={() =>\n          scroller.scrollTo(todayId, {\n            smooth: true,\n            offset: -70,\n            duration: 100,\n          })\n        }\n      >\n        {nextDay && previousDay && (\n          <>\n            <div>\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[nextDay]}\n                coursetype={coursetype}\n              />\n            </div>\n            <div className=\"top-content-container\">\n              <div className=\"top-content-section\">\n                <>\n                  <h5 className=\"top-content-day\">Current Course Day:</h5>\n                  <br></br>\n                  <GenerateCourseDayContent day={scheduleData[nextDay]} />\n                </>\n              </div>\n              <div className=\"top-content-section\">\n                <>\n                  <h5 className=\"top-content-day\">Previous Course Day:</h5>\n                  <br></br>\n                  <GenerateDatetypeSections\n                    datetype={scheduleData[previousDay].dateTypes}\n                    classType=\"postClass\"\n                    day={scheduleData[previousDay]}\n                  />\n                </>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n\n      <br></br>\n      {/* table which displays current week's/ month's content based on course type  */}\n      <Table striped bordered hover size=\"sm\">\n        <thead>\n          <tr>\n            <th></th>\n            <th>Projects</th>\n            <th>Pre Class</th>\n            <th>In Class</th>\n          </tr>\n        </thead>\n        <tbody>\n          {currentWeekData.map((date, index) => {\n            // getting the formatted date that will be shown in the table\n            const formattedDate = DateTime.fromFormat(\n              date.courseDate,\n              \"dd-MM-yyyy\"\n            ).toFormat(\"EEE d MMM\");\n            // getting the id that links formattedDate to element in main content page\n            const id = `${coursetype}-week-${date.courseWeek}-day-${date.dayNumber}`;\n\n            return (\n              <tr>\n                <td\n                  // library react-scroll used to scroll to an element with matching id on main page\n                  onClick={() =>\n                    scroller.scrollTo(id, {\n                      smooth: true,\n                      offset: -70,\n                      duration: 100,\n                    })\n                  }\n                  className=\"table-date\"\n                >\n                  <h6>{formattedDate}</h6>\n                  <p>\n                    Week {date.courseWeek}\n                    <br></br>Course Day {date.courseDay}\n                  </p>\n                </td>\n                {/* getting data for projects section of table */}\n                <td>\n                  <TableProjects day={currentWeekData[index]} />\n                </td>\n                {/* getting data for preclass and inclass section of table */}\n                <TableClass\n                  day={currentWeekData[index]}\n                  sectionClass=\"preClass\"\n                />\n                <TableClass\n                  day={currentWeekData[index]}\n                  sectionClass=\"inClass\"\n                />\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n}\n\nexport default CurrentContentTable;\n","import React from \"react\";\nimport GenerateCourseDayHeader from \"./GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"./GenerateCourseDayContent\";\nimport CurrentContentTable from \"./CurrentContentTable\";\n\n// generates schedule content for a particular course\nfunction ScheduleContent({ scheduleData, coursetype, title }) {\n  const id = `${coursetype}-top`;\n  const todaySectionHeader = false;\n  console.log(\"schedule data\", scheduleData);\n  return (\n    <div className=\"content\">\n      <h1 className=\"schedule-header\">{title}</h1>\n      <p id={id}></p>\n      {/* generates table which shows schedule for current week/ month depending on course type */}\n      <CurrentContentTable\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n      />\n      <div className=\"schedule-list\">\n        {/* generates individual day schedule content */}\n        {Object.keys(scheduleData).map((day) => {\n          const id = `${coursetype}-week-${scheduleData[day].courseWeek}-day-${scheduleData[day].dayNumber}`;\n\n          return (\n            <div className=\"day-class\" id={id}>\n              {/* generates schedule header for individual day */}\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[day]}\n                coursetype={coursetype}\n              />\n              {/* generates content if course day is not a holiday */}\n              {!scheduleData[day].dateTypes.holidayType && (\n                <GenerateCourseDayContent day={scheduleData[day]} />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default ScheduleContent;\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { scroller } from \"react-scroll\";\nimport { DateTime } from \"luxon\";\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\n\n// one of the components in Sidebar\nfunction CourseWeeks({ scheduleData, coursetype }) {\n  const weeks = [];\n  // getting all the week numbers\n  Object.keys(scheduleData).forEach((day) => {\n    if (!weeks.includes(scheduleData[day].courseWeek)) {\n      weeks.push(scheduleData[day].courseWeek);\n    }\n  });\n\n  // getting first and last days of week\n  const firstDayOfWeek = DateTime.now().startOf(\"week\");\n  const lastDayOfWeek = DateTime.now().endOf(\"week\");\n  let target = firstDayOfWeek;\n  // array where all course dates in current week will be stored\n  const weeksDates = [];\n\n  // storing week's dates in the array\n  while (target <= lastDayOfWeek) {\n    weeksDates.push(target.toFormat(\"dd-MM-yyyy\"));\n    target = target.plus({ days: 1 });\n  }\n\n  // getting the week's courseWeek that the indicator will point to\n  const weekNumber = [];\n  weeksDates.forEach((date) => {\n    if (\n      scheduleData[date] &&\n      !weekNumber.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumber.push(scheduleData[date].courseWeek);\n    }\n  });\n\n  return (\n    <div className=\"sidebar-courseweeks\">\n      <h4>Course Weeks</h4>\n      <Nav\n        variant=\"pills\"\n        defaultActiveKey=\"link-0\"\n        className=\"flex-column\"\n        navbarScroll=\"true\"\n      >\n        <Nav.Item>\n          <Nav.Link\n            eventKey=\"link-0\"\n            // uses react-scroll library for scroll function\n            onClick={() =>\n              scroller.scrollTo(`${coursetype}-top`, {\n                smooth: true,\n                offset: -70,\n                duration: 100,\n              })\n            }\n          >\n            Schedule Table\n          </Nav.Link>\n        </Nav.Item>\n        {weeks.map((week, index) => {\n          // generating id that is linked to id of an element in main content of page\n          // on click, page will scroll to where the element is\n          const navId = `link-${index + 1}`;\n          const id = `${coursetype}-week-${week}-day-1`;\n\n          return (\n            <Nav.Item>\n              <Nav.Link\n                eventKey={navId}\n                // uses react-scroll library for scroll function\n                onClick={() =>\n                  scroller.scrollTo(id, {\n                    smooth: true,\n                    offset: -70,\n                    duration: 100,\n                  })\n                }\n              >\n                Week {week}\n                {/* week indicator that indicates that a certain week is the current week  */}\n                {weeks[index] === weekNumber[0] && (\n                  <span className=\"current-wk-indicator\">\n                    <KeyboardBackspaceIcon />\n                    {\"  \"}\n                    this week\n                  </span>\n                )}\n              </Nav.Link>\n            </Nav.Item>\n          );\n        })}\n      </Nav>\n    </div>\n  );\n}\n\nexport default CourseWeeks;\n","import React from \"react\";\nimport CourseWeeks from \"./CourseWeeks\";\nimport Modules from \"./Modules\";\n\n// side navbar , displays a list of course weeks\nfunction SideBar({ scheduleData, coursetype }) {\n  return (\n    <div className=\"sidebar\">\n      <CourseWeeks scheduleData={scheduleData} coursetype={coursetype} />\n      {/* <Modules scheduleData={scheduleData} /> */}\n    </div>\n  );\n}\n\nexport default SideBar;\n","import React from \"react\";\nimport ScheduleContent from \"./ScheduleContent\";\nimport SideBar from \"./SideBar\";\n\nfunction BatchSchedule({ data, title }) {\n  const scheduleData = JSON.parse(JSON.stringify(data.days));\n\n  // needed to generate id for use with react-scroll library, also indicates if course is full time/ part time\n  let coursetype;\n  if (data.courseType === \"Bootcamp PT\") {\n    coursetype = \"pt\";\n  } else {\n    coursetype = \"ft\";\n  }\n\n  return (\n    <div className=\"course-schedule\">\n      {/* contains links to main part of schedule page */}\n\n      <SideBar scheduleData={scheduleData} coursetype={coursetype} />\n      {/* contains current schedule table and main content of page */}\n      <ScheduleContent\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        title={title}\n      />\n    </div>\n  );\n}\n\nexport default BatchSchedule;\n","import React, { useState } from \"react\";\nimport { Route, Switch, Link, useRouteMatch, Redirect } from \"react-router-dom\";\n\nimport Nav from \"react-bootstrap/Nav\";\nimport BatchSchedule from \"./BatchSchedule\";\n\nfunction ScheduleContainer({ batchArray }) {\n  const [key, setKey] = useState(\"\");\n  let { path, url } = useRouteMatch();\n  console.log(\"batch array\", batchArray);\n  // pass individual batch json files into BatchSchedule to generate schedules\n  return (\n    <>\n      <Nav\n        variant=\"tabs\"\n        activeKey={key}\n        onSelect={(k) => setKey(k)}\n        className=\"mb-3\"\n      >\n        {/* a tab is generated for each element in batch array  */}\n        {batchArray.map((batch) => {\n          return (\n            <Nav.Item>\n              <Nav.Link eventKey={batch.name}>\n                <Link to={`${url}/${batch.name}`}>{batch.name}</Link>\n              </Nav.Link>\n            </Nav.Item>\n          );\n        })}\n      </Nav>\n      {/* backup navbar  */}\n      {/* <Navbar variant=\"dark\" bg=\"secondary\">\n        <Container>\n          <Navbar.Brand href=\"#home\">\n            <img src={logo} alt=\"company logo\"></img>\n          </Navbar.Brand>\n          <Nav className=\"me-auto\">\n            <Nav.Link>\n              <Link to={`${url}/ftbc3`}>FTBC 3</Link>\n            </Nav.Link>\n            <Nav.Link>\n              <Link to={`${url}/ftbc4`}>FTBC 4</Link>\n            </Nav.Link>\n            <Nav.Link>\n              <Link to={`${url}/ptbc1`}>PTBC 1</Link>\n            </Nav.Link>\n          </Nav>\n        </Container>\n      </Navbar> */}\n      <Switch>\n        <Route exact path={path}>\n          <Redirect to={`${path}/${batchArray[0].name}`} />\n        </Route>\n        {batchArray.map((batch) => {\n          return (\n            <Route path={`${path}/${batch.name}`}>\n              <BatchSchedule\n                data={batch.content}\n                title={batch.name.toUpperCase()}\n              />\n            </Route>\n          );\n        })}\n      </Switch>\n    </>\n  );\n}\n\nexport default ScheduleContainer;\n","import React from 'react';\nimport TabsContainer from './components/Tabs';\nimport ptbc1 from '../src/data/16-08-2021_10-10-2022_BATCH1.json';\nimport ftbc3 from '../src/data/12-04-2021_23-09-2021_BATCH3.json';\nimport ftbc4 from '../src/data/12-07-2021_22-12-2021_BATCH4.json';\nimport {\n  HashRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport ScheduleContainer from './components/ScheduleContainer';\n\nfunction App() {\n\n  // put all batch data files in an array to be passed into separate components for /shedule and /admin\n  const batchArray = [{name:\"ptbc1\", content: ptbc1}, {name: \"ftbc3\", content: ftbc3}, {name: \"ftbc4\", content: ftbc4}];\n\n  return (\n    <div className=\"App\">\n      {/* <BatchSchedule /> */}\n      <HashRouter>\n        <Switch>\n          {/* route that takes user to part of app that edits course schedules */}\n          <Route path=\"/admin\">\n            <TabsContainer batchArray={batchArray} />\n          </Route>\n          {/* route that takes user to part of app that displays batch schedules for student use */}\n          <Route path=\"/schedules\">\n            <ScheduleContainer batchArray={batchArray} />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}