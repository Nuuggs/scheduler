{"version":3,"sources":["components/admin/main-accordion/AddItemModal.jsx","components/admin/main-accordion/inner-accordion/ShiftItemModal.jsx","components/admin/main-accordion/inner-accordion/ClassItem.jsx","components/admin/main-accordion/inner-accordion/SectionClass.jsx","components/admin/main-accordion/inner-accordion/Section.jsx","components/admin/main-accordion/MainAccordion.jsx","download.js","components/admin/GenerateDataShiftContent.jsx","components/admin/data-shift/ActiveCourses.jsx","generateCourseDates.js","components/schedules/GenerateCourseDayHeader.jsx","components/admin/data-shift/DatePicker.jsx","components/admin/data-shift/DataShift.jsx","components/admin/Tabs.jsx","assets/4-MILK.png","components/schedules/DisplaySection.jsx","components/schedules/GenerateNotifications.jsx","generateSectionArray.js","components/schedules/GenerateDatetypeSections.jsx","components/schedules/GenerateCourseDayContent.jsx","components/schedules/schedule-table/TableSectionContent.jsx","components/schedules/schedule-table/TableClass.jsx","components/schedules/schedule-table/TableProjects.jsx","components/schedules/schedule-table/ScheduleTable.jsx","generateTableData.js","components/schedules/schedule-table/ContentTable.jsx","components/schedules/current-day/CurrentDaySection.jsx","components/schedules/ScheduleContent.jsx","components/schedules/sidebar/Modules.jsx","components/schedules/sidebar/CourseWeeks.jsx","components/schedules/sidebar/SideBar.jsx","components/schedules/BatchSchedule.jsx","components/schedules/ScheduleContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddItemModal","show","onHide","bootcampdata","setbootcampdata","coursedate","useState","title","setTitle","url","setUrl","section","setSection","sectionClass","setSectionClass","Modal","size","centered","Header","closeButton","Title","id","Body","Form","Group","className","controlId","Label","Control","type","placeholder","value","onChange","e","target","Select","Button","variant","onClick","preventDefault","newItem","name","dateTypes","items","push","handleAddItem","Footer","ShiftItemModal","heading","shiftitem","sectiontype","classtype","classindex","selectedDate","setSelectedDate","direction","dates","map","date","courseDay","selectedItem","splice","length","targetDay","constructor","Array","handleSubmitDate","addDates","datesArray","includes","addIndex","bootcampData","indexOf","ClassItem","setBootcampData","classType","sectionType","item","dayIndex","classIndex","modalShow","setModalShow","shiftItem","setShiftItem","handleShift","Object","keys","filter","console","log","SectionClass","day","sectionclass","sectionIndex","handleClassShift","sectionArray","i","selectedSection","startDay","forEach","element","index","shiftSection","Section","classExists","preClass","inClass","postClass","projectDue","projectStart","cpDue","Accordion","Item","eventKey","MainAccordion","setShowInputModal","setCourseDate","accordionKey","handleCloseAll","setAccordionKey","module","handlePlusClick","courseWeek","download","data","filename","dataStr","encodeURIComponent","JSON","stringify","dlAnchorElem","document","createElement","setAttribute","click","GenerateDataShiftContent","mainFile","batchFile","showInputModal","courseDate","handleDownloadMainClick","a","courseName","ActiveCourses","batchArray","setBatchFile","Nav","batch","Link","parse","content","days","handleSelectClick","publicHolidays","holidayData","PH","publicHolidayArray","key","companyHolidays","company","companyHolidayArray","winterBreak","phWithoutCh","holiday","localDate","formattedDate","meetingTime","timeZone","timeOffset","getLocalDateTime","utc","timeString","courseType","changedFormat","toFormat","DateTime","fromISO","zone","toUTC","toISO","Number","weekday","generateHolidayObject","dateString","week","dateObj","dayNumber","generateCourseDayObject","weekDay","meetingDateTimeUTC","basicsData","generateDataObject","startDate","fromFormat","courseDayCount","dateWeek","classDatesCount","dayArray","topLevelObject","daysOfWeek","courseStartIndex","totalCourseDays","bootcampDays","startIndex","fullTime","partTime","generateTopLevelObject","displayDate","displayName","plus","weeks","set","DatePicker","setStartDate","setCourseName","setCourseType","handleDownload","handleRender","href","DataShift","TabsContainer","setKey","batchDays","setBatchDays","mainDataFile","setMainFile","mainDays","setMainDays","useEffect","class","Tabs","activeKey","onSelect","k","Tab","NormalCourseDay","todaySectionHeader","timeZoneSet","HolidayCourseDay","holidayType","location","GenerateCourseDayHeader","coursetype","DisplaySection","GenerateNotifications","status","projectdue","cpdue","projectstart","generateSectionArray","datetype","classTypeSection","x","GenerateDatetypeSections","GenerateCourseDayContent","projects","cp","TableSectionContent","TableClass","classArray","TableProjects","ScheduleTable","weekNumbers","tableData","today","now","num","Table","bordered","hover","scroller","scrollTo","smooth","offset","duration","generateTableData","scheduleData","setWeekNumbers","setTableData","firstDay","moveDate","lastDay","firstDayMonth","lastDayMonth","moveDateMonth","startOf","endOf","weekDatesArray","monthDatesArray","currentWeekData","currentMonthData","ContentTable","findPreviousDay","dayBefore","findNextDay","nextDay","CurrentDaySection","previousDay","currentDayId","previousDayId","ScheduleContent","nextToday","months","defaultActiveKey","Modules","moduleNameArray","scheduleUrls","scheduleObjs","itemUrlArray","split","generatingDataArrays","accessingRequiredItems","sort","moduleName","general","poce","ice","urlObj","splitName","dataObj","info","CourseWeeks","currentWeekRef","current","scrollIntoView","block","CurrentWeekDiv","ref","firstDayOfWeek","lastDayOfWeek","weeksDates","weekNumber","useRef","navbarScroll","navId","sidebarId","SideBar","BatchSchedule","ScheduleContainer","useRouteMatch","path","Navbar","bg","Brand","src","logo","alt","as","to","toUpperCase","exact","App","ptbc1","ftbc3","ftbc4","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.33ba2c45.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nfunction AddItemModal({\n  show,\n  onHide,\n  bootcampdata,\n  setbootcampdata,\n  coursedate,\n}) {\n  // input fields for a entry of a new item into the main data file\n  const [title, setTitle] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [section, setSection] = useState(\"\");\n  const [sectionClass, setSectionClass] = useState(\"\");\n\n  // function that adds new item to main data file\n  const handleAddItem = (e) => {\n    e.preventDefault();\n\n    // new item that will be added to main data file\n    const newItem = {\n      name: title,\n      url: url,\n    };\n\n    // if the section that the new item is to be added to is empty, an empty array called items is added to it\n    if (!bootcampdata[coursedate].dateTypes[section][sectionClass].items) {\n      bootcampdata[coursedate].dateTypes[section][sectionClass].items = [];\n    }\n\n    // the new item is then pushed into items array\n    bootcampdata[coursedate].dateTypes[section][sectionClass].items.push(\n      newItem\n    );\n\n    // the new content is saved in state\n    setbootcampdata({ ...bootcampdata });\n  };\n\n  return (\n    // modal that takes in user input for the creation of a new item\n    <Modal\n      show={show}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"add-input-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"add-input-modal\">Add an item</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Group className=\"mb-3\" controlId=\"title\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\" controlId=\"url\">\n            <Form.Label>URL</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter URL\"\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Label>Section</Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSection(e.target.value)}\n          >\n            <option>choose section</option>\n            <option value=\"general\">general</option>\n            <option value=\"css\">css</option>\n            <option value=\"ux\">ux</option>\n            <option value=\"projects\">projects</option>\n            <option value=\"cp\">cp</option>\n            <option value=\"dsa\">dsa</option>\n          </Form.Select>\n\n          <Form.Label>Class </Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSectionClass(e.target.value)}\n          >\n            <option>choose class type</option>\n            <option value=\"preClass\">preClass</option>\n            <option value=\"postClass\">postClass</option>\n            <option value=\"inClass\">inClass</option>\n            {section === \"projects\" && (\n              <>\n                <option value=\"projectDue\">projectDue</option>\n                <option value=\"projectStart\">projectStart</option>\n              </>\n            )}\n            {section === \"cp\" && <option value=\"cpDue\">cpDue</option>}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleAddItem(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default AddItemModal;\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\n// moves items to a specific date in the schedule\nfunction ShiftItemModal({\n  show,\n  onHide,\n  shiftitem,\n  bootcampdata,\n  setbootcampdata,\n  sectiontype,\n  classtype,\n  classindex,\n  section,\n}) {\n  const [selectedDate, setSelectedDate] = useState(\"\");\n\n  let heading;\n  if (shiftitem.direction === \"up\") {\n    heading = \"Moving back ... \";\n  } else {\n    heading = \"Moving forward ... \";\n  }\n\n  const handleSubmitDate = (e) => {\n    e.preventDefault();\n    // finding the selected item in the data file\n    let selectedItem = sectiontype[classtype].items[classindex];\n    // removing it from it's original position\n    sectiontype[classtype].items.splice(classindex, 1);\n\n    // if items array is empty after removing selected item, remove empty items array\n    if (sectiontype[classtype].items.length === 0) {\n      delete sectiontype[classtype].items;\n    }\n    // this is where we want to move the item to\n    const targetDay = bootcampdata[selectedDate].dateTypes[section];\n\n    // checking to see if items array exists at destination, if not, an empty array called items is added\n    if (!targetDay[classtype].items) {\n      targetDay[classtype].items = [];\n    }\n\n    // selected item is push into items array at destination\n    targetDay[classtype].items.push(selectedItem);\n\n    // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n    bootcampdata.constructor === Array\n      ? setbootcampdata([...bootcampdata])\n      : setbootcampdata({ ...bootcampdata });\n  };\n\n  return (\n    <Modal\n      show={show}\n      shiftitem={shiftitem}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"item-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"item-modal\">{heading}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"days\"\n            onChange={(e) => setSelectedDate(e.target.value)}\n          >\n            <option>--</option>\n            {shiftitem.dates.map((date) => {\n              if (typeof date === \"number\") {\n                return (\n                  <>\n                    <option value={date}>\n                      Day {bootcampdata[date].courseDay}\n                    </option>\n                    ;\n                  </>\n                );\n              } else {\n                return (\n                  <>\n                    <option value={date}>{date}</option>;\n                  </>\n                );\n              }\n            })}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleSubmitDate(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default ShiftItemModal;\n","import React, { useState } from \"react\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport ShiftItemModal from \"./ShiftItemModal\";\n\n// helper functions that populates dateArray\n// ##########################################################\nconst addDates = (datesArray, date) => {\n  if (!datesArray.includes(date)) {\n    datesArray.push(date);\n  }\n  return datesArray;\n};\n\nconst addIndex = (bootcampData, datesArray, date) => {\n  if (!datesArray.includes(bootcampData.indexOf(date))) {\n    datesArray.push(bootcampData.indexOf(date));\n  }\n  return datesArray;\n};\n// ############################################################\n\nfunction ClassItem({\n  setBootcampData,\n  section,\n  bootcampData,\n  classType,\n  sectionType,\n  item,\n  dayIndex,\n  classIndex,\n}) {\n  // toggle visibility of buttons\n  const [modalShow, setModalShow] = useState(false);\n  // object shift item is initialised with keys direction and dates to store data that will be passed into the nect component\n  const [shiftItem, setShiftItem] = useState({\n    direction: null,\n    dates: [],\n  });\n\n  // function that handles moving data from one day to another\n  const handleShift = (direction, dayIndex, classIndex) => {\n    // array that contains all the dates either before or after a selected date depending on direction chosen by user\n    let datesArray = [];\n\n    // item is being moved backwards in the schedule\n    if (direction === \"up\") {\n      // if bootcampData either an object or an array depending on wether the user is editing the main or individual schedule files, and needs to be processed accordingly\n      bootcampData.constructor === Object\n        ? Object.keys(bootcampData)\n            .filter(\n              (date) =>\n                bootcampData[date].courseDay < dayIndex + 1 &&\n                bootcampData[date].courseDay !== null\n            )\n            .map((date) => {\n              datesArray = addDates(datesArray, date);\n            })\n        : bootcampData\n            .filter((date) => bootcampData.indexOf(date) < dayIndex)\n            .map((date) => {\n              datesArray = addIndex(bootcampData, datesArray, date);\n            });\n\n      // data is put into object shift item\n      setShiftItem({\n        ...shiftItem,\n        direction: \"up\",\n        dates: datesArray,\n      });\n      // modal that takes user input to move item is shown\n      setModalShow(true);\n      // item is being moved forward in the schedule\n    } else if (direction === \"down\") {\n      bootcampData.constructor === Object\n        ? Object.keys(bootcampData)\n            .filter(\n              (date) =>\n                bootcampData[date].courseDay > dayIndex + 1 &&\n                bootcampData[date].courseDay !== null\n            )\n            .map((date) => {\n              datesArray = addDates(datesArray, date);\n            })\n        : bootcampData\n            .filter((date) => bootcampData.indexOf(date) > dayIndex)\n            .map((date) => {\n              datesArray = addIndex(bootcampData, datesArray, date);\n            });\n\n      setShiftItem({\n        ...shiftItem,\n        direction: \"down\",\n        dates: datesArray,\n      });\n\n      setModalShow(true);\n    } else {\n      // here the item is being deleted from the schedule\n      sectionType[classType].items.splice(classIndex, 1);\n      if (sectionType[classType].items.length === 0) {\n        delete sectionType[classType].items;\n      }\n      setBootcampData([...bootcampData]);\n      console.log('section type', sectionType[classType]);\n    }\n  };\n\n  return (\n    <div>\n      <div\n        className=\"class-item\"\n      >\n        {item.name}\n        \n          <div>\n            {/* remove item  */}\n            <button className=\"trash-can\" onClick={() => handleShift(\"delete\", dayIndex, classIndex)}>\n              <DeleteOutlinedIcon />\n            </button>\n            {/* move item backwards in the schedule  */}\n            <button onClick={() => handleShift(\"up\", dayIndex, classIndex)}>\n              <ExpandLessIcon />\n            </button>\n            {/* move item forward in the schedule  */}\n            <button onClick={() => handleShift(\"down\", dayIndex, classIndex)}>\n              <ExpandMoreIcon />\n            </button>\n          </div>\n        \n        {modalShow && (\n          // modal that is shown when the user clicks either of the above buttons\n          <ShiftItemModal\n            show={modalShow}\n            onHide={() => setModalShow(false)}\n            shiftitem={shiftItem}\n            bootcampdata={bootcampData}\n            setbootcampdata={setBootcampData}\n            sectiontype={sectionType}\n            classtype={classType}\n            classindex={classIndex}\n            section={section}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ClassItem;\n","import React from \"react\";\nimport ClassItem from \"./ClassItem\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nfunction SectionClass({\n  day,\n  sectionIndex,\n  sectionclass,\n  sectionType,\n  bootcampData,\n  setBootcampData,\n  section,\n  dayIndex,\n}) {\n\n  // helper function that maps each element in section array to a new course day\n  const shiftSection = (sectionArray, startDay, bootcampData) => {\n    sectionArray.forEach((element, index) => {\n      if (element !== null) {\n        if (\n          bootcampData[startDay + index].dateTypes[section][sectionclass]\n            .items\n        ) {\n          sectionArray[index].forEach((item) => {\n            bootcampData[startDay + index].dateTypes[section][\n              sectionclass\n            ].items.push(item);\n          });\n        } else {\n          bootcampData[startDay + index].dateTypes[section][\n            sectionclass\n          ].items = sectionArray[index];\n        }\n      }\n    });\n    return bootcampData;\n  };\n\n  const handleClassShift = (direction, dayIndex) => {\n    // puts all the items in selected class in an array and deletes them from their original position\n    const sectionArray = [];\n    for (let i = dayIndex; i < bootcampData.length - 1; i += 1) {\n      if (bootcampData[i].dateTypes[section][sectionclass].items) {\n        const selectedSection =\n          bootcampData[i].dateTypes[section][sectionclass].items;\n        sectionArray.push(selectedSection);\n        delete bootcampData[i].dateTypes[section][sectionclass].items;\n      } else {\n        sectionArray.push(null);\n      }\n    }\n\n    let startDay;\n    // when user clicks the down button, items are put into section/class of the next day\n    if (direction === \"down\") {\n      startDay = dayIndex + 1;\n    } else {\n      // when user clicks the up button, items are put into section/class of the previous day\n      startDay = dayIndex - 1;\n    }\n\n    bootcampData = shiftSection(sectionArray, startDay, bootcampData);\n    setBootcampData([...bootcampData]);\n  };\n\n  return (\n    <div>\n      {sectionType[sectionclass].items && (\n        <div className=\"section-class\">\n          <div className=\"class-title\">{sectionclass}</div>\n          <div className=\"class-items\">\n            {sectionType[sectionclass].items.map((item, classIndex) => {\n              return (\n                <ClassItem\n                  day={day}\n                  sectionclass={sectionclass}\n                  bootcampData={bootcampData}\n                  setBootcampData={setBootcampData}\n                  section={section}\n                  classType={sectionclass}\n                  sectionType={sectionType}\n                  item={item}\n                  dayIndex={dayIndex}\n                  classIndex={classIndex}\n                />\n              );\n            })}\n          </div>\n          <div\n            className=\"section-class-header\"\n  \n          >\n              <div>\n                <button\n                  onClick={() => handleClassShift(\"up\", dayIndex, sectionIndex)}\n                >\n                  <ExpandLessIcon />\n                </button>\n                <button\n                  onClick={() =>\n                    handleClassShift(\"down\", dayIndex, sectionIndex)\n                  }\n                >\n                  <ExpandMoreIcon />\n                </button>\n              </div>\n          \n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SectionClass;\n","import React from \"react\";\nimport SectionClass from \"./SectionClass\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction Section({\n  day,\n  setBootcampData,\n  section,\n  sectionType,\n  dayIndex,\n  bootcampData,\n}) {\n  // variable classExists is created to track if any class of a section exists (it is initially set to false)\n  // if any class of a section exists, classExists is set to true\n  // if classExists is true, a header for this section will be created\n  let classExists = false;\n  if (sectionType.constructor === Object) {\n    if (\n      sectionType.preClass.items ||\n      sectionType.inClass.items ||\n      sectionType.postClass.items ||\n      (sectionType === \"projects\" &&\n        (sectionType.projectDue.items || sectionType.projectStart.items)) ||\n      (sectionType === \"cp\" && sectionType.cpDue.items)\n    ) {\n      classExists = true;\n    }\n  }\n\n  return (\n    <div>\n      {sectionType.constructor === Object && (\n        <>\n          <Accordion>\n            {classExists && (\n              <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>{sectionType.type}</Accordion.Header>\n                <Accordion.Body>\n                  {Object.keys(sectionType)\n                    .filter((sectionClass) => sectionType[sectionClass].items)\n                    .map((sectionclass, sectionIndex) => {\n                      return (\n                        <div className=\"all-classes\">\n                          <SectionClass\n                            day={day}\n                            sectionIndex={sectionIndex}\n                            sectionclass={sectionclass}\n                            sectionType={sectionType}\n                            bootcampData={bootcampData}\n                            setBootcampData={setBootcampData}\n                            section={section}\n                            dayIndex={dayIndex}\n                          />\n                        </div>\n                      );\n                    })}\n                </Accordion.Body>\n              </Accordion.Item>\n            )}\n          </Accordion>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Section;\n","import React from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Section from \"./inner-accordion/Section\";\n\nfunction MainAccordion({\n  dayIndex,\n  bootcampData,\n  setBootcampData,\n  day,\n  setShowInputModal,\n  setCourseDate,\n  handleCloseAll,\n  setAccordionKey,\n  accordionKey\n  // fold,\n  // setFold,\n}) {\n  \n\n  const handlePlusClick = (day) => {\n    console.log(day);\n    setCourseDate(day);\n    setShowInputModal(true);\n  };\n\n  return (\n    <div>\n      {bootcampData[day].dateTypes.module && (\n        <Accordion key={accordionKey}>\n          <Accordion.Item eventKey={dayIndex}>\n            <Accordion.Header>\n              <div\n                className=\"course-day-symbol\"\n                onClick={() => handlePlusClick(day)}\n              >\n                {\" \"}\n                <AddIcon />\n              </div>\n              <div className=\"course-day-header\">\n                {bootcampData.constructor === Object ? (\n                  <>\n                    {day}, Week: {bootcampData[day].courseWeek}, Course Day:{\" \"}\n                    {bootcampData[day].courseDay},{\" \"}\n                    {bootcampData[day].dateTypes.module}{\" \"}\n                  </>\n                ) : (\n                  <>\n                    Course Day: {bootcampData[day].courseDay},{\" \"}\n                    {bootcampData[day].dateTypes.module}{\" \"}\n                  </>\n                )}\n              </div>\n            </Accordion.Header>\n            <Accordion.Body>\n              <div className=\"course-day\">\n                <div>\n                  {Object.keys(bootcampData[day].dateTypes).map(\n                    (section) => (\n                      <Section\n                        day={day}\n                        setBootcampData={setBootcampData}\n                        section={section}\n                        sectionType={bootcampData[day].dateTypes[section]}\n                        dayIndex={dayIndex}\n                        bootcampData={bootcampData}\n                      />\n                    )\n                  )}\n                </div>\n              </div>\n            </Accordion.Body>\n          </Accordion.Item>\n        </Accordion>\n      )}\n    </div>\n  );\n}\n\nexport default MainAccordion;\n","const download = (data, filename) => {\n        // from: https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\n        var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data));\n        var dlAnchorElem = document.createElement('a');\n        dlAnchorElem.setAttribute(\"href\",     dataStr     );\n        dlAnchorElem.setAttribute(\"download\", filename);\n        dlAnchorElem.click();\n    };\n\nexport default download;","import React, { useState } from \"react\";\nimport AddItemModal from \"./main-accordion/AddItemModal\";\nimport MainAccordion from \"./main-accordion/MainAccordion\";\nimport Button from \"react-bootstrap/Button\";\nimport download from \"../../download\";\n\nconst GenerateDataShiftContent = ({\n  bootcampData,\n  setBootcampData,\n  mainFile,\n  batchFile\n}) => {\n  const [showInputModal, setShowInputModal] = useState(false);\n  const [courseDate, setCourseDate] = useState(\"\");\n  // used in the close all functionality\n  const [accordionKey, setAccordionKey] = useState(1234);\n\n  // function that handles download of main data file after edits\n  const handleDownloadMainClick = async () => {\n    download(mainFile, \"modified-main-data-file.json\");\n  };\n\n  // function that handles download of individual batch data file after edits\n  const handleBatchDownloadClick = () => {\n    download(\n      batchFile,\n      `modified-${batchFile.courseName}-file.json`\n    );\n  };\n\n  // state set so that rerender occurs\n  const handleCloseAll = () => {\n    const newAccordionKeyValue = accordionKey + 1;\n    setAccordionKey(newAccordionKeyValue);\n  }\n\n  return (\n    <>\n      {/* renders batch schedule data file  */}\n      {bootcampData.constructor === Object &&\n        Object.keys(bootcampData).length > 0 && (\n          <div>\n            <div className=\"download-button-container\">\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={handleBatchDownloadClick}\n              >\n                Download Modified Batch File\n              </Button>\n            </div>\n            <div className=\"close-all-container\">\n              <Button onClick={handleCloseAll}>close all</Button>\n            </div>\n            {Object.keys(bootcampData).map((day, dayIndex) => {\n              return (\n                <>\n                <div>\n                  <MainAccordion\n                    dayIndex={dayIndex}\n                    bootcampData={bootcampData}\n                    setBootcampData={setBootcampData}\n                    day={day}\n                    setShowInputModal={setShowInputModal}\n                    setCourseDate={setCourseDate}\n                    handleCloseAll={handleCloseAll}\n                    accordionKey={accordionKey}\n                    setAccordionKey={setAccordionKey}\n                  />\n                </div>\n                </>\n              );\n            })}\n            {/* modal that takes in user input to create a new item in the schedule  */}\n            {showInputModal && courseDate && (\n              <AddItemModal\n                show={showInputModal}\n                onHide={() => setShowInputModal(false)}\n                bootcampdata={bootcampData}\n                setbootcampdata={setBootcampData}\n                setShowInputModal={setShowInputModal}\n                coursedate={courseDate}\n              />\n            )}\n          </div>\n        )}\n      {/* displays main data file  */}\n      {bootcampData.constructor === Array && (\n        <div className=\"accordion-container\">\n          <div className=\"download-button-container\">\n            <button\n              className=\"btn btn-primary\"\n              onClick={handleDownloadMainClick}\n            >\n              download modified file\n            </button>\n          </div>\n          <div className=\"close-all-container\">\n            <Button onClick={handleCloseAll}>Close All</Button>\n          </div>\n          {bootcampData.map((day, dayIndex) => {\n            return (\n              <MainAccordion\n                dayIndex={dayIndex}\n                bootcampData={bootcampData}\n                setBootcampData={setBootcampData}\n                day={dayIndex}\n                setShowInputModal={setShowInputModal}\n                setCourseDate={setCourseDate}\n                handleCloseAll={handleCloseAll}\n                    accordionKey={accordionKey}\n                    setAccordionKey={setAccordionKey}\n              />\n            );\n          })}\n          {showInputModal && courseDate && (\n            <AddItemModal\n              show={showInputModal}\n              onHide={() => setShowInputModal(false)}\n              bootcampdata={bootcampData}\n              setbootcampdata={setBootcampData}\n              setShowInputModal={setShowInputModal}\n              coursedate={courseDate}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateDataShiftContent;\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\n\n// side navbar that displays links to all batch schedules in batchArray\nfunction ActiveCourses({ batchArray, setBootcampData, setBatchFile }) {\n  const handleSelectClick = (batch) => {\n     setBootcampData(\n      JSON.parse(JSON.stringify(batch.content.days))\n    )\n    setBatchFile(\n      JSON.parse(JSON.stringify(batch.content))\n    )\n  };\n\n  return (\n    <div>\n      <h4>Batches</h4>\n      <Nav variant=\"pills\" className=\"flex-column \">\n        {/* a link is rendered for each element in batchArray */}\n        {batchArray.map((batch, index) => {\n          return (\n            <Nav.Link\n              // when a link is clicked , the content of the selected batch file is rendered\n              onClick={() =>\n                handleSelectClick(batch)\n              }\n              eventKey={index}\n            >\n              {batch.name}\n            </Nav.Link>\n          );\n        })}\n      </Nav>\n    </div>\n  );\n}\n\nexport default ActiveCourses;\n","import { DateTime } from 'luxon';\nimport holidayData from './data/2021-sg-stat-holidays.json';\nimport basicsData from './data/basics-course-days.json';\nimport bootcampData from './data/bootcamp-course-days.json';\n\nconst publicHolidays = holidayData.PH;\nconst publicHolidayArray = [];\n// get array of all public holiday dates\nObject.keys(publicHolidays).map((key, index) => {\n    publicHolidayArray.push(key);\n});\n\nconst companyHolidays = holidayData.company;\nconst companyHolidayArray = [];\nconst winterBreak = [];\n// get array of all company holiday dates\nObject.keys(companyHolidays).map((key, index) => {\n    companyHolidayArray.push(key);\n    // get array of winter break dates\n    if(companyHolidays[key].name === 'winter break') {\n        winterBreak.push(companyHolidays[key].date);\n    }\n});\n\nconst phWithoutCh = [];\n// get array of public holidays not including those included in winter break\npublicHolidayArray.forEach((holiday) => {\n    if(!companyHolidayArray.includes(holiday)) {\n        phWithoutCh.push(holiday);\n    }\n});\n\n// helper function for getting utc date/time\nconst getLocalDateTime = (utc, timeString, courseName, courseType, date) => {\n    const changedFormat = date.toFormat(\"yyyy-MM-dd\");\n    if (courseType === 'Basics') {\n        utc = DateTime.fromISO(changedFormat + timeString, {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp FT' && Number(courseName) % 2 === 0) {\n        utc = DateTime.fromISO(changedFormat + 'T13:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if ((courseType === 'Bootcamp FT' && Number(courseName) % 2 !== 0) || (courseType === 'Bootcamp PT' && (date.weekday === 6))) {\n        utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp PT' && (date.weekday === 1)) {\n        utc = DateTime.fromISO(changedFormat + 'T19:30', {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp PT' && (date.weekday === 6)) {\n        utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n    }\n    return utc;\n}\n\n// helper function for deciding what goes in topLevelObject based on course type\nconst generateTopLevelObject = (courseType, topLevelObject) => {\n        if (courseType === 'Basics') {\n            topLevelObject = {\n                daysOfWeek: basicsData.daysOfWeek,\n                courseStartIndex: basicsData.courseStartIndex,\n                totalCourseDays: basicsData.totalCourseDays,\n                ...topLevelObject\n            };\n        } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            let bootcampDays;\n            let startIndex;\n            if (courseType === 'Bootcamp FT') {\n                bootcampDays = bootcampData.daysOfWeek.fullTime;\n                startIndex = bootcampData.courseStartIndex.fullTime;\n            } else {\n                bootcampDays = bootcampData.daysOfWeek.partTime;\n                startIndex = bootcampData.courseStartIndex.partTime;\n            }\n            topLevelObject = {\n                daysOfWeek: bootcampDays,\n                courseStartIndex: startIndex,\n                totalCourseDays: bootcampData.totalCourseDays,\n                ...topLevelObject\n            }\n        }\n\n        return topLevelObject;\n    }\n\n// helper function that generates dateObj if the course date falls on a public holiday\nconst generateHolidayObject = (dateString, week, date, dateObj) => {\n    dateObj = {\n        courseDay: null,\n        courseDate: dateString,\n        courseWeek: week,\n        dayNumber: date.weekday,\n        dateTypes: {}\n    }\n\n    if (phWithoutCh.includes(dateString)) {\n        dateObj.dateTypes = publicHolidays[dateString];\n    } else {\n        dateObj.dateTypes = companyHolidays[dateString];\n    }\n\n    return dateObj;\n}\n\n// helper function that generates dateObj for a normal courseday\nconst generateCourseDayObject = (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay) => {\n    // get whatever index of basicsData that is specified by courseDayCount\n    dateObj = {\n        courseDate: dateString,\n        courseWeek: week,\n        weekDay: weekDay,\n        dayNumber: date.weekday,\n        meetingDateTimeUTC: utc,\n        };\n\n    // data is different for basics and bootcamp\n    if (courseType === 'Basics') {\n        dateObj = {\n            ...dateObj, ...basicsData.days[courseDay]\n        }\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            dateObj = {\n            ...dateObj, ...bootcampData.days[courseDay]\n        }\n    }\n    return dateObj;\n}\n\n// ##################################################################\n// ##################################################################\n\nconst generateDataObject = (startDate, courseName, courseType) => {\n    let date = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let utc;\n    utc = getLocalDateTime(utc, 'T16:00', courseName, courseType, date);\n    let dateWeek = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let classDatesCount = 1;\n    let week = 1;\n    let weekDay = 1;\n    let data;\n    let courseDayCount;\n    // starts from 0 because it's tracking the index of the json data file\n    let courseDay = 0;\n\n    let topLevelObject = {\n            courseType: courseType,\n            days: {}\n        };\n\n    data = generateTopLevelObject(courseType, topLevelObject);\n\n    // set the number of course days based on course type\n    if (courseType === 'Basics') {\n        courseDayCount = 13;\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n        courseDayCount = 115;\n    }\n\n    const dayArray = data.daysOfWeek;\n    let dayIndex = data.courseStartIndex;\n\n    while (courseDayCount > 0) {\n        const dateString = date.toFormat('dd-MM-yyyy');\n\n        // setting filename from start date, end date, courseName of course \n        // if this consition is met, dateString will be the end date of course\n        if (courseDay + 1 === data.totalCourseDays) {\n            // start date\n            const displayDate = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n            const displayName = `${displayDate.toFormat('dd-MM-yyyy')}_${dateString}_BATCH${courseName}`;\n            data.courseName = displayName;\n        }\n\n        let dateObj;\n        // if date is a public holiday\n        if (phWithoutCh.includes(dateString) || winterBreak.includes(dateString)) {\n            dateObj = generateHolidayObject (dateString, week, date, dateObj);\n\n        // if date is not a holiday\n        } else {\n            dateObj = generateCourseDayObject (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay);\n\n            // increase course days on days that classes are held,\n            // DO NOT increase course days on holidays\n            courseDayCount -= 1;\n            courseDay += 1;\n        }\n        data.days[dateString] = dateObj;\n\n        \n        if (classDatesCount === data.totalCourseDays && courseType === 'Basics') {\n            date = date.plus({ days: 2 }); \n            utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n            weekDay += 1;\n            week += 1;\n\n        } else {\n            // this is the end of the dayArray (last day of the week)\n            if ( dayIndex === dayArray.length -1) {\n                weekDay = 1;\n                week += 1;\n                dateWeek = dateWeek.plus({ weeks: 1 });\n                // return to beginning of array (return to beginning of week)\n                dayIndex = 0;\n                date = date.plus({ weeks: 1 }).set({ weekday: dayArray[dayIndex] })\n                utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n\n            } else {\n                // day with the week\n                dayIndex += 1;\n                date = date.set({ weekday: dayArray[dayIndex] })\n                utc = getLocalDateTime (utc, 'T13:00', courseName, courseType, date);\n\n                if (!phWithoutCh.includes(dateString)) {\n                    weekDay += 1;\n                }\n            }\n        }\n        // increase classDatesCount regardless of whether it is a public holiday\n        classDatesCount += 1;\n    }\n\n    return data;\n}\n\nexport default generateDataObject;","import React from \"react\";\nimport { DateTime } from \"luxon\";\n\n// helper function that generates course day header for a normal course day\nconst NormalCourseDay = ({ todaySectionHeader, day, timeZoneSet, id }) => {\n  localDate = DateTime.fromISO(day.meetingDateTimeUTC, { zone: timeZoneSet });\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  meetingTime = localDate.toFormat(\"t\");\n  timeOffset = localDate.toFormat(\"ZZZZ\");\n  timeZone = localDate.toFormat(\"z\");\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header-div\">\n          <div className=\"main-header\">\n            {!todaySectionHeader ? (\n              <h3 className=\"day-header\">\n                {formattedDate}, Week {day.courseWeek}, Course Day{\" \"}\n                {day.courseDay}\n              </h3>\n            ) : (\n              <h3 className=\"day-header\">{formattedDate}</h3>\n            )}\n          </div>\n          <p>\n            Meeting Time: {meetingTime} SGT ({timeOffset})\n          </p>\n          <p>{day.dateTypes.module}</p>\n        </div>\n      )}\n    </>\n  );\n};\n\n// helper function that generates courseday header for a holiday\nconst HolidayCourseDay = ({ todaySectionHeader, day, timeZoneSet, id }) => {\n  localDate = DateTime.fromFormat(day.courseDate, \"dd-MM-yyyy\");\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  timeZone = localDate.toFormat(\"z\");\n  // depending on if the holiday is a public/company holiday,\n  // a different output will be rendered\n  if (day.dateTypes.holidayType === \"public holiday\") {\n    holiday = `Public Holiday (${day.dateTypes.name})`;\n  } else {\n    holiday = `Company Holiday (${day.dateTypes.name})`;\n  }\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header\">\n          <h2>\n            {formattedDate}: {day.dateTypes.location} {holiday}\n          </h2>\n        </div>\n      )}\n    </>\n  );\n};\n\nlet localDate;\nlet formattedDate;\nlet meetingTime;\nlet timeZone;\nlet timeOffset;\nlet holiday;\n\n// ######################################################\n// ######################################################\n\n// function that generates the header for each course day\nconst GenerateCourseDayHeader = ({ todaySectionHeader, day, coursetype }) => {\n  // this is the timezone of the area we are in\n  const timeZoneSet = \"Asia/Singapore\";\n\n  if (day.meetingDateTimeUTC) {\n    return (\n      <NormalCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n      />\n    );\n  } else {\n    return (\n      <HolidayCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n      />\n    );\n  }\n};\n\nexport default GenerateCourseDayHeader;\n","import React, { useState } from \"react\";\nimport generateDataObject from \"../../../generateCourseDates.js\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport download from \"../../../download.js\";\n\nconst DatePicker = ({ setBootcampData }) => {\n  // inputs from user used to generate course data\n  const [startDate, setStartDate] = useState(\"\");\n  const [courseName, setCourseName] = useState(\"\");\n  const [courseType, setCourseType] = useState(\"\");\n\n  // function that generates and downloads schedule data when download button is clicked\n  const handleDownload = async (e) => {\n    try {\n      const data = await generateDataObject(startDate, courseName, courseType);\n      download(data, `${data.courseName}.json`);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // function that generates and renders schedule data when button is clicked\n  const handleRender = async (e) => {\n    try {\n      const data = await generateDataObject(startDate, courseName, courseType);\n      await setBootcampData(JSON.parse(JSON.stringify(data.days)));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"date-picker\">\n        <div>\n          <h2>Generate Schedule Data File</h2>\n        </div>\n        <div className=\"input-form-container\">\n          <Form className=\"input-form\">\n            <Form.Group className=\"mb-3 input\" controlId=\"formDate\">\n              <Form.Label>Start Date</Form.Label>\n              <Form.Control\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Batch Number</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={courseName}\n                onChange={(e) => setCourseName(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Course Type</Form.Label>\n              <Form.Select\n                aria-label=\"Default select example\"\n                onChange={(e) => setCourseType(e.target.value)}\n              >\n                <option>Select course type</option>\n                <option value=\"Basics\">Basics</option>\n                <option value=\"Bootcamp FT\">Bootcamp FT</option>\n                <option value=\"Bootcamp PT\">Bootcamp PT</option>\n              </Form.Select>\n            </Form.Group>\n          </Form>\n          <div className=\"submit-button-container\">\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={(e) => {\n                handleRender(e);\n              }}\n            >\n              Render Schedule\n            </Button>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={(e) => {\n                handleDownload(e);\n              }}\n            >\n              Download Schedule\n            </Button>\n          </div>\n          <br></br>\n          <div>\n            <a href=\"https://github.com/rocketacademy/scheduler\">\n              link to GitHub repo\n            </a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DatePicker;\n","import React from \"react\";\nimport GenerateDataShiftContent from \"../GenerateDataShiftContent\";\nimport ActiveCourses from \"./ActiveCourses.jsx\";\nimport DatePicker from \"./DatePicker.jsx\";\n\nconst DataShift = ({ batchArray, bootcampData, setBootcampData, setBatchFile, batchFile }) => {\n \n  return (\n    <>\n      <div className=\"datashift-container\">\n        <div className=\"all-courses-navbar\">\n          {/* this component contains links to indivudual batch schedules to be rendered and edited */}\n          <ActiveCourses\n            batchArray={batchArray}\n            setBootcampData={setBootcampData}\n            setBatchFile={setBatchFile}\n          />\n        </div>\n        <div className=\"data-shift\">\n          <div className=\"data-container\">\n            {/* this component generates a course schedule based on start date and course type from the main json data file */}\n            <DatePicker\n              bootcampData={bootcampData}\n              setBootcampData={setBootcampData}\n            />\n            {/* this component allows the user to edit the schedule rendered */}\n            <GenerateDataShiftContent\n              batchArray={batchArray}\n              bootcampData={bootcampData}\n              setBootcampData={setBootcampData}\n              batchFile={batchFile}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DataShift;\n","import React, { useState, useEffect } from \"react\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport DataShift from \"./data-shift/DataShift\";\nimport mainDataFile from \"../../data/bootcamp-course-days.json\";\nimport GenerateDataShiftContent from \"./GenerateDataShiftContent\";\n\nconst TabsContainer = ({ batchArray }) => {\n  const [key, setKey] = useState(\"datePicker\");\n  // remains empty until user picks/ generates schedule to edit. this is the days section of the batch data file\n  const [batchDays, setBatchDays] = useState({});\n  // this is the whole data file\n  const [batchFile, setBatchFile] = useState({});\n\n  // this is the main bootcamp data json file that has not been mapped onto any dates\n  const [mainFile, setMainFile] = useState(\n    JSON.parse(JSON.stringify(mainDataFile))\n  );\n  // this is the course days section of the bootcamp data json file  \n  const [mainDays, setMainDays] = useState(\n    JSON.parse(JSON.stringify(mainDataFile.days))\n  );\n\n  // update main file every time days key changes\n  useEffect(() => {\n    setMainFile({...mainFile, days: mainDays})\n  }, [mainDays]);\n\n  // update batch file everytime days key changes\n  useEffect(() => {\n    setBatchFile({...batchFile, days: batchDays});\n  }, [batchDays])\n\n  return (\n    <div class=\"container\">\n    <Tabs\n      id=\"controlled-tab-example\"\n      activeKey={key}\n      onSelect={(k) => setKey(k)}\n      className=\"\"\n    >\n      {/* this tab contains the component for editing the main data file */}\n      <Tab eventKey=\"datePicker\" title=\"Main\">\n        <GenerateDataShiftContent\n          bootcampData={mainDays}\n          setBootcampData={setMainDays}\n          mainFile={mainFile}\n          setMainFile={setMainFile}\n        />\n      </Tab>\n      {/* this tab contains the component for generating/ editing individual batch schedules */}\n      <Tab eventKey=\"dataShift\" title=\"Batch\">\n        <DataShift\n          batchArray={batchArray}\n          bootcampData={batchDays}\n          setBootcampData={setBatchDays}\n          setBatchFile={setBatchFile}\n          batchFile={batchFile}\n        />\n      </Tab>\n    </Tabs>\n    </div>\n  );\n};\n\nexport default TabsContainer;\n","export default __webpack_public_path__ + \"static/media/4-MILK.46ae71aa.png\";","import React from \"react\";\n\n// displays items in a section's classes\nfunction DisplaySection({ heading, sectionType, day }) {\n  return (\n    <div>\n      <h6>{heading}</h6>\n      <ul>\n        {sectionType.map((item, index) => {\n          let id;\n          // id used for scrollTo function of sidebar modules\n          if (heading === \"Pre Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpc-${index}`;\n          } else if (heading === \"In Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gic-${index}`;\n          } else {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpostc-${index}`;\n          }\n\n          return (\n            <>\n              {item.url && (\n                <li id={id}>\n                  <a href={item.url}>{item.name}</a>\n                </li>\n              )}\n              {!item.url && <li>{item.name}</li>}\n            </>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default DisplaySection;\n","import React from \"react\";\nimport DisplaySection from \"./DisplaySection\";\n\n// if sections project due/ project start/ cp due exist in a course day,\n// this function will generate a header and content for these sections\nconst GenerateNotifications = ({\n  status,\n  projectdue,\n  cpdue,\n  projectstart,\n  day,\n}) => {\n  let heading;\n\n  // generates header for the section\n  if (status) {\n    if (status.items) {\n      if (status === projectdue) {\n        heading = \"Project Due\";\n      } else if (status === projectstart) {\n        heading = \"Project Start\";\n      } else if (status === cpdue) {\n        heading = \"Inteview Prep due\";\n      }\n    }\n  }\n\n  return (\n    <>\n      {status && status.items && (\n        <div className=\"notifications\">\n          <DisplaySection\n            heading={heading}\n            sectionType={status.items}\n            day={day}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateNotifications;\n","const generateSectionArray = (datetype, classType, sectionArray) => {\n    Object.keys(datetype).forEach((section) => {\n        let classTypeSection;\n    // classTypeSection is determined by what classType is\n        if (classType === 'preClass') {\n            classTypeSection = datetype[section].preClass;\n        } else if (classType === 'inClass') {\n            classTypeSection = datetype[section].inClass;\n        } else {\n            classTypeSection = datetype[section].postClass;\n        } \n\n        if (classTypeSection) {\n            // if there are items in classTypeSection, the items are pushed into sectionArray\n            if (classTypeSection.items) {\n                for (let x = 0; x < classTypeSection.items.length; x += 1) {\n                    sectionArray.push(classTypeSection.items[x]);\n                }\n            }\n        }\n    })\n    return sectionArray;\n}\n\nexport default generateSectionArray;","import React from 'react';\nimport DisplaySection from './DisplaySection';\nimport generateSectionArray from '../../generateSectionArray';\n\n\nfunction GenerateDatetypeSections ({ \n                                datetype, \n                                classType, \n                                day \n                                }) { \n    // stores items that are in a particular section of a datetype\n    const sectionArray = [];\n\n    generateSectionArray(datetype, classType, sectionArray);\n\n    // sets the heading depending on the classtype\n    let heading;\n    if (sectionArray.length > 0) {\n           // a header will be created \n        if (classType === 'preClass') {\n            heading ='Pre Class';\n        } else if (classType === 'inClass') {\n            heading = 'In Class';\n        } else {\n            heading = 'Post Class';\n        }\n    }\n\n    return (\n        <div>\n            <DisplaySection \n                        heading={heading} \n                        sectionType={sectionArray} \n                        day={day}\n                        />\n        </div>\n    )\n}\n\nexport default GenerateDatetypeSections\n","import React from \"react\";\nimport GenerateNotifications from \"./GenerateNotifications\";\nimport GenerateDatetypeSections from \"./GenerateDatetypeSections\";\n\n// generates the content and section headings for each course day\nconst GenerateCourseDayContent = ({ day }) => {\n  const projectdue = day.dateTypes.projects.projectDue;\n  const projectstart = day.dateTypes.projects.projectStart;\n  const cpdue = day.dateTypes.cp.cpDue;\n\n  return (\n    <>\n      {/* project due notification  */}\n      <GenerateNotifications\n        status={projectdue}\n        cpdue={cpdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      {/* career prep due notification  */}\n      <GenerateNotifications\n        status={cpdue}\n        cpdue={cpdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      {/* preclass section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"preClass\"\n        day={day}\n      />\n      {/* in class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"inClass\"\n        day={day}\n      />\n      {/* post class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"postClass\"\n        day={day}\n      />\n      {/* project start notification  */}\n      <GenerateNotifications\n        status={projectstart}\n        cpdue={cpdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n    </>\n  );\n};\n\nexport default GenerateCourseDayContent;\n","import React from 'react'\n\n// renders items in a section\nfunction TableSectionContent({ sectionArray }) {\n    return (\n        <ul>\n        {sectionArray.map((item) => {\n            \n            return (\n                <>\n                {item.url && (\n                    <li>\n                        <a href={item.url}>{item.name}</a>\n                    </li>\n                )}\n                {!item.url && (\n                    <li>\n                        {item.name}\n                    </li>\n                )}\n                </>\n            )\n        })}\n        </ul>\n    )\n}\n\nexport default TableSectionContent\n","import React from 'react';\nimport generateSectionArray from '../../../generateSectionArray';\nimport TableSectionContent from './TableSectionContent';\n\n// renders in class/ preclass section of table\nfunction TableClass({ day, \n                      sectionClass\n                     }) {\n\n    const classArray = [];\n    const datetype = day.dateTypes;\n\n    // gets all items in a particular section\n    generateSectionArray(datetype, sectionClass, classArray);\n\n    return (\n        <td>\n            <TableSectionContent sectionArray={classArray} />\n        </td>\n    )\n}\n\nexport default TableClass\n","import React from 'react';\nimport GenerateNotifications from '../GenerateNotifications';\n\n// renders projects section of table\nfunction TableProjects({ day }) {\n    const projectdue = day.dateTypes.projects.projectDue;\n    const projectstart = day.dateTypes.projects.projectStart;\n    const cpdue = day.dateTypes.cp.cpDue;\n\n    return (\n        <div className=\"table-projects\">\n            <GenerateNotifications status={projectdue} \n                               cpdue={cpdue} \n                               projectdue={projectdue} \n                               projectstart={projectstart} \n                               day={day}\n                               />\n            <GenerateNotifications status={projectstart} \n                               cpdue={cpdue} \n                               projectdue={projectdue} \n                               projectstart={projectstart} \n                               day={day}\n                               />\n        </div>\n    )\n}\n\nexport default TableProjects\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport Table from \"react-bootstrap/Table\";\nimport { DateTime } from \"luxon\";\nimport TableClass from \"./TableClass\";\nimport TableProjects from \"./TableProjects\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction ScheduleTable({ weekNumbers, tableData, coursetype, today }) {\n  return (\n    <>\n      <Accordion.Header>\n        <h5>\n          {/* header shows different info depending on date and coursetype  */}\n          {coursetype === \"ft\" &&\n            today.toFormat(\"dd-MM-yyyy\") ===\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>\n                Current Course Week:{\" \"}\n                {weekNumbers.map((num) => {\n                  return <span>{num}</span>;\n                })}\n              </>\n            )}\n          {coursetype === \"ft\" &&\n            today.toFormat(\"dd-MM-yyyy\") !==\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>\n                Next Course Week:{\" \"}\n                {weekNumbers.map((num) => {\n                  return <span>{num}</span>;\n                })}\n              </>\n            )}\n          {coursetype === \"pt\" &&\n            today.toFormat(\"dd-MM-yyyy\") ===\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>Current Month's Schedule</>\n            )}\n        </h5>\n      </Accordion.Header>\n      <Accordion.Body>\n        <Table bordered hover size=\"sm\">\n          <thead>\n            <tr>\n              <th></th>\n              <th>Projects</th>\n              <th>Pre Class</th>\n              <th>In Class</th>\n              <th>Post Class</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tableData.map((date, index) => {\n              // getting the formatted date that will be shown in the table\n              const formattedDate = DateTime.fromFormat(\n                date.courseDate,\n                \"dd-MM-yyyy\"\n              ).toFormat(\"EEE d MMM\");\n              // getting the id that links formattedDate to element in main content page\n              const id = `${coursetype}-week-${date.courseWeek}-day-${date.dayNumber}`;\n\n              return (\n                <tr\n                  className={\n                    today.toFormat(\"dd-MM-yyyy\") ===\n                      DateTime.now().toFormat(\"dd-MM-yyyy\") &&\n                    date.courseDate === today.toFormat(\"dd-MM-yyyy\")\n                      ? \"table-secondary\"\n                      : null\n                  }\n                >\n                  <td\n                    // library react-scroll used to scroll to an element with matching id on main page\n                    className=\"table-date\"\n                  >\n                    <h6\n                      onClick={() =>\n                        scroller.scrollTo(id, {\n                          smooth: true,\n                          offset: -70,\n                          duration: 100,\n                        })\n                      }\n                    >\n                      {formattedDate}\n                    </h6>\n                    <p>\n                      Week {date.courseWeek}\n                      <br></br>Course Day {date.courseDay}\n                    </p>\n                  </td>\n                  {/* getting data for projects section of table */}\n                  <td>\n                    <TableProjects day={tableData[index]} />\n                  </td>\n                  {/* getting data for preclass and inclass section of table */}\n                  <TableClass day={tableData[index]} sectionClass=\"preClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"inClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"postClass\" />\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Accordion.Body>\n    </>\n  );\n}\n\nexport default ScheduleTable;\n","// function that generates data required for rendering schedule table\nconst generateTableData = (scheduleData, coursetype, weekNumbers, tableData, setWeekNumbers, setTableData, today ) => {\n  let firstDay;\n  let moveDate;\n  let lastDay;\n  let firstDayMonth;\n  let lastDayMonth;\n  let moveDateMonth;\n  weekNumbers = [];\n  // shows current month for part time bootcamp\n  firstDayMonth = today.startOf(\"month\");\n  lastDayMonth = today.endOf(\"month\");\n\n  // shows current week for full time bootcamp\n  firstDay = today.startOf(\"week\");\n  lastDay = today.endOf(\"week\");\n\n  moveDate = firstDay;\n  const weekDatesArray = [];\n  // getting all the dates between first day and last day of week inclusive and storing them in an array\n  while (moveDate <= lastDay) {\n    weekDatesArray.push(moveDate.toFormat(\"dd-MM-yyyy\"));\n    moveDate = moveDate.plus({ days: 1 });\n  }\n\n  moveDateMonth = firstDayMonth;\n\n  const monthDatesArray = [];\n  if (coursetype === \"pt\") {\n    // getting all the dates between first day and last day of week inclusive and storing them in an array\n    while (moveDateMonth <= lastDayMonth) {\n      monthDatesArray.push(moveDateMonth.toFormat(\"dd-MM-yyyy\"));\n      moveDateMonth = moveDateMonth.plus({ days: 1 });\n    }\n  }\n\n  const currentWeekData = [];\n  const currentMonthData = [];\n\n  // getting the data (object) for each individual day of the month (used for pt schedule table)\n  if (coursetype === \"pt\") {\n    for (let i = 0; i < monthDatesArray.length; i += 1) {\n      Object.keys(scheduleData).map((day) => {\n        if (day === monthDatesArray[i]) {\n          currentMonthData.push(scheduleData[day]);\n        }\n      });\n    }\n    setTableData(currentMonthData);\n  } else {\n    // getting the data (object) for each individual day of the week\n  for (let i = 0; i < weekDatesArray.length; i += 1) {\n    Object.keys(scheduleData).map((day) => {\n      if (day === weekDatesArray[i]) {\n        currentWeekData.push(scheduleData[day]);\n      }\n    });\n  }\n    setTableData(currentWeekData);\n  }\n\n  \n  // getting the week's courseWeek that the indicator will point to\n  weekDatesArray.forEach((date) => {\n    if (\n      scheduleData[date] &&\n      !weekNumbers.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumbers.push(scheduleData[date].courseWeek);\n    }\n  });\n  setWeekNumbers(weekNumbers);\n\n  console.log('week numbers', weekNumbers);\n  console.log('table data', tableData);\n\n  // // indicates whether or not courseweek and course day is shown on the courseday header\n  // const todaySectionHeader = true;\n\n  // // creating ids for scrollTo function for top section\n  // const currentDayId = `${coursetype}-week-${scheduleData[nextDay].courseWeek}-day-${scheduleData[nextDay].dayNumber}`;\n  // const previousDayId = `${coursetype}-week-${scheduleData[previousDay].courseWeek}-day-${scheduleData[previousDay].dayNumber}`;\n\n}\n\nexport default generateTableData;","import React, { useEffect, useState } from \"react\";\nimport ScheduleTable from \"./ScheduleTable\";\nimport generateTableData from \"../../../generateTableData\";\n\nconst ContentTable = ({ scheduleData, coursetype, startDay }) => {\n  const [weekNumbers, setWeekNumbers] = useState();\n  const [tableData, setTableData] = useState();\n\n  useEffect(() => {\n    generateTableData(\n      scheduleData,\n      coursetype,\n      weekNumbers,\n      tableData,\n      setWeekNumbers,\n      setTableData,\n      startDay\n    );\n  }, [scheduleData]);\n\n  return (\n    <div className=\"schedule-table\">\n      {/* table which displays current week's/ month's content based on course type */}\n      {weekNumbers && tableData && (\n        <ScheduleTable\n          weekNumbers={weekNumbers}\n          tableData={tableData}\n          coursetype={coursetype}\n          today={startDay}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ContentTable;\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport GenerateCourseDayHeader from \"../GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"../GenerateCourseDayContent\";\nimport GenerateDatetypeSections from \"../GenerateDatetypeSections\";\n\n// helper function that finds previous course day\nconst findPreviousDay = (scheduleData, today, coursetype) => {\n  let dayBefore;\n\n  if (coursetype === \"ft\") {\n    if (today.weekday === 1) {\n      dayBefore = today.plus({ days: -3 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      dayBefore = today.plus({ days: -2 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.plus({ days: -1 }).toFormat('dd-MM-yyyy');\n    }\n  } else if (coursetype === \"pt\") {\n    if (today.weekday === 1) {\n      dayBefore = today\n        .plus({ weeks: -1 })\n        .set({ weekday: 6 })\n        .toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday > 1 && today.weekday <= 6) {\n      dayBefore = today.set({ weekday: 1 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    }\n  }\n\n  if (scheduleData[dayBefore].dateTypes.holidayType) {\n    dayBefore = findPreviousDay(scheduleData, dayBefore, coursetype);\n  }\n\n  return dayBefore;\n};\n\n//helper funcyion that finds next course day\nconst findNextDay = (scheduleData, today, coursetype) => {\n  let nextDay;\n\n  if (coursetype === \"ft\") {\n    console.log(today.weekday);\n    if (today.weekday === 6) {\n      nextDay = today.plus({ days: 2 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      nextDay = today.plus({ days: 1}).toFormat('dd-MM-yyyy');\n    } else {\n      nextDay = today.toFormat(\"dd-MM-yyyy\");\n    }\n  } else if (coursetype === \"pt\") {\n    if (today.weekday === 1) {\n      nextDay = today.toFormat('dd-MM-yyyy');\n    } else if (today.weekday > 1 && today.weekday <= 6) {\n      nextDay = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      nextDay = today.plus({ days: 1 }).toFormat(\"dd-MM-yyyy\");\n    }\n  }\n\n  console.log('next day', nextDay);\n  console.log(scheduleData[nextDay]);\n  if (scheduleData[nextDay].dateTypes.holidayType) {\n    nextDay = findNextDay(scheduleData, nextDay, coursetype);\n  }\n\n  return nextDay;\n};\n// ##############################################################################\n\nfunction CurrentDaySection({ scheduleData, coursetype, today }) {\n  // indicates whether or not courseweek and course day is shown on the courseday header\n  const todaySectionHeader = true;\n  let previousDay;\n  let nextDay;\n\n  // finds previous course day\n  previousDay = findPreviousDay(scheduleData, today, coursetype);\n\n  // find the next day if current day is not a course day\n  nextDay = findNextDay(scheduleData, today, coursetype);\n\n  // creating ids for scrollTo function for top section\n  const currentDayId = `${coursetype}-week-${scheduleData[nextDay].courseWeek}-day-${scheduleData[nextDay].dayNumber}`;\n  const previousDayId = `${coursetype}-week-${scheduleData[previousDay].courseWeek}-day-${scheduleData[previousDay].dayNumber}`;\n\n  return (\n    <div>\n      <div className=\"today-date\">\n        {nextDay && previousDay && (\n          <>\n            <div>\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[nextDay]}\n                coursetype={coursetype}\n              />\n            </div>\n            <div className=\"main-header-course-day\">\n              <h5>\n                Current Course Day:{\" \"}\n                {/* shows either today's content or next course day's content depending on if today's content exists  */}\n                {scheduleData[today.toFormat(\"dd-MM-yyyy\")] ? (\n                  <span>\n                    {scheduleData[today.toFormat(\"dd-MM-yyyy\")].courseDay}\n                  </span>\n                ) : (\n                  <span> {scheduleData[nextDay].courseDay}</span>\n                )}\n              </h5>\n            </div>\n            <div className=\"top-content-container\">\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(currentDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Current Course Day:\n                  </h5>\n                  <br></br>\n                  <GenerateCourseDayContent day={scheduleData[nextDay]} />\n                </>\n              </div>\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(previousDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Previous Course Day:\n                  </h5>\n                  <br></br>\n                  <GenerateDatetypeSections\n                    datetype={scheduleData[previousDay].dateTypes}\n                    classType=\"postClass\"\n                    day={scheduleData[previousDay]}\n                  />\n                </>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default CurrentDaySection;\n","import React from \"react\";\nimport GenerateCourseDayHeader from \"./GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"./GenerateCourseDayContent\";\nimport ContentTable from \"./schedule-table/ContentTable\";\nimport { scroller } from \"react-scroll\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport CurrentDaySection from \"./current-day/CurrentDaySection\";\nimport { DateTime } from \"luxon\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\n// generates schedule content for a particular course\nfunction ScheduleContent({ scheduleData, coursetype, title }) {\n  // used by scrollTo function to identify where to scroll to from the up arrow at the bottom of the screen\n  const id = `${coursetype}-top`;\n  const todaySectionHeader = false;\n  const today = DateTime.now();\n  let nextToday;\n  if (coursetype === \"ft\") {\n    nextToday = DateTime.now().plus({ weeks: 1 });\n  } else {\n    nextToday = DateTime.now().plus({ months: 1 });\n  }\n\n  return (\n    <div className=\"content\">\n      {/* button that takes user back to the top of the page  */}\n      <div\n        className=\"up-arrow\"\n        onClick={() =>\n          scroller.scrollTo(id, {\n            smooth: true,\n            offset: -70,\n            duration: 100,\n          })\n        }\n      >\n        <ExpandLessIcon />\n      </div>\n      <h1 className=\"schedule-header\">{title}</h1>\n      <p id={id}></p>\n      {/* generates table which shows schedule for current week/ month depending on course type */}\n      <CurrentDaySection\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        today={today}\n      />\n      <div className=\"schedule-accordion-container\">\n        <Accordion className=\"current-week-accordion\" defaultActiveKey=\"0\">\n          <Accordion.Item eventKey=\"0\">\n            <ContentTable\n              scheduleData={scheduleData}\n              coursetype={coursetype}\n              startDay={today}\n            />\n          </Accordion.Item>\n        </Accordion>\n        <Accordion className=\"current-week-accordion\">\n          {coursetype === \"ft\" && (\n            <Accordion.Item eventKey=\"0\">\n              <ContentTable\n                scheduleData={scheduleData}\n                coursetype={coursetype}\n                startDay={nextToday}\n              />\n            </Accordion.Item>\n          )}\n        </Accordion>\n      </div>\n      <div className=\"schedule-list\">\n        <h1>Full Schedule</h1>\n        {/* generates individual day schedule content */}\n        {Object.keys(scheduleData).map((day) => {\n          const id = `${coursetype}-week-${scheduleData[day].courseWeek}-day-${scheduleData[day].dayNumber}`;\n\n          return (\n            <div className=\"day-class\" id={id}>\n              {/* generates schedule header for individual day */}\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[day]}\n                coursetype={coursetype}\n              />\n              {/* generates content if course day is not a holiday */}\n              {!scheduleData[day].dateTypes.holidayType && (\n                <GenerateCourseDayContent day={scheduleData[day]} />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default ScheduleContent;\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { scroller } from \"react-scroll\";\n\n// helper function for generating scheduleObjs array and moduleNameArray\nconst generatingDataArrays = (\n                              scheduleData, \n                              day, \n                              section, \n                              classtype, \n                              scheduleUrls, \n                              scheduleObjs, \n                              moduleNameArray\n                              ) => {\n  if (scheduleData[day].dateTypes[section][classtype].items) {\n    scheduleData[day].dateTypes[section][classtype].items.map((item) => {\n      // if the item has a url\n      if(item.url && !scheduleUrls.includes(item.url)) {\n        // push the url into scheduleUrls\n        scheduleUrls.push(item.url);\n        // push item name, url and date into scheduleObjs\n        scheduleObjs.push({name: item.name, url: item.url, date: day});\n      }\n      if (item.url) {\n        const itemUrlArray = item.url.split('/');\n        // itemUrlArray[3] is used as the heading of each module section\n        // we're filtering out everythign that does not come from the gitbook \n        if (!moduleNameArray.includes(itemUrlArray[3]) && itemUrlArray[2] === 'bootcamp.rocketacademy.co') {\n          moduleNameArray.push(itemUrlArray[3]);\n        }\n      }\n    })\n  }\n}\n\n// helper finction for accessing required items (items in each class of each section of each day)\nconst accessingRequiredItems = (\n                              scheduleData, \n                              day, \n                              scheduleUrls, \n                              scheduleObjs, \n                              moduleNameArray\n                              ) => {\n  if (scheduleData[day].dateTypes.module) {\n    Object.keys(scheduleData[day].dateTypes)\n    // filtering out module key\n    .filter(section => section !== 'module')\n    .map((section) => {\n      Object.keys(scheduleData[day].dateTypes[section])\n      // filtering out type key\n      .filter(classtype => classtype !== 'type')\n      .map((classtype) => {\n        // if there item array exists in a section, call the function that gets the required data\n        generatingDataArrays(scheduleData, \n                            day, \n                            section, \n                            classtype, \n                            scheduleUrls, \n                            scheduleObjs, \n                            moduleNameArray);\n        \n      })\n    })\n  }\n}\n \n// ###################################################################\n// ###################################################################\n\nfunction Modules({ scheduleData, coursetype }) {\n  const moduleNameArray = [];\n  const scheduleUrls = [];\n  const scheduleObjs = [];\n\n  // looking through entire data file \n  Object.keys(scheduleData).map((day) => {\n    accessingRequiredItems (\n                            scheduleData, \n                            day, \n                            scheduleUrls, \n                            scheduleObjs, \n                            moduleNameArray\n                            );\n  })\n\n  moduleNameArray.sort();\n  \n  return (\n    <div className=\"sidebar-modules\">\n      <h4>Modules</h4>\n      <Nav className=\"flex-column\">\n        {moduleNameArray.map((moduleName) => {\n           const general = [];\n                  const poce = [];\n                  const ice = [];\n\n              scheduleObjs.forEach((urlObj) => {\n                const urlModule = urlObj.url.split('/');\n                // this is the part of the url which we used to get the moduleName\n                const urlModuleName = urlModule[3];\n                if (urlModuleName === moduleName) {\n                  const splitName = urlObj.name.split('.');\n                  const dataObj = { name: urlObj.name, date: urlObj.date }\n                  if (splitName[1] === 'ICE') {\n                    ice.push(dataObj);\n                  } else if (splitName[1] === 'POCE') {\n                    poce.push(dataObj);\n                  } else {\n                    general.push(dataObj);\n                  }\n                }\n                }\n\n              )\n\n              return (\n                <>\n                <h6 className=\"sidebar-subheading\">{moduleName}</h6>\n                     {general.length > 0 && (\n                       <>\n                       {general.map((info) => {\n                        const id = `${coursetype}-week-${scheduleData[info.date].courseWeek}-day-${scheduleData[info.date].dayNumber}`;\n\n                         return (\n                          <Nav.Link\n                         onClick={() =>\n                           scroller.scrollTo(id, {\n                             smooth: true,\n                             offset: -70,\n                             duration: 100,\n                           })\n                         }\n                         >\n                           {info.name}\n                         </Nav.Link>\n                         )\n                         \n                       })}\n                       </>\n                     )}\n                     {ice.length > 0 && (\n                       <>\n                       {ice.map((info) => {\n                        const id = `${coursetype}-week-${scheduleData[info.date].courseWeek}-day-${scheduleData[info.date].dayNumber}`;\n\n                         return (\n                          <Nav.Link\n                         onClick={() =>\n                           scroller.scrollTo(id, {\n                             smooth: true,\n                             offset: -70,\n                             duration: 100,\n                           })\n                         }\n                         >\n                           {info.name}\n                         </Nav.Link>\n                         )\n                         \n                       })}\n                       </>\n                     )}\n                     {poce.length > 0 && (\n                       <>\n                       {poce.map((info) => {\n                        const id = `${coursetype}-week-${scheduleData[info.date].courseWeek}-day-${scheduleData[info.date].dayNumber}`;\n\n                         return (\n                          <Nav.Link\n                         onClick={() =>\n                           scroller.scrollTo(id, {\n                             smooth: true,\n                             offset: -70,\n                             duration: 100,\n                           })\n                         }\n                         >\n                           {info.name}\n                         </Nav.Link>\n                         )\n                         \n                       })}\n                       </>\n                     )}\n                   </>\n              )\n            }\n        )}\n      </Nav>\n    </div>\n  );\n}\n\nexport default Modules;\n\n\n","import React, { useEffect, useRef } from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { scroller } from \"react-scroll\";\nimport { DateTime } from \"luxon\";\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\nimport Modules from './Modules';\n\n// one of the components in Sidebar\nfunction CourseWeeks({ scheduleData, coursetype }) {\n  const weeks = [];\n  // used to scroll to current week on page load \n  const executeScroll = () => currentWeekRef.current.scrollIntoView({ block: \"center\" });\n\n  useEffect(() => {\n    executeScroll();\n  }, []);\n\n  const CurrentWeekDiv = () => {\n    return (\n      <>\n        <div ref={currentWeekRef}></div>\n      </>\n    );\n  };\n\n  // getting all the week numbers\n  Object.keys(scheduleData).forEach((day) => {\n    if (!weeks.includes(scheduleData[day].courseWeek)) {\n      weeks.push(scheduleData[day].courseWeek);\n    }\n  });\n\n  // getting first and last days of week\n  const firstDayOfWeek = DateTime.now().startOf(\"week\");\n  const lastDayOfWeek = DateTime.now().endOf(\"week\");\n  let target = firstDayOfWeek;\n  // array where all course dates in current week will be stored\n  const weeksDates = [];\n\n  // storing week's dates in the array\n  while (target <= lastDayOfWeek) {\n    weeksDates.push(target.toFormat(\"dd-MM-yyyy\"));\n    target = target.plus({ days: 1 });\n  }\n\n  // getting the week's courseWeek that the indicator will point to\n  const weekNumber = [];\n  const currentWeekRef = useRef(null);\n\n  weeksDates.forEach((date) => {\n    if (\n      scheduleData[date] &&\n      !weekNumber.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumber.push(scheduleData[date].courseWeek);\n    }\n  });\n\n  return (\n    <div className=\"sidebar-courseweeks\">\n      <h4>Course Weeks</h4>\n      <Nav\n        variant=\"pills\"\n        defaultActiveKey=\"0\"\n        className=\"flex-column\"\n        navbarScroll=\"true\"\n      >\n        <Nav.Item>\n          <Nav.Link\n            eventKey=\"0\"\n            // uses react-scroll library for scroll function\n            onClick={() =>\n              scroller.scrollTo(`${coursetype}-top`, {\n                smooth: true,\n                offset: -70,\n                duration: 100,\n              })\n            }\n          >\n            Today\n          </Nav.Link>\n        </Nav.Item>\n        {weeks.map((week, index) => {\n          // generating id that is linked to id of an element in main content of page\n          // on click, page will scroll to where the element is\n          const navId = `${index + 1}`;\n          let id;\n          // course starts on dayNumber 6, not 1\n          if (coursetype === \"pt\") {\n            id = `${coursetype}-week-${week}-day-6`;\n          } else {\n            id = `${coursetype}-week-${week}-day-1`;\n          }\n\n          const sidebarId = `${coursetype}-sidebar-week-${week}`;\n          return (\n            <Nav.Item>\n              <Nav.Link\n                eventKey={navId}\n                // uses react-scroll library for scroll function\n                onClick={() =>\n                  scroller.scrollTo(id, {\n                    smooth: true,\n                    offset: -70,\n                    duration: 100,\n                  })\n                }\n              >\n                {week === weekNumber[0] && <CurrentWeekDiv />}\n                <div>\n                  Week {week}\n                  {/* week indicator that indicates that a certain week is the current week  */}\n                  {weeks[index] === weekNumber[0] && (\n                    <span id={sidebarId} className=\"current-wk-indicator\">\n                      <KeyboardBackspaceIcon />\n                      {\"  \"}\n                      this week\n                    </span>\n                  )}\n                </div>\n              </Nav.Link>\n            </Nav.Item>\n          );\n        })}\n      </Nav>\n      <Modules scheduleData={scheduleData} coursetype={coursetype} />\n    </div>\n  );\n}\n\nexport default CourseWeeks;\n","import React from \"react\";\nimport CourseWeeks from \"./CourseWeeks\";\nimport Modules from \"./Modules\";\n\n// side navbar , displays a list of course weeks\nfunction SideBar({ scheduleData, coursetype }) {\n  return (\n    <div className=\"sidebar\">\n      <CourseWeeks scheduleData={scheduleData} coursetype={coursetype} />\n    </div>\n  );\n}\n\nexport default SideBar;\n","import React from \"react\";\nimport ScheduleContent from \"./ScheduleContent\";\nimport SideBar from \"./sidebar/SideBar\";\n\nfunction BatchSchedule({ data, title }) {\n  const scheduleData = JSON.parse(JSON.stringify(data.days));\n\n  // needed to generate id for use with react-scroll library, also indicates if course is full time/ part time\n  let coursetype;\n  if (data.courseType === \"Bootcamp PT\") {\n    coursetype = \"pt\";\n  } else {\n    coursetype = \"ft\";\n  }\n\n  return (\n    <div className=\"course-schedule\">\n      {/* contains links to main part of schedule page */}\n\n      <SideBar scheduleData={scheduleData} coursetype={coursetype} />\n      {/* contains current schedule table and main content of page */}\n      <ScheduleContent\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        title={title}\n      />\n    </div>\n  );\n}\n\nexport default BatchSchedule;\n","import React from \"react\";\nimport { Route, Switch, Link, useRouteMatch, Redirect } from \"react-router-dom\";\nimport logo from \"../../assets/4-MILK.png\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport BatchSchedule from \"./BatchSchedule\";\n\nfunction ScheduleContainer({ batchArray }) {\n  let { path, url } = useRouteMatch();\n  console.log(\"batch array\", batchArray);\n  // pass individual batch json files into BatchSchedule to generate schedules\n  return (\n    <>\n      {/* backup navbar  */}\n      <Navbar variant=\"dark\" bg=\"secondary\">\n        <Navbar.Brand href=\"#home\">\n          <img src={logo} alt=\"company logo\"></img>\n        </Navbar.Brand>\n        <Nav className=\"me-auto\">\n          {batchArray.map((batch) => {\n            return (\n              <Nav.Link as={Link} to={`${url}/${batch.name}`}>\n                {batch.name.toUpperCase()}\n              </Nav.Link>\n            );\n          })}\n        </Nav>\n      </Navbar>\n      <Switch>\n        <Route exact path={path}>\n          <Redirect to={`${path}/${batchArray[0].name}`} />\n        </Route>\n        {batchArray.map((batch) => {\n          return (\n            <Route path={`${path}/${batch.name}`}>\n              <BatchSchedule\n                data={batch.content}\n                title={batch.name.toUpperCase()}\n              />\n            </Route>\n          );\n        })}\n      </Switch>\n    </>\n  );\n}\n\nexport default ScheduleContainer;\n","import React from 'react';\nimport TabsContainer from './components/admin/Tabs';\nimport ptbc1 from '../src/data/21-08-2021_10-10-2022_BATCH1.json';\nimport ftbc3 from '../src/data/12-04-2021_23-09-2021_BATCH3.json';\nimport ftbc4 from '../src/data/12-07-2021_22-12-2021_BATCH4.json';\nimport {\n  HashRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport ScheduleContainer from './components/schedules/ScheduleContainer';\n\nfunction App() {\n\n  // put all batch data files in an array to be passed into separate components for /shedule and /admin\n  const batchArray = [{name:\"ptbc1\", content: ptbc1}, {name: \"ftbc3\", content: ftbc3}, {name: \"ftbc4\", content: ftbc4}];\n\n  return (\n    <div className=\"App\">\n      {/* <div class=\"container\"> */}\n        {/* <BatchSchedule /> */}\n        <HashRouter>\n          <Switch>\n            {/* route that takes user to part of app that edits course schedules */}\n            <Route path=\"/admin\">\n              <TabsContainer batchArray={batchArray} />\n            </Route>\n            {/* route that takes user to part of app that displays batch schedules for student use */}\n            <Route path=\"/schedules\">\n              <ScheduleContainer batchArray={batchArray} />\n            </Route>\n          </Switch>\n        </HashRouter>\n      {/* </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}