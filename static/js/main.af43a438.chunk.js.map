{"version":3,"sources":["generateCourseDates.js","download.js","components/DatePicker.jsx","components/AddItemModal.jsx","components/ShiftItemModal.jsx","components/ClassItem.jsx","components/SectionClass.jsx","components/Section.jsx","components/MainAccordion.jsx","components/GenerateDataShiftContent.jsx","components/DataShiftSidebar.jsx","components/GenerateCourseDayHeader.jsx","components/DataShift.jsx","components/Tabs.jsx","components/DisplaySection.jsx","components/GenerateNotifications.jsx","generateSectionArray.js","components/GenerateDatetypeSections.jsx","components/GenerateCourseDayContent.jsx","components/TableSectionContent.jsx","components/TableClass.jsx","components/TableProjects.jsx","components/CurrentContentTable.jsx","components/ScheduleContent.jsx","components/CourseWeeks.jsx","components/SideBar.jsx","components/BatchSchedule.jsx","components/ScheduleContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["publicHolidays","holidayData","PH","publicHolidayArray","Object","keys","map","key","index","push","companyHolidays","company","companyHolidayArray","winterBreak","name","date","phWithoutCh","forEach","holiday","includes","getLocalDateTime","utc","timeString","courseName","courseType","changedFormat","toFormat","DateTime","fromISO","zone","toUTC","toISO","Number","weekday","generateHolidayObject","dateString","week","dateObj","courseDay","courseDate","courseWeek","dayNumber","dateTypes","generateCourseDayObject","weekDay","meetingDateTimeUTC","basicsData","days","bootcampData","generateDataObject","startDate","fromFormat","data","courseDayCount","dateWeek","classDatesCount","dayArray","topLevelObject","daysOfWeek","courseStartIndex","totalCourseDays","bootcampDays","fullTime","partTime","generateTopLevelObject","dayIndex","displayDate","displayName","plus","length","weeks","set","download","filename","dataStr","encodeURIComponent","JSON","stringify","dlAnchorElem","document","createElement","setAttribute","click","DatePicker","bootcampDataCopy","setBootcampDataCopy","useState","setStartDate","setCourseName","setCourseType","handleDownload","e","a","console","log","handleRender","parse","className","Form","Group","controlId","Label","Control","type","value","onChange","target","Select","Button","variant","onClick","href","AddItemModal","show","onHide","bootcampdatacopy","setbootcampdatacopy","coursedate","title","setTitle","url","setUrl","section","setSection","sectionClass","setSectionClass","Modal","size","centered","Header","closeButton","Title","id","Body","placeholder","preventDefault","newItem","items","handleAddItem","Footer","ShiftItemModal","heading","shiftitem","sectiontype","classtype","classindex","selectedDate","setSelectedDate","direction","dates","selectedItem","splice","targetDay","constructor","Array","handleSubmitDate","ClassItem","day","classType","sectionType","item","classIndex","buttonsVisible","setButtonsVisible","modalShow","setModalShow","shiftItem","setShiftItem","handleShift","datesArray","filter","indexOf","onMouseEnter","onMouseLeave","SectionClass","sectionclass","sectionIndex","classButtonsVisible","setClassButtonsVisible","shiftSection","sectionArray","startDay","element","handleClassShift","i","selectedSection","Section","classExists","preClass","inClass","postClass","projectDue","projectStart","cpDue","Accordion","Item","eventKey","MainAccordion","setShowInputModal","setCourseDate","module","handlePlusClick","GenerateDataShiftContent","showInputModal","handleClose","getElementsByClassName","from","subelement","classList","remove","DataShiftSidebar","localDate","formattedDate","meetingTime","timeZone","timeOffset","DataShift","TabsContainer","setKey","batchDataCopy","setBatchDataCopy","mainDataFile","mainDataCopy","setMainDataCopy","Tabs","activeKey","onSelect","k","Tab","NormalCourseDay","timeZoneSet","scroller","scrollTo","smooth","offset","duration","HolidayCourseDay","holidayType","location","GenerateCourseDayHeader","coursetype","DisplaySection","GenerateNotifications","status","projectdue","cpdue","projectstart","generateSectionArray","datetype","classTypeSection","x","GenerateDatetypeSections","GenerateCourseDayContent","projects","cp","TableSectionContent","TableClass","classArray","TableProjects","CurrentContentTable","firstDay","moveDate","lastDay","scheduleData","noClass","setNoClass","today","now","todayWords","startOf","endOf","weekDatesArray","currentWeekData","todayId","todayFormatted","Table","striped","bordered","hover","ScheduleContent","CourseWeeks","firstDayOfWeek","lastDayOfWeek","weeksDates","weekNumber","Nav","defaultActiveKey","navbarScroll","Link","navId","SideBar","BatchSchedule","ScheduleContainer","useRouteMatch","path","to","exact","ftbc3","ptbc1","ftbc4","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mPAKMA,EAAiBC,EAAYC,GAC7BC,EAAqB,GAE3BC,OAAOC,KAAKL,GAAgBM,KAAI,SAACC,EAAKC,GAClCL,EAAmBM,KAAKF,MAG5B,IAAMG,EAAkBT,EAAYU,QAC9BC,EAAsB,GACtBC,EAAc,GAEpBT,OAAOC,KAAKK,GAAiBJ,KAAI,SAACC,EAAKC,GACnCI,EAAoBH,KAAKF,GAEQ,iBAA9BG,EAAgBH,GAAKO,MACpBD,EAAYJ,KAAKC,EAAgBH,GAAKQ,SAI9C,IAAMC,EAAc,GAEpBb,EAAmBc,SAAQ,SAACC,GACpBN,EAAoBO,SAASD,IAC7BF,EAAYP,KAAKS,MAKzB,IAAME,EAAmB,SAACC,EAAKC,EAAYC,EAAYC,EAAYT,GAC/D,IAAMU,EAAgBV,EAAKW,SAAS,cAYpC,MAXmB,WAAfF,EACAH,EAAMM,WAASC,QAAQH,EAAgBH,EAAY,CAACO,KAAM,cAAcC,QAAQC,QAC1D,gBAAfP,GAAgCQ,OAAOT,GAAc,IAAM,EAClEF,EAAMM,WAASC,QAAQH,EAAgB,SAAU,CAACI,KAAM,cAAcC,QAAQC,QACvD,gBAAfP,GAAgCQ,OAAOT,GAAc,IAAM,GAAsB,gBAAfC,GAAkD,IAAjBT,EAAKkB,QAChHZ,EAAMM,WAASC,QAAQH,EAAgB,SAAU,CAACI,KAAM,cAAcC,QAAQC,QACxD,gBAAfP,GAAkD,IAAjBT,EAAKkB,QAC7CZ,EAAMM,WAASC,QAAQH,EAAgB,SAAU,CAACI,KAAM,cAAcC,QAAQC,QACxD,gBAAfP,GAAkD,IAAjBT,EAAKkB,UAC7CZ,EAAMM,WAASC,QAAQH,EAAgB,SAAU,CAACI,KAAM,cAAcC,QAAQC,SAE3EV,GA+BLa,EAAwB,SAACC,EAAYC,EAAMrB,EAAMsB,GAenD,OAdAA,EAAU,CACNC,UAAW,KACXC,WAAYJ,EACZK,WAAYJ,EACZK,UAAW1B,EAAKkB,QAChBS,UAAW,IAGX1B,EAAYG,SAASgB,GACrBE,EAAQK,UAAY1C,EAAemC,GAEnCE,EAAQK,UAAYhC,EAAgByB,GAGjCE,GAILM,EAA0B,SAACN,EAASF,EAAYC,EAAMQ,EAAS7B,EAAMM,EAAKG,EAAYc,GAoBxF,OAlBAD,EAAU,CACNE,WAAYJ,EACZK,WAAYJ,EACZQ,QAASA,EACTH,UAAW1B,EAAKkB,QAChBY,mBAAoBxB,GAIL,WAAfG,EACAa,EAAO,2BACAA,GAAYS,EAAWC,KAAKT,IAEb,gBAAfd,GAA+C,gBAAfA,IACnCa,EAAO,2BACJA,GAAYW,EAAaD,KAAKT,KAGlCD,GAoGIY,EA9FY,SAACC,EAAW3B,EAAYC,GAC/C,IACIH,EADAN,EAAOY,WAASwB,WAAWD,EAAW,cAE1C7B,EAAMD,EAAiBC,EAAK,SAAUE,EAAYC,EAAYT,GAC9D,IAIIqC,EACAC,EALAC,EAAW3B,WAASwB,WAAWD,EAAW,cAC1CK,EAAkB,EAClBnB,EAAO,EACPQ,EAAU,EAIVN,EAAY,EAUG,WAAfd,EACA6B,EAAiB,GACK,gBAAf7B,GAA+C,gBAAfA,IACvC6B,EAAiB,KAMrB,IAHA,IAAMG,GATNJ,EA1F2B,SAAC5B,EAAYiC,GACpC,GAAmB,WAAfjC,EACAiC,EAAc,aACVC,WAAYZ,EAAWY,WACvBC,iBAAkBb,EAAWa,iBAC7BC,gBAAiBd,EAAWc,iBACzBH,QAEJ,GAAmB,gBAAfjC,GAA+C,gBAAfA,EAA8B,CACrE,IAAIqC,EAEAA,EADe,gBAAfrC,EACewB,EAAaU,WAAWI,SAExBd,EAAaU,WAAWK,SAE3CN,EAAc,aACVC,WAAYG,EACZF,iBAAkBX,EAAaW,iBAC/BC,gBAAiBZ,EAAaY,iBAC3BH,GAIX,OAAOA,EAmEJO,CAAuBxC,EALT,CACbA,WAAYA,EACZuB,KAAM,MAYQW,WAClBO,EAAWb,EAAKO,iBAEbN,EAAiB,GAAG,CACvB,IAAMlB,EAAapB,EAAKW,SAAS,cAIjC,GAAIY,EAAY,IAAMc,EAAKQ,gBAAiB,CAExC,IAAMM,EAAcvC,WAASwB,WAAWD,EAAW,cAC7CiB,EAAW,UAAMD,EAAYxC,SAAS,cAA3B,YAA4CS,EAA5C,iBAA+DZ,GAChF6B,EAAK7B,WAAa4C,EAGtB,IAAI9B,OAAO,EAEPrB,EAAYG,SAASgB,IAAetB,EAAYM,SAASgB,GACzDE,EAAUH,EAAuBC,EAAYC,EAAMrB,EAAMsB,IAIzDA,EAAUM,EAAyBN,EAASF,EAAYC,EAAMQ,EAAS7B,EAAMM,EAAKG,EAAYc,GAI9Fe,GAAkB,EAClBf,GAAa,GAEjBc,EAAKL,KAAKZ,GAAcE,EAGpBkB,IAAoBH,EAAKQ,iBAAkC,WAAfpC,GAC5CT,EAAOA,EAAKqD,KAAK,CAAErB,KAAM,IACzB1B,EAAMD,EAAkBC,EAAK,SAAUE,EAAYC,EAAYT,GAC/D6B,GAAW,EACXR,GAAQ,GAIH6B,IAAaT,EAASa,OAAQ,GAC/BzB,EAAU,EACVR,GAAQ,EACRkB,EAAWA,EAASc,KAAK,CAAEE,MAAO,IAElCL,EAAW,EACXlD,EAAOA,EAAKqD,KAAK,CAAEE,MAAO,IAAKC,IAAI,CAAEtC,QAASuB,EAASS,KACvD5C,EAAMD,EAAkBC,EAAK,SAAUE,EAAYC,EAAYT,KAI/DkD,GAAY,EACZlD,EAAOA,EAAKwD,IAAI,CAAEtC,QAASuB,EAASS,KACpC5C,EAAMD,EAAkBC,EAAK,SAAUE,EAAYC,EAAYT,GAE1DC,EAAYG,SAASgB,KACtBS,GAAW,IAKvBW,GAAmB,EAGvB,OAAOH,G,eC5MIoB,EATE,SAACpB,EAAMqB,GAEhB,IAAIC,EAAU,gCAAkCC,mBAAmBC,KAAKC,UAAUzB,IAC9E0B,EAAeC,SAASC,cAAc,KAC1CF,EAAaG,aAAa,OAAYP,GACtCI,EAAaG,aAAa,WAAYR,GACtCK,EAAaI,S,OCkGNC,EAlGI,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,iBAAkBC,EAA0B,EAA1BA,oBACtC,EAAkCC,mBAAS,IAA3C,mBAAOpC,EAAP,KAAkBqC,EAAlB,KACA,EAAoCD,mBAAS,IAA7C,mBAAO/D,EAAP,KAAmBiE,EAAnB,KACA,EAAoCF,mBAAS,IAA7C,mBAAO9D,EAAP,KAAmBiE,EAAnB,KAEMC,EAAc,uCAAG,WAAOC,GAAP,eAAAC,EAAA,+EAEA3C,EAAmBC,EAAW3B,EAAYC,GAF1C,OAEb4B,EAFa,OAGnByC,QAAQC,IAAI,YAAa1C,EAAKL,MAC9ByB,EAASpB,EAAD,UAAUA,EAAK7B,WAAf,UAJW,gDAMnBsE,QAAQC,IAAR,MANmB,yDAAH,sDAUdC,EAAY,uCAAG,WAAOJ,GAAP,eAAAC,EAAA,+EAEE3C,EAAmBC,EAAW3B,EAAYC,GAF5C,cAEX4B,EAFW,OAGjByC,QAAQC,IAAI,YAAa1C,EAAKL,MAHb,SAIXsC,EAAoBT,KAAKoB,MAAMpB,KAAKC,UAAUzB,EAAKL,QAJxC,uDAMjB8C,QAAQC,IAAR,MANiB,yDAAH,sDAYlB,OAFAD,QAAQC,IAAI,qBAAsBV,GAGhC,mCACE,sBAAKa,UAAU,cAAf,UACE,8BACE,+DAEF,sBAAKA,UAAU,uBAAf,UACE,eAACC,EAAA,EAAD,CAAMD,UAAU,aAAhB,UACE,eAACC,EAAA,EAAKC,MAAN,CAAYF,UAAU,aAAaG,UAAU,WAA7C,UACE,cAACF,EAAA,EAAKG,MAAN,yBACA,cAACH,EAAA,EAAKI,QAAN,CACEC,KAAK,OACLC,MAAOtD,EACPuD,SAAU,SAACd,GAAD,OAAOJ,EAAaI,EAAEe,OAAOF,aAI3C,eAACN,EAAA,EAAKC,MAAN,CAAYF,UAAU,aAAaG,UAAU,kBAA7C,UACE,cAACF,EAAA,EAAKG,MAAN,2BACA,cAACH,EAAA,EAAKI,QAAN,CACEC,KAAK,SACLC,MAAOjF,EACPkF,SAAU,SAACd,GAAD,OAAOH,EAAcG,EAAEe,OAAOF,aAI5C,eAACN,EAAA,EAAKC,MAAN,CAAYF,UAAU,aAAaG,UAAU,kBAA7C,UACE,cAACF,EAAA,EAAKG,MAAN,0BACA,eAACH,EAAA,EAAKS,OAAN,CACE,aAAW,yBACXF,SAAU,SAACd,GAAD,OAAOF,EAAcE,EAAEe,OAAOF,QAF1C,UAIE,wDACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,cAAd,yBACA,wBAAQA,MAAM,cAAd,kCAIN,sBAAKP,UAAU,0BAAf,UACE,cAACW,EAAA,EAAD,CACEC,QAAQ,UACRN,KAAK,SACLO,QAAS,SAACnB,GACRI,EAAaJ,IAJjB,6BASA,cAACiB,EAAA,EAAD,CACEC,QAAQ,UACRN,KAAK,SACLO,QAAS,SAACnB,GACRD,EAAeC,IAJnB,kCAUF,uBACA,8BACE,mBAAGoB,KAAK,6CAAR,4C,gBCwBGC,MAjHf,YAMI,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,OACAC,EAGC,EAHDA,iBACAC,EAEC,EAFDA,oBACAC,EACC,EADDA,WAEA,EAA0B/B,mBAAS,IAAnC,mBAAOgC,EAAP,KAAcC,EAAd,KACA,EAAsBjC,mBAAS,IAA/B,mBAAOkC,EAAP,KAAYC,EAAZ,KACA,EAA8BnC,mBAAS,IAAvC,mBAAOoC,EAAP,KAAgBC,EAAhB,KACA,EAAwCrC,mBAAS,IAAjD,mBAAOsC,EAAP,KAAqBC,EAArB,KAqBA,OACE,eAACC,EAAA,EAAD,CACEb,KAAMA,EACNC,OAAQA,EACRa,KAAK,KACL,kBAAgB,kBAChBC,UAAQ,EALV,UAOE,cAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,CAAaC,GAAG,kBAAhB,2BAEF,cAACN,EAAA,EAAMO,KAAP,UACE,eAACnC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,MAAN,CAAYF,UAAU,OAAOG,UAAU,QAAvC,UACE,cAACF,EAAA,EAAKG,MAAN,oBACA,cAACH,EAAA,EAAKI,QAAN,CACEC,KAAK,OACL+B,YAAY,cACZ9B,MAAOc,EACPb,SAAU,SAACd,GAAD,OAAO4B,EAAS5B,EAAEe,OAAOF,aAIvC,eAACN,EAAA,EAAKC,MAAN,CAAYF,UAAU,OAAOG,UAAU,MAAvC,UACE,cAACF,EAAA,EAAKG,MAAN,kBACA,cAACH,EAAA,EAAKI,QAAN,CACEC,KAAK,OACL+B,YAAY,YACZ9B,MAAOgB,EACPf,SAAU,SAACd,GAAD,OAAO8B,EAAO9B,EAAEe,OAAOF,aAIrC,cAACN,EAAA,EAAKG,MAAN,sBACA,eAACH,EAAA,EAAKS,OAAN,CACEV,UAAU,OACV,aAAW,WACXQ,SAAU,SAACd,GAAD,OAAOgC,EAAWhC,EAAEe,OAAOF,QAHvC,UAKE,oDACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,MAAd,oBAGF,cAACN,EAAA,EAAKG,MAAN,qBACA,eAACH,EAAA,EAAKS,OAAN,CACEV,UAAU,OACV,aAAW,WACXQ,SAAU,SAACd,GAAD,OAAOkC,EAAgBlC,EAAEe,OAAOF,QAH5C,UAKE,uDACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,UAAd,qBACa,aAAZkB,GACC,qCACE,wBAAQlB,MAAM,aAAd,wBACA,wBAAQA,MAAM,eAAd,6BAGS,OAAZkB,GAAoB,wBAAQlB,MAAM,QAAd,sBAEvB,cAACI,EAAA,EAAD,CACEC,QAAQ,UACRN,KAAK,SACLO,QAAS,SAACnB,GAAD,OAxFG,SAACA,GACrBA,EAAE4C,iBAEF,IAAMC,EAAU,CACd1H,KAAMwG,EACNE,IAAKA,GAGFL,EAAiBE,GAAY3E,UAAUgF,GAASE,GAAca,QACjEtB,EAAiBE,GAAY3E,UAAUgF,GAASE,GAAca,MAAQ,IAGxEtB,EAAiBE,GAAY3E,UAAUgF,GAASE,GAAca,MAAMhI,KAClE+H,GAEF3C,QAAQC,IAAIqB,GACZC,EAAoB,eAAKD,IAwEDuB,CAAc/C,IAHhC,yBASJ,cAACmC,EAAA,EAAMa,OAAP,UACE,cAAC/B,EAAA,EAAD,CAAQE,QAASI,EAAjB,yB,oFCFO0B,MAzGf,YAUI,IAGEC,EAZJ5B,EASC,EATDA,KACAC,EAQC,EARDA,OACA4B,EAOC,EAPDA,UACA3B,EAMC,EANDA,iBACAC,EAKC,EALDA,oBACA2B,EAIC,EAJDA,YACAC,EAGC,EAHDA,UACAC,EAEC,EAFDA,WACAvB,EACC,EADDA,QAEA,EAAwCpC,mBAAS,IAAjD,mBAAO4D,EAAP,KAAqBC,EAArB,KAuCA,OAnCEN,EAD0B,OAAxBC,EAAUM,UACF,mBAEA,sBAkCV,eAACtB,EAAA,EAAD,CACEb,KAAMA,EACN6B,UAAWA,EACX5B,OAAQA,EACRa,KAAK,KACL,kBAAgB,aAChBC,UAAQ,EANV,UAQE,cAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,CAAaC,GAAG,aAAhB,SAA8BS,MAEhC,cAACf,EAAA,EAAMO,KAAP,UACE,eAACnC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKS,OAAN,CACEV,UAAU,OACV,aAAW,OACXQ,SAAU,SAACd,GAAD,OAAOwD,EAAgBxD,EAAEe,OAAOF,QAH5C,UAKE,wCACCsC,EAAUO,MAAM/I,KAAI,SAACS,GACpB,MAAoB,kBAATA,EAEP,qCACE,yBAAQyF,MAAOzF,EAAf,iBACOoG,EAAiBpG,GAAMuB,aAFhC,OASA,qCACE,wBAAQkE,MAAOzF,EAAf,SAAsBA,IADxB,aAOR,cAAC6F,EAAA,EAAD,CACEC,QAAQ,UACRN,KAAK,SACLO,QAAS,SAACnB,GAAD,OAxEM,SAACA,GACxBA,EAAE4C,iBAEF,IAAIe,EAAeP,EAAYC,GAAWP,MAAMQ,GAEhDpD,QAAQC,IAAI,gBAAiBwD,GAE7BP,EAAYC,GAAWP,MAAMc,OAAON,EAAY,GAGJ,IAAxCF,EAAYC,GAAWP,MAAMpE,eACxB0E,EAAYC,GAAWP,MAGhC5C,QAAQC,IAAIkD,GAEZ,IAAMQ,EAAYrC,EAAiB+B,GAAcxG,UAAUgF,GAC3D7B,QAAQC,IAAI0D,EAAUR,IAEjBQ,EAAUR,GAAWP,QACxBe,EAAUR,GAAWP,MAAQ,IAG/Be,EAAUR,GAAWP,MAAMhI,KAAK6I,GAChCzD,QAAQC,IAAIqB,GACZA,EAAiBsC,cAAgBC,MAC7BtC,EAAoB,YAAID,IACxBC,EAAoB,eAAKD,IA6CLwC,CAAiBhE,IAHnC,yBASJ,cAACmC,EAAA,EAAMa,OAAP,UACE,cAAC/B,EAAA,EAAD,CAAQE,QAASI,EAAjB,yBC4BO0C,MA9Hf,YAUG,EATDC,IASE,IARFxE,EAQC,EARDA,oBACAqC,EAOC,EAPDA,QACAtC,EAMC,EANDA,iBACA0E,EAKC,EALDA,UACAC,EAIC,EAJDA,YACAC,EAGC,EAHDA,KACA/F,EAEC,EAFDA,SACAgG,EACC,EADDA,WAGA,EAA4C3E,oBAAS,GAArD,mBAAO4E,EAAP,KAAuBC,EAAvB,KACA,EAAkC7E,oBAAS,GAA3C,mBAAO8E,EAAP,KAAkBC,EAAlB,KACA,EAAkC/E,mBAAS,CACzC8D,UAAW,KACXC,MAAO,KAFT,mBAAOiB,EAAP,KAAkBC,EAAlB,KAKMC,EAAc,SAACpB,EAAWnF,EAAUgG,GACxC,IAAIQ,EAAa,GACjB5E,QAAQC,IAAI7B,GAEM,OAAdmF,GACFvD,QAAQC,IAAIV,GACZA,EAAiBqE,cAAgBrJ,OAC7BA,OAAOC,KAAK+E,GACTsF,QACC,SAAC3J,GAAD,OACEqE,EAAiBrE,GAAMuB,UAAY2B,EAAW,GACT,OAArCmB,EAAiBrE,GAAMuB,aAE1BhC,KAAI,SAACS,GACC0J,EAAWtJ,SAASJ,IACvB0J,EAAWhK,KAAKM,MAGtBqE,EACGsF,QAAO,SAAC3J,GAAD,OAAUqE,EAAiBuF,QAAQ5J,GAAQkD,KAClD3D,KAAI,SAACS,GACC0J,EAAWtJ,SAASiE,EAAiBuF,QAAQ5J,KAChD0J,EAAWhK,KAAK2E,EAAiBuF,QAAQ5J,OAInDwJ,EAAa,2BACRD,GADO,IAEVlB,UAAW,KACXC,MAAOoB,KAGTJ,GAAa,IACU,SAAdjB,GACThE,EAAiBqE,cAAgBrJ,OAC7BA,OAAOC,KAAK+E,GACTsF,QACC,SAAC3J,GAAD,OACEqE,EAAiBrE,GAAMuB,UAAY2B,EAAW,GACT,OAArCmB,EAAiBrE,GAAMuB,aAE1BhC,KAAI,SAACS,GACC0J,EAAWtJ,SAASJ,IACvB0J,EAAWhK,KAAKM,MAGtBqE,EACGsF,QAAO,SAAC3J,GAAD,OAAUqE,EAAiBuF,QAAQ5J,GAAQkD,KAClD3D,KAAI,SAACS,GACC0J,EAAWtJ,SAASiE,EAAiBuF,QAAQ5J,KAChD0J,EAAWhK,KAAK2E,EAAiBuF,QAAQ5J,OAInDwJ,EAAa,2BACRD,GADO,IAEVlB,UAAW,OACXC,MAAOoB,KAGTJ,GAAa,KAEbN,EAAYD,GAAWrB,MAAMc,OAAOU,EAAY,GAChD5E,EAAoB,eAAKD,IACzBS,QAAQC,IAAIV,KAIhB,OACE,8BACE,sBACEa,UAAU,aACV2E,aAAc,kBAAMT,GAAkB,IACtCU,aAAc,kBAAMV,GAAkB,IAHxC,UAKGH,EAAKlJ,KACLoJ,GACC,gCACE,wBAAQpD,QAAS,kBAAM0D,EAAY,SAAUvG,EAAUgG,IAAvD,SACE,cAAC,IAAD,MAEF,wBAAQnD,QAAS,kBAAM0D,EAAY,KAAMvG,EAAUgG,IAAnD,SACE,cAAC,IAAD,MAEF,wBAAQnD,QAAS,kBAAM0D,EAAY,OAAQvG,EAAUgG,IAArD,SACE,cAAC,IAAD,SAILG,GACC,cAAC,EAAD,CACEnD,KAAMmD,EACNlD,OAAQ,kBAAMmD,GAAa,IAC3BvB,UAAWwB,EACXnD,iBAAkB/B,EAClBgC,oBAAqB/B,EACrB0D,YAAagB,EACbf,UAAWc,EACXb,WAAYgB,EACZvC,QAASA,UCANoD,MAtHf,YASI,IARFjB,EAQC,EARDA,IAEAkB,GAMC,EAPDC,aAOC,EANDD,cACAhB,EAKC,EALDA,YACA3E,EAIC,EAJDA,iBACAC,EAGC,EAHDA,oBACAqC,EAEC,EAFDA,QACAzD,EACC,EADDA,SAEA,EAAsDqB,oBAAS,GAA/D,mBAAO2F,EAAP,KAA4BC,EAA5B,KAEA,EAA4C5F,oBAAS,GAArD,mBAEM6F,GAFN,UAEqB,SAACC,EAAcC,EAAUjG,GAoB5C,OAnBAgG,EAAanK,SAAQ,SAACqK,EAAS9K,GAC7BqF,QAAQC,IAAI,YAAa7B,GACT,OAAZqH,IAEAlG,EAAiBiG,EAAW7K,GAAOkC,UAAUgF,GAASqD,GACnDtC,MAEH2C,EAAa5K,GAAOS,SAAQ,SAAC+I,GAC3B5E,EAAiBiG,EAAW7K,GAAOkC,UAAUgF,GAC3CqD,GACAtC,MAAMhI,KAAKuJ,MAGf5E,EAAiBiG,EAAW7K,GAAOkC,UAAUgF,GAC3CqD,GACAtC,MAAQ2C,EAAa5K,OAItB4E,IAGHmG,EAAmB,SAACnC,EAAWnF,GAGnC,IADA,IAAMmH,EAAe,GACZI,EAAIvH,EAAUuH,EAAIpG,EAAiBf,OAAS,EAAGmH,GAAK,EAC3D,GAAIpG,EAAiBoG,GAAG9I,UAAUgF,GAASqD,GAActC,MAAO,CAC9D,IAAMgD,EACJrG,EAAiBoG,GAAG9I,UAAUgF,GAASqD,GAActC,MACvD2C,EAAa3K,KAAKgL,UACXrG,EAAiBoG,GAAG9I,UAAUgF,GAASqD,GAActC,WAE5D2C,EAAa3K,KAAK,MAQpB2E,EAAmB+F,EAAaC,EAFhB,SAAdhC,EACSnF,EAAW,EAIXA,EAAW,EAHkCmB,GAO1DS,QAAQC,IAAI,sBAAuBV,GACnCC,EAAoB,YAAID,KAG1B,OACE,8BACG2E,EAAYgB,GAActC,OACzB,sBAAKxC,UAAU,gBAAf,UACE,qBAAKA,UAAU,cAAf,SAA8B8E,IAC9B,qBAAK9E,UAAU,cAAf,SACG8D,EAAYgB,GAActC,MAAMnI,KAAI,SAAC0J,EAAMC,GAClC,cAAUhG,EAAV,oBAA8ByD,EAA9B,kBAA+CqD,EAA/C,YAA+Dd,GACvE,OACE,cAAC,EAAD,CACEJ,IAAKA,EACLkB,aAAcA,EACd3F,iBAAkBA,EAClBC,oBAAqBA,EACrBqC,QAASA,EACToC,UAAWiB,EACXhB,YAAaA,EACbC,KAAMA,EACN/F,SAAUA,EACVgG,WAAYA,SAKpB,qBACEhE,UAAU,uBACV2E,aAAc,kBAAMM,GAAuB,IAC3CL,aAAc,kBAAMK,GAAuB,IAH7C,SAKGD,GACC,gCACE,wBACEnE,QAAS,kBAAMyE,EAAiB,KAAMtH,IADxC,SAGE,cAAC,IAAD,MAEF,wBACE6C,QAAS,kBACPyE,EAAiB,OAAQtH,IAF7B,SAKE,cAAC,IAAD,iBC/CHyH,MA9Df,YAOI,IANF7B,EAMC,EANDA,IACAxE,EAKC,EALDA,oBACAqC,EAIC,EAJDA,QACAqC,EAGC,EAHDA,YACA9F,EAEC,EAFDA,SACAmB,EACC,EADDA,iBAKIuG,GAAc,EAclB,OAbI5B,EAAYN,cAAgBrJ,SAE5B2J,EAAY6B,SAASnD,OACrBsB,EAAY8B,QAAQpD,OACpBsB,EAAY+B,UAAUrD,OACL,aAAhBsB,IACEA,EAAYgC,WAAWtD,OAASsB,EAAYiC,aAAavD,QAC3C,OAAhBsB,GAAwBA,EAAYkC,MAAMxD,SAE3CkD,GAAc,GAKhB,8BACG5B,EAAYN,cAAgBrJ,QAC3B,mCACE,cAAC8L,EAAA,EAAD,UACGP,GACC,eAACO,EAAA,EAAUC,KAAX,CAAgBC,SAAS,IAAzB,UACE,cAACF,EAAA,EAAUjE,OAAX,UAAmB8B,EAAYxD,OAC/B,cAAC2F,EAAA,EAAU7D,KAAX,UACGjI,OAAOC,KAAK0J,GACVW,QAAO,SAAC9C,GAAD,OAAkBmC,EAAYnC,GAAca,SACnDnI,KAAI,SAACyK,EAAcC,GAClB,OACE,qBAAK/E,UAAU,cAAf,SACE,cAAC,EAAD,CACE4D,IAAKA,EACLmB,aAAcA,EACdD,aAAcA,EACdhB,YAAaA,EACb3E,iBAAkBA,EAClBC,oBAAqBA,EACrBqC,QAASA,EACTzD,SAAUA,qBCqBvBoI,MAnEf,YAOI,IANFpI,EAMC,EANDA,SACAmB,EAKC,EALDA,iBACAC,EAIC,EAJDA,oBACAwE,EAGC,EAHDA,IACAyC,EAEC,EAFDA,kBACAC,EACC,EADDA,cAQA,OACE,8BACGnH,EAAiByE,GAAKnH,UAAU8J,QAC/B,cAACN,EAAA,EAAD,UACE,eAACA,EAAA,EAAUC,KAAX,CAAgBC,SAAUnI,EAA1B,UACE,eAACiI,EAAA,EAAUjE,OAAX,WACE,sBACEhC,UAAU,oBACVa,QAAS,kBAdC,SAAC+C,GACvBhE,QAAQC,IAAI+D,GACZ0C,EAAc1C,GACdyC,GAAkB,GAWSG,CAAgB5C,IAFjC,UAIG,IACD,cAAC,IAAD,OAEF,qBAAK5D,UAAU,oBAAf,SACGb,EAAiBqE,cAAgBrJ,OAChC,qCACGyJ,EADH,WACgBzE,EAAiByE,GAAKrH,WADtC,gBAC+D,IAC5D4C,EAAiByE,GAAKvH,UAFzB,IAEqC,IAClC8C,EAAiByE,GAAKnH,UAAU8J,OAAQ,OAG3C,oDACepH,EAAiByE,GAAKvH,UADrC,IACiD,IAC9C8C,EAAiByE,GAAKnH,UAAU8J,OAAQ,YAKjD,cAACN,EAAA,EAAU7D,KAAX,UACE,qBAAKpC,UAAU,aAAf,SACE,8BACG7F,OAAOC,KAAK+E,EAAiByE,GAAKnH,WAAWpC,KAC5C,SAACoH,GAAD,OACE,cAAC,EAAD,CACEmC,IAAKA,EACLxE,oBAAqBA,EACrBqC,QAASA,EACTqC,YAAa3E,EAAiByE,GAAKnH,UAAUgF,GAC7CzD,SAAUA,EACVmB,iBAAkBA,qBCgH3BsH,EApKkB,SAAC,GAG3B,IAFLtH,EAEI,EAFJA,iBACAC,EACI,EADJA,oBAEA,EAA4CC,oBAAS,GAArD,mBAAOqH,EAAP,KAAuBL,EAAvB,KACA,EAAoChH,mBAAS,IAA7C,mBAAO/C,EAAP,KAAmBgK,EAAnB,KAeMK,EAAc,WAClB,IAAMtB,EAAUvG,SAAS8H,uBACvB,oCAGFhH,QAAQC,IAAI,UAAWwF,GACvB5B,MAAMoD,KAAKxB,GAASrK,SAAQ,SAAC8L,GAC3BlH,QAAQC,IAAIiH,GACZA,EAAWC,UAAUC,OAAO,YAIhC,OACE,qCACG7H,EAAiBqE,cAAgBrJ,QAChCA,OAAOC,KAAK+E,GAAkBf,OAAS,GACrC,gCACE,qBAAK4B,UAAU,4BAAf,SACE,cAACW,EAAA,EAAD,CACEC,QAAQ,UACRN,KAAK,SACLO,QA7BmB,WAC/BjB,QAAQC,IAAI,kBAAmBV,GAC/BZ,EACEY,EADM,mBAEMA,EAAiB7D,WAFvB,gBAwBE,6BAQF,wBACEgF,KAAK,SACLN,UAAU,kBACVa,QAAS8F,EAHX,uBAOCxM,OAAOC,KAAK+E,GAAkB9E,KAAI,SAACuJ,EAAK5F,GACvC,OACE,mCACE,cAAC,EAAD,CACEA,SAAUA,EACVmB,iBAAkBA,EAClBC,oBAAqBA,EACrBwE,IAAKA,EACLyC,kBAAmBA,EACnBC,cAAeA,SA6CtBI,GAAkBpK,GACjB,cAAC,EAAD,CACE0E,KAAM0F,EACNzF,OAAQ,kBAAMoF,GAAkB,IAChCnF,iBAAkB/B,EAClBgC,oBAAqB/B,EACrBiH,kBAAmBA,EACnBjF,WAAY9E,OAKrB6C,EAAiBqE,cAAgBC,OAChC,sBAAKzD,UAAU,sBAAf,UACE,qBAAKA,UAAU,4BAAf,SACE,wBACEA,UAAU,kBACVa,QArHoB,WAC9BjB,QAAQC,IAAI,qBAAsBV,GAClCZ,EAASY,EAAkB,iCAiHnB,sCAOF,wBACEmB,KAAK,SACLN,UAAU,kBACVa,QAAS8F,EAHX,uBAOCxH,EAAiB9E,KAAI,SAACuJ,EAAK5F,GAC1B,OACE,cAAC,EAAD,CACEA,SAAUA,EACVmB,iBAAkBA,EAClBC,oBAAqBA,EACrBwE,IAAK5F,EACLqI,kBAAmBA,EACnBC,cAAeA,OAIpBI,GAAkBpK,GACjB,cAAC,EAAD,CACE0E,KAAM0F,EACNzF,OAAQ,kBAAMoF,GAAkB,IAChCnF,iBAAkB/B,EAClBgC,oBAAqB/B,EACrBiH,kBAAmBA,EACnBjF,WAAY9E,W,QC/FX2K,ICQXC,EACAC,GACAC,GACAC,GACAC,GACArM,GC/CWsM,GAxBG,SAAC,GAA+C,IAA7CpI,EAA4C,EAA5CA,iBAAkBC,EAA0B,EAA1BA,oBACrC,OACE,mCACE,qBAAKY,UAAU,sBAAf,SAIE,qBAAKA,UAAU,aAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,cAAC,EAAD,CACEb,iBAAkBA,EAClBC,oBAAqBA,IAEvB,cAAC,EAAD,CACED,iBAAkBA,EAClBC,oBAAqBA,cCiBpBoI,GA/BO,WACpB,MAAsBnI,mBAAS,cAA/B,mBAAO/E,EAAP,KAAYmN,EAAZ,KACA,EAA0CpI,mBAAS,IAAnD,mBAAOqI,EAAP,KAAsBC,EAAtB,KACA,EAAwCtI,mBACtCV,KAAKoB,MAAMpB,KAAKC,UAAUgJ,EAAa9K,QADzC,mBAAO+K,EAAP,KAAqBC,EAArB,KAKA,OAFAlI,QAAQC,IAAI,iBAAkBgI,GAG5B,eAACE,EAAA,EAAD,CACE5F,GAAG,yBACH6F,UAAW1N,EACX2N,SAAU,SAACC,GAAD,OAAOT,EAAOS,IACxBlI,UAAU,OAJZ,UAME,cAACmI,EAAA,EAAD,CAAKhC,SAAS,aAAa9E,MAAM,OAAjC,SACE,cAAC,EAAD,CACElC,iBAAkB0I,EAClBzI,oBAAqB0I,MAGzB,cAACK,EAAA,EAAD,CAAKhC,SAAS,YAAY9E,MAAM,QAAhC,SACE,cAAC,GAAD,CACElC,iBAAkBuI,EAClBtI,oBAAqBuI,U,2BF3BzBS,GAAkB,SAAC,GAIM,IAHPxE,EAGM,EAHNA,IACAyE,EAEM,EAFNA,YACAlG,EACM,EADNA,GAQhB,OANJ+E,EAAYxL,WAASC,QAAQiI,EAAIhH,mBAAoB,CAAEhB,KAAMyM,IAC7DlB,GAAgBD,EAAUzL,SAAS,aACnC2L,GAAcF,EAAUzL,SAAS,KACjC6L,GAAaJ,EAAUzL,SAAS,QAChC4L,GAAWH,EAAUzL,SAAS,KAG1B,mCACK4L,KAAagB,GACd,qCACA,sBAAKrI,UAAU,cAAf,UACI,qBAAIA,UAAU,aAAd,UAA4BmH,GAA5B,UAAkDvD,EAAIrH,WAAtD,gBAA+EqH,EAAIvH,aACnF,qBAAMwE,QAAS,kBAAMyH,WAASC,SAAUpG,EAAI,CACpBqG,QAAQ,EACRC,QAAS,GACTC,SAAU,OAHlC,SAKA,cAAC,IAAD,SAGJ,+CAAkBtB,GAAlB,SAAqCE,GAArC,OACA,4BAAI1D,EAAInH,UAAU8J,eAQxBoC,GAAmB,SAAC,GAIC,IAHH/E,EAGE,EAHFA,IACAyE,EAEE,EAFFA,YACAlG,EACE,EADFA,GAapB,OAXA+E,EAAYxL,WAASwB,WAAW0G,EAAItH,WAAY,cAChD6K,GAAgBD,EAAUzL,SAAS,aACnC4L,GAAWH,EAAUzL,SAAS,KAI1BR,GAD8B,mBAA9B2I,EAAInH,UAAUmM,YACP,0BAAsBhF,EAAInH,UAAU5B,KAApC,KAEA,2BAAuB+I,EAAInH,UAAU5B,KAArC,KAIP,mCACCwM,KAAagB,GACV,sBAAKrI,UAAU,cAAf,UACI,+BAAKmH,GAAL,KAAsBvD,EAAInH,UAAUoM,SAApC,IAA+C5N,MAC/C,qBAAM4F,QAAS,kBAAMyH,WAASC,SAAUpG,EAAI,CAChBqG,QAAQ,EACRC,QAAS,GACTC,SAAU,OAHtC,SAKI,cAAC,IAAD,YAuCLI,GApBiB,SAAC,GAAyB,IAAvBlF,EAAsB,EAAtBA,IAAKmF,EAAiB,EAAjBA,WAE9BV,EAAc,iBACdlG,EAAE,UAAM4G,EAAN,QAER,OAAInF,EAAIhH,mBACG,cAAC,GAAD,CACagH,IAAKA,EACLyE,YAAaA,EACblG,GAAIA,IAGjB,cAAC,GAAD,CACayB,IAAKA,EACLyE,YAAaA,EACblG,GAAIA,KGnEjB6G,OA/Bf,YAAwD,IAA9BpG,EAA6B,EAA7BA,QAASkB,EAAoB,EAApBA,YAAaF,EAAO,EAAPA,IAC5C,OACI,gCACI,6BAAKhB,IACD,6BACHkB,EAAYzJ,KAAI,SAAC0J,EAAMxJ,GACpB,IAAI4H,EAKJ,MAJgB,cAAZS,IACAT,EAAE,eAAWyB,EAAIrH,WAAf,gBAAiCqH,EAAIpH,UAArC,gBAAsDjC,IAIxD,qCACCwJ,EAAKxC,KACF,oBAAIY,GAAIA,EAAR,SACI,mBAAGrB,KAAMiD,EAAKxC,IAAd,SAAoBwC,EAAKlJ,UAG/BkJ,EAAKxC,KACH,6BACKwC,EAAKlJ,mBCoBnBoO,GArCe,SAAC,GAMK,IAC5BrG,EANwBsG,EAKG,EALHA,OACAC,EAIG,EAJHA,WACAC,EAGG,EAHHA,MACAC,EAEG,EAFHA,aACAzF,EACG,EADHA,IAiB5B,OAZIsF,GACIA,EAAO1G,QACH0G,IAAWC,EACXvG,EAAU,cACHsG,IAAWG,EAClBzG,EAAU,gBACHsG,IAAWE,IAClBxG,EAAU,sBAMlB,mCACCsG,GAAUA,EAAO1G,OACd,mCACA,cAAC,GAAD,CACYI,QAASA,EACTkB,YAAaoF,EAAO1G,MACpBoB,IAAKA,SCVd0F,GAxBc,SAACC,EAAU1F,EAAWsB,GAqB/C,OApBAhL,OAAOC,KAAKmP,GAAUvO,SAAQ,SAACyG,GAC3B,IAAI+H,EAUJ,IAPIA,EADc,aAAd3F,EACmB0F,EAAS9H,GAASkE,SAChB,YAAd9B,EACY0F,EAAS9H,GAASmE,QAElB2D,EAAS9H,GAASoE,YAKjC2D,EAAiBhH,MACjB,IAAK,IAAIiH,EAAI,EAAGA,EAAID,EAAiBhH,MAAMpE,OAAQqL,GAAK,EACpDtE,EAAa3K,KAAKgP,EAAiBhH,MAAMiH,OAKlDtE,GCkBIuE,OAlCf,YAIoC,IAO5B9G,EAVwB2G,EAGG,EAHHA,SACA1F,EAEG,EAFHA,UACAD,EACG,EADHA,IAGtBuB,EAAe,GAiBrB,OAfAmE,GAAqBC,EAAU1F,EAAWsB,GAItCA,EAAa/G,OAAS,IAGlBwE,EADc,aAAdiB,EACS,YACY,YAAdA,EACG,WAEA,cAKd,8BACI,cAAC,GAAD,CACYjB,QAASA,EACTkB,YAAaqB,EACbvB,IAAKA,OCmBd+F,GA/CmB,SAAC,GAAa,IAAX/F,EAAU,EAAVA,IAC3BuF,EAAavF,EAAInH,UAAUmN,SAAS9D,WACpCuD,EAAezF,EAAInH,UAAUmN,SAAS7D,aACtCqD,EAAQxF,EAAInH,UAAUoN,GAAG7D,MAE/B,OACI,qCACA,cAAC,GAAD,CACoBkD,OAAQC,EACRC,MAAOA,EACPD,WAAYA,EACZE,aAAcA,EACdzF,IAAKA,IAEzB,cAAC,GAAD,CACoBsF,OAAQE,EACRA,MAAOA,EACPD,WAAYA,EACZE,aAAcA,EACdzF,IAAKA,IAEzB,cAAC,GAAD,CACwB2F,SAAU3F,EAAInH,UACdoH,UAAU,WACVD,IAAKA,IAE7B,cAAC,GAAD,CACwB2F,SAAU3F,EAAInH,UACdoH,UAAU,UACVD,IAAKA,IAE7B,cAAC,GAAD,CACwB2F,SAAU3F,EAAInH,UACdoH,UAAU,YACVD,IAAKA,IAE7B,cAAC,GAAD,CACoBsF,OAAQG,EACRD,MAAOA,EACPD,WAAYA,EACZE,aAAcA,EACdzF,IAAKA,Q,SCnBlBkG,OAxBf,YAAgD,IAAjB3E,EAAgB,EAAhBA,aAC3B,OACI,6BACCA,EAAa9K,KAAI,SAAC0J,GAEf,OACI,qCACCA,EAAKxC,KACF,6BACI,mBAAGT,KAAMiD,EAAKxC,IAAd,SAAoBwC,EAAKlJ,UAG/BkJ,EAAKxC,KACH,6BACKwC,EAAKlJ,gBCKfkP,OAjBf,YAEyB,IAFHnG,EAEE,EAFFA,IACAjC,EACE,EADFA,aAGZqI,EAAa,GACbT,EAAW3F,EAAInH,UAKrB,OAFA6M,GAAqBC,EAAU5H,EAAcqI,GAGzC,6BACI,cAAC,GAAD,CAAqB7E,aAAc6E,OCUhCC,OAvBf,YAAiC,IAARrG,EAAO,EAAPA,IACfuF,EAAavF,EAAInH,UAAUmN,SAAS9D,WACpCuD,EAAezF,EAAInH,UAAUmN,SAAS7D,aACtCqD,EAAQxF,EAAInH,UAAUoN,GAAG7D,MAE/B,OACI,sBAAKhG,UAAU,iBAAf,UACI,cAAC,GAAD,CAAuBkJ,OAAQC,EACZC,MAAOA,EACPD,WAAYA,EACZE,aAAcA,EACdzF,IAAKA,IAExB,cAAC,GAAD,CAAuBsF,OAAQG,EACZD,MAAOA,EACPD,WAAYA,EACZE,aAAcA,EACdzF,IAAKA,QCgIrBsG,OA9If,YAA4D,IAKtDC,EACAC,EACAC,EAPyBC,EAA4B,EAA5BA,aAAcvB,EAAc,EAAdA,WAC3C,EAA8B1J,oBAAS,GAAvC,mBAAOkL,EAAP,KAAgBC,EAAhB,KAEMC,EAAQ/O,WAASgP,MACjBC,EAAaF,EAAMhP,SAAS,aAOf,OAAfsN,GAEFoB,EAAWzO,WAASgP,MAAME,QAAQ,SAClCP,EAAU3O,WAASgP,MAAMG,MAAM,SACxB,0BAAsBV,EAAS1O,SACpC,cADK,cAEA4O,EAAQ5O,SAAS,iBAGxB0O,EAAWzO,WAASgP,MAAME,QAAQ,QAClCP,EAAU3O,WAASgP,MAAMG,MAAM,QACxB,yBAAqBV,EAAS1O,SACnC,cADK,cAEA4O,EAAQ5O,SAAS,gBAG1B2O,EAAWD,EAIX,IAFA,IAAMW,EAAiB,GAEhBV,GAAYC,GACjBS,EAAetQ,KAAK4P,EAAS3O,SAAS,eACtC2O,EAAWA,EAASjM,KAAK,CAAErB,KAAM,IAKnC,IADA,IAAMiO,EAAkB,GArCiC,WAsChDxF,GACPpL,OAAOC,KAAKkQ,GAAcjQ,KAAI,SAACuJ,GACzBA,IAAQkH,EAAevF,IACzBwF,EAAgBvQ,KAAK8P,EAAa1G,QAH/B2B,EAAI,EAAGA,EAAIuF,EAAe1M,OAAQmH,GAAK,EAAI,EAA3CA,GAQT3F,QAAQC,IAAI,oBAAqBkL,GACjC,IAGIC,EAHEC,EAAiBR,EAAMhP,SAAS,cAStC,OARAmE,QAAQC,IAAI,kBAAmBoL,GAG3BX,EAAaW,KACfD,EAAO,UAAMjC,EAAN,iBAAyBuB,EAAaW,GAAgB1O,WAAtD,gBAAwE+N,EAAaW,GAAgBzO,YAE9GoD,QAAQC,IAAI,WAAYmL,GAGtB,sBAAKhL,UAAU,iBAAf,UACE,qBAAIA,UAAU,gBAAd,UACGsK,EAAaW,GACZ,sBACEjL,UAAU,aACVa,QAAS,kBACPyH,WAASC,SAASyC,EAAS,CACzBxC,QAAQ,EACRC,QAAS,GACTC,SAAU,OANhB,qBAUWiC,KAGX,sBAAK3K,UAAU,aAAaa,QAAS,kBAAM2J,GAAW,IAAtD,oBACUG,EACPJ,GAAW,sBAAMvK,UAAU,gBAAhB,yBAIhB,0BAGF,eAACkL,GAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACvJ,KAAK,KAAnC,UACE,gCACE,+BACE,uBACA,0CACA,2CACA,+CAGJ,gCACGiJ,EAAgB1Q,KAAI,SAACS,EAAMP,GAE1B,IAAM4M,EAAgBzL,WAASwB,WAC7BpC,EAAKwB,WACL,cACAb,SAAS,aAEL0G,EAAE,UAAM4G,EAAN,iBAAyBjO,EAAKyB,WAA9B,gBAAgDzB,EAAK0B,WAE7D,OACE,+BACE,qBAEEqE,QAAS,kBACPyH,WAASC,SAASpG,EAAI,CACpBqG,QAAQ,EACRC,QAAS,GACTC,SAAU,OAGd1I,UAAU,aATZ,UAWE,6BAAKmH,IACL,sCACQrM,EAAKyB,WACX,uBAFF,cAEuBzB,EAAKuB,gBAI9B,6BACE,cAAC,GAAD,CAAeuH,IAAKmH,EAAgBxQ,OAGtC,cAAC,GAAD,CACEqJ,IAAKmH,EAAgBxQ,GACrBoH,aAAa,aAEf,cAAC,GAAD,CACEiC,IAAKmH,EAAgBxQ,GACrBoH,aAAa,2BC/FhB2J,OArCf,YAA+D,IAApChB,EAAmC,EAAnCA,aAAcvB,EAAqB,EAArBA,WAAY1H,EAAS,EAATA,MAC7Cc,EAAE,UAAM4G,EAAN,QAGR,OADAnJ,QAAQC,IAAI,gBAAiByK,GAE3B,sBAAKtK,UAAU,UAAf,UACE,oBAAIA,UAAU,kBAAd,SAAiCqB,IACjC,mBAAGc,GAAIA,IAEP,cAAC,GAAD,CACEmI,aAAcA,EACdvB,WAAYA,IAEd,qBAAK/I,UAAU,gBAAf,SAEG7F,OAAOC,KAAKkQ,GAAcjQ,KAAI,SAACuJ,GAC9B,IAAMzB,EAAE,UAAM4G,EAAN,iBAAyBuB,EAAa1G,GAAKrH,WAA3C,gBAA6D+N,EAAa1G,GAAKpH,WAEvF,OACE,sBAAKwD,UAAU,YAAYmC,GAAIA,EAA/B,UAEE,cAAC,GAAD,CACEyB,IAAK0G,EAAa1G,GAClBmF,WAAYA,KAGZuB,EAAa1G,GAAKnH,UAAUmM,aAC5B,cAAC,GAAD,CAA0BhF,IAAK0G,EAAa1G,iB,oBCoF7C2H,OA9Gf,YAAoD,IAA7BjB,EAA4B,EAA5BA,aAAcvB,EAAc,EAAdA,WAC7B1K,EAAQ,GAEdlE,OAAOC,KAAKkQ,GAActP,SAAQ,SAAC4I,GAC5BvF,EAAMnD,SAASoP,EAAa1G,GAAKrH,aACpC8B,EAAM7D,KAAK8P,EAAa1G,GAAKrH,eAgBfb,WAASgP,MAM3B,IANA,IACMc,EAAiB9P,WAASgP,MAAME,QAAQ,QACxCa,EAAgB/P,WAASgP,MAAMG,MAAM,QACvCpK,EAAS+K,EACPE,EAAa,GAEZjL,GAAUgL,GACfC,EAAWlR,KAAKiG,EAAOhF,SAAS,eAChCgF,EAASA,EAAOtC,KAAK,CAAErB,KAAM,IAG/B8C,QAAQC,IAAI,cAAe6L,GAC3B,IAAMC,EAAa,GAiBnB,OAhBAD,EAAW1Q,SAAQ,SAACF,GAEhBwP,EAAaxP,KACZ6Q,EAAWzQ,SAASoP,EAAaxP,GAAMyB,aAExCoP,EAAWnR,KAAK8P,EAAaxP,GAAMyB,eAGvCqD,QAAQC,IAAI,aAAc8L,GASxB,sBAAK3L,UAAU,sBAAf,UACE,8CACA,eAAC4L,GAAA,EAAD,CACEhL,QAAQ,QACRiL,iBAAiB,SACjB7L,UAAU,cACV8L,aAAa,OAJf,UAME,cAACF,GAAA,EAAI1F,KAAL,UACE,cAAC0F,GAAA,EAAIG,KAAL,CACE5F,SAAS,SAETtF,QAAS,kBACPyH,WAASC,SAAT,UAAqBQ,EAArB,QAAuC,CACrCP,QAAQ,EACRC,QAAS,GACTC,SAAU,OAPhB,8BAcDrK,EAAMhE,KAAI,SAAC8B,EAAM5B,GAGhB,IAAMyR,EAAK,eAAWzR,EAAQ,GACxB4H,EAAE,UAAM4G,EAAN,iBAAyB5M,EAAzB,UAER,OACE,cAACyP,GAAA,EAAI1F,KAAL,UACE,eAAC0F,GAAA,EAAIG,KAAL,CACE5F,SAAU6F,EAEVnL,QAAS,kBACPyH,WAASC,SAASpG,EAAI,CACpBqG,QAAQ,EACRC,QAAS,GACTC,SAAU,OAPhB,kBAWQvM,EACLkC,EAAM9D,KAAWoR,EAAW,IAC3B,uBAAM3L,UAAU,uBAAhB,UACE,cAAC,KAAD,IACC,KAFH,8BClFHiM,OAff,YAGiB,IAFD3B,EAEA,EAFAA,aACAvB,EACA,EADAA,WAGZ,OACI,qBAAK/I,UAAU,UAAf,SACI,cAAC,GAAD,CAAasK,aAAcA,EACdvB,WAAYA,OCiBtBmD,OAzBf,YAAyC,IAInCnD,EAJmB5L,EAAe,EAAfA,KAAMkE,EAAS,EAATA,MACvBiJ,EAAe3L,KAAKoB,MAAMpB,KAAKC,UAAUzB,EAAKL,OAUpD,OALEiM,EADsB,gBAApB5L,EAAK5B,WACM,KAEA,KAIb,sBAAKyE,UAAU,kBAAf,UAEE,cAAC,GAAD,CAASsK,aAAcA,EAAcvB,WAAYA,IAEjD,cAAC,GAAD,CACEuB,aAAcA,EACdvB,WAAYA,EACZ1H,MAAOA,Q,kBCiDA8K,OAjEf,WACE,MAAsB9M,mBAAS,SAA/B,mBAAO/E,EAAP,KAAYmN,EAAZ,KACA,EAAoB2E,eAAdC,EAAN,EAAMA,KAAM9K,EAAZ,EAAYA,IAGZ,OACE,qCACE,eAACqK,GAAA,EAAD,CACEhL,QAAQ,OACRoH,UAAW1N,EACX2N,SAAU,SAACC,GAAD,OAAOT,EAAOS,IACxBlI,UAAU,OAJZ,UAME,cAAC4L,GAAA,EAAI1F,KAAL,UACE,cAAC0F,GAAA,EAAIG,KAAL,CAAU5F,SAAS,QAAnB,SACE,cAAC,KAAD,CAAMmG,GAAE,UAAK/K,EAAL,UAAR,wBAGJ,cAACqK,GAAA,EAAI1F,KAAL,UACE,cAAC0F,GAAA,EAAIG,KAAL,CAAU5F,SAAS,QAAnB,SACE,cAAC,KAAD,CAAMmG,GAAE,UAAK/K,EAAL,UAAR,wBAGJ,cAACqK,GAAA,EAAI1F,KAAL,UACE,cAAC0F,GAAA,EAAIG,KAAL,CAAU5F,SAAS,QAAnB,SACE,cAAC,KAAD,CAAMmG,GAAE,UAAK/K,EAAL,UAAR,2BAsBN,eAAC,KAAD,WACE,cAAC,KAAD,CAAOgL,OAAK,EAACF,KAAMA,EAAnB,SACE,cAAC,KAAD,CAAUC,GAAE,UAAKD,EAAL,cAEd,cAAC,KAAD,CAAOA,KAAI,UAAKA,EAAL,UAAX,SACE,cAAC,GAAD,CAAelP,KAAMqP,GAAOnL,MAAM,aAEpC,cAAC,KAAD,CAAOgL,KAAI,UAAKA,EAAL,UAAX,SACE,cAAC,GAAD,CAAelP,KAAMsP,EAAOpL,MAAM,aAEpC,cAAC,KAAD,CAAOgL,KAAI,UAAKA,EAAL,UAAX,SACE,cAAC,GAAD,CAAelP,KAAMuP,GAAOrL,MAAM,oBCpC7BsL,OAlBf,WACE,OACE,qBAAK3M,UAAU,MAAf,SAEE,cAAC,KAAD,UACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAOqM,KAAK,SAAZ,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOA,KAAK,aAAZ,SACE,cAAC,GAAD,cCVGO,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFzO,SAAS0O,eAAe,SAM1BZ,M","file":"static/js/main.af43a438.chunk.js","sourcesContent":["import { DateTime } from 'luxon';\nimport holidayData from './data/2021-sg-stat-holidays.json';\nimport basicsData from './data/basics-course-days.json';\nimport bootcampData from './data/bootcamp-course-days.json';\n\nconst publicHolidays = holidayData.PH;\nconst publicHolidayArray = [];\n// get array of all public holiday dates\nObject.keys(publicHolidays).map((key, index) => {\n    publicHolidayArray.push(key);\n});\n\nconst companyHolidays = holidayData.company;\nconst companyHolidayArray = [];\nconst winterBreak = [];\n// get array of all company holiday dates\nObject.keys(companyHolidays).map((key, index) => {\n    companyHolidayArray.push(key);\n    // get array of winter break dates\n    if(companyHolidays[key].name === 'winter break') {\n        winterBreak.push(companyHolidays[key].date);\n    }\n});\n\nconst phWithoutCh = [];\n// get array of public holidays not including those included in winter break\npublicHolidayArray.forEach((holiday) => {\n    if(!companyHolidayArray.includes(holiday)) {\n        phWithoutCh.push(holiday);\n    }\n});\n\n// helper function for getting utc date/time\nconst getLocalDateTime = (utc, timeString, courseName, courseType, date) => {\n    const changedFormat = date.toFormat(\"yyyy-MM-dd\");\n    if (courseType === 'Basics') {\n        utc = DateTime.fromISO(changedFormat + timeString, {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp FT' && Number(courseName) % 2 === 0) {\n        utc = DateTime.fromISO(changedFormat + 'T13:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if ((courseType === 'Bootcamp FT' && Number(courseName) % 2 !== 0) || (courseType === 'Bootcamp PT' && (date.weekday === 6))) {\n        utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp PT' && (date.weekday === 1)) {\n        utc = DateTime.fromISO(changedFormat + 'T19:30', {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp PT' && (date.weekday === 6)) {\n        utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n    }\n    return utc;\n}\n\n// helper function for deciding what goes in topLevelObject based on course type\nconst generateTopLevelObject = (courseType, topLevelObject) => {\n        if (courseType === 'Basics') {\n            topLevelObject = {\n                daysOfWeek: basicsData.daysOfWeek,\n                courseStartIndex: basicsData.courseStartIndex,\n                totalCourseDays: basicsData.totalCourseDays,\n                ...topLevelObject\n            };\n        } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            let bootcampDays;\n            if (courseType === 'Bootcamp FT') {\n                bootcampDays = bootcampData.daysOfWeek.fullTime;\n            } else {\n                bootcampDays = bootcampData.daysOfWeek.partTime;\n            }\n            topLevelObject = {\n                daysOfWeek: bootcampDays,\n                courseStartIndex: bootcampData.courseStartIndex,\n                totalCourseDays: bootcampData.totalCourseDays,\n                ...topLevelObject\n            }\n        }\n\n        return topLevelObject;\n    }\n\n// helper function that generates dateObj if the course date falls on a public holiday\nconst generateHolidayObject = (dateString, week, date, dateObj) => {\n    dateObj = {\n        courseDay: null,\n        courseDate: dateString,\n        courseWeek: week,\n        dayNumber: date.weekday,\n        dateTypes: {}\n    }\n\n    if (phWithoutCh.includes(dateString)) {\n        dateObj.dateTypes = publicHolidays[dateString];\n    } else {\n        dateObj.dateTypes = companyHolidays[dateString];\n    }\n\n    return dateObj;\n}\n\n// helper function that generates dateObj for a normal courseday\nconst generateCourseDayObject = (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay) => {\n    // get whatever index of basicsData that is specified by courseDayCount\n    dateObj = {\n        courseDate: dateString,\n        courseWeek: week,\n        weekDay: weekDay,\n        dayNumber: date.weekday,\n        meetingDateTimeUTC: utc,\n        };\n\n    // data is different for basics and bootcamp\n    if (courseType === 'Basics') {\n        dateObj = {\n            ...dateObj, ...basicsData.days[courseDay]\n        }\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            dateObj = {\n            ...dateObj, ...bootcampData.days[courseDay]\n        }\n    }\n    return dateObj;\n}\n\n// ##################################################################\n// ##################################################################\n\nconst generateDataObject = (startDate, courseName, courseType) => {\n    let date = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let utc;\n    utc = getLocalDateTime(utc, 'T16:00', courseName, courseType, date);\n    let dateWeek = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let classDatesCount = 1;\n    let week = 1;\n    let weekDay = 1;\n    let data;\n    let courseDayCount;\n    // starts from 0 because it's tracking the index of the json data file\n    let courseDay = 0;\n\n    let topLevelObject = {\n            courseType: courseType,\n            days: {}\n        };\n\n    data = generateTopLevelObject(courseType, topLevelObject);\n\n    // set the number of course days based on course type\n    if (courseType === 'Basics') {\n        courseDayCount = 13;\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n        courseDayCount = 115;\n    }\n\n    const dayArray = data.daysOfWeek;\n    let dayIndex = data.courseStartIndex;\n\n    while (courseDayCount > 0) {\n        const dateString = date.toFormat('dd-MM-yyyy');\n\n        // setting filename from start date, end date, courseName of course \n        // if this consition is met, dateString will be the end date of course\n        if (courseDay + 1 === data.totalCourseDays) {\n            // start date\n            const displayDate = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n            const displayName = `${displayDate.toFormat('dd-MM-yyyy')}_${dateString}_BATCH${courseName}`;\n            data.courseName = displayName;\n        }\n\n        let dateObj;\n        // if date is a public holiday\n        if (phWithoutCh.includes(dateString) || winterBreak.includes(dateString)) {\n            dateObj = generateHolidayObject (dateString, week, date, dateObj);\n\n        // if date is not a holiday\n        } else {\n            dateObj = generateCourseDayObject (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay);\n\n            // increase course days on days that classes are held,\n            // DO NOT increase course days on holidays\n            courseDayCount -= 1;\n            courseDay += 1;\n        }\n        data.days[dateString] = dateObj;\n\n        \n        if (classDatesCount === data.totalCourseDays && courseType === 'Basics') {\n            date = date.plus({ days: 2 }); \n            utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n            weekDay += 1;\n            week += 1;\n\n        } else {\n            // this is the end of the dayArray (last day of the week)\n            if ( dayIndex === dayArray.length -1) {\n                weekDay = 1;\n                week += 1;\n                dateWeek = dateWeek.plus({ weeks: 1 });\n                // return to beginning of array (return to beginning of week)\n                dayIndex = 0;\n                date = date.plus({ weeks: 1 }).set({ weekday: dayArray[dayIndex] })\n                utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n\n            } else {\n                // day with the week\n                dayIndex += 1;\n                date = date.set({ weekday: dayArray[dayIndex] })\n                utc = getLocalDateTime (utc, 'T13:00', courseName, courseType, date);\n\n                if (!phWithoutCh.includes(dateString)) {\n                    weekDay += 1;\n                }\n            }\n        }\n        // increase classDatesCount regardless of whether it is a public holiday\n        classDatesCount += 1;\n    }\n\n    return data;\n}\n\nexport default generateDataObject;","const download = (data, filename) => {\n        // from: https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\n        var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data));\n        var dlAnchorElem = document.createElement('a');\n        dlAnchorElem.setAttribute(\"href\",     dataStr     );\n        dlAnchorElem.setAttribute(\"download\", filename);\n        dlAnchorElem.click();\n    };\n\nexport default download;","import React, { useState } from \"react\";\nimport generateDataObject from \"../generateCourseDates.js\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport download from \"../download.js\";\n\nconst DatePicker = ({ bootcampDataCopy, setBootcampDataCopy }) => {\n  const [startDate, setStartDate] = useState(\"\");\n  const [courseName, setCourseName] = useState(\"\");\n  const [courseType, setCourseType] = useState(\"\");\n\n  const handleDownload = async (e) => {\n    try {\n      const data = await generateDataObject(startDate, courseName, courseType);\n      console.log(\"data.days\", data.days);\n      download(data, `${data.courseName}.json`);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleRender = async (e) => {\n    try {\n      const data = await generateDataObject(startDate, courseName, courseType);\n      console.log(\"data.days\", data.days);\n      await setBootcampDataCopy(JSON.parse(JSON.stringify(data.days)));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  console.log(\"bootcamp data copy\", bootcampDataCopy);\n\n  return (\n    <>\n      <div className=\"date-picker\">\n        <div>\n          <h2>Generate Schedule Data File</h2>\n        </div>\n        <div className=\"input-form-container\">\n          <Form className=\"input-form\">\n            <Form.Group className=\"mb-3 input\" controlId=\"formDate\">\n              <Form.Label>Start Date</Form.Label>\n              <Form.Control\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Batch Number</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={courseName}\n                onChange={(e) => setCourseName(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Course Type</Form.Label>\n              <Form.Select\n                aria-label=\"Default select example\"\n                onChange={(e) => setCourseType(e.target.value)}\n              >\n                <option>Select course type</option>\n                <option value=\"Basics\">Basics</option>\n                <option value=\"Bootcamp FT\">Bootcamp FT</option>\n                <option value=\"Bootcamp PT\">Bootcamp PT</option>\n              </Form.Select>\n            </Form.Group>\n          </Form>\n          <div className=\"submit-button-container\">\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={(e) => {\n                handleRender(e);\n              }}\n            >\n              Render Schedule\n            </Button>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={(e) => {\n                handleDownload(e);\n              }}\n            >\n              Download Schedule\n            </Button>\n          </div>\n          <br></br>\n          <div>\n            <a href=\"https://github.com/rocketacademy/scheduler\">\n              link to GitHub repo\n            </a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DatePicker;\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nfunction AddItemModal({\n  show,\n  onHide,\n  bootcampdatacopy,\n  setbootcampdatacopy,\n  coursedate,\n}) {\n  const [title, setTitle] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [section, setSection] = useState(\"\");\n  const [sectionClass, setSectionClass] = useState(\"\");\n\n  const handleAddItem = (e) => {\n    e.preventDefault();\n\n    const newItem = {\n      name: title,\n      url: url,\n    };\n\n    if (!bootcampdatacopy[coursedate].dateTypes[section][sectionClass].items) {\n      bootcampdatacopy[coursedate].dateTypes[section][sectionClass].items = [];\n    }\n\n    bootcampdatacopy[coursedate].dateTypes[section][sectionClass].items.push(\n      newItem\n    );\n    console.log(bootcampdatacopy);\n    setbootcampdatacopy({ ...bootcampdatacopy });\n  };\n\n  return (\n    <Modal\n      show={show}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"add-input-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"add-input-modal\">Add an item</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Group className=\"mb-3\" controlId=\"title\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\" controlId=\"url\">\n            <Form.Label>URL</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter URL\"\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Label>Section</Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSection(e.target.value)}\n          >\n            <option>choose section</option>\n            <option value=\"general\">general</option>\n            <option value=\"css\">css</option>\n            <option value=\"ux\">ux</option>\n            <option value=\"projects\">projects</option>\n            <option value=\"cp\">cp</option>\n            <option value=\"dsa\">dsa</option>\n          </Form.Select>\n\n          <Form.Label>Class </Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSectionClass(e.target.value)}\n          >\n            <option>choose class type</option>\n            <option value=\"preClass\">preClass</option>\n            <option value=\"postClass\">postClass</option>\n            <option value=\"inClass\">inClass</option>\n            {section === \"projects\" && (\n              <>\n                <option value=\"projectDue\">projectDue</option>\n                <option value=\"projectStart\">projectStart</option>\n              </>\n            )}\n            {section === \"cp\" && <option value=\"cpDue\">cpDue</option>}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleAddItem(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default AddItemModal;\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nfunction ShiftItemModal({\n  show,\n  onHide,\n  shiftitem,\n  bootcampdatacopy,\n  setbootcampdatacopy,\n  sectiontype,\n  classtype,\n  classindex,\n  section,\n}) {\n  const [selectedDate, setSelectedDate] = useState(\"\");\n\n  let heading;\n  if (shiftitem.direction === \"up\") {\n    heading = \"Moving back ... \";\n  } else {\n    heading = \"Moving forward ... \";\n  }\n\n  const handleSubmitDate = (e) => {\n    e.preventDefault();\n\n    let selectedItem = sectiontype[classtype].items[classindex];\n\n    console.log(\"selected item\", selectedItem);\n\n    sectiontype[classtype].items.splice(classindex, 1);\n\n    // if items array is empty after removing selected item, remove empty items array\n    if (sectiontype[classtype].items.length === 0) {\n      delete sectiontype[classtype].items;\n    }\n\n    console.log(classtype);\n\n    const targetDay = bootcampdatacopy[selectedDate].dateTypes[section];\n    console.log(targetDay[classtype]);\n\n    if (!targetDay[classtype].items) {\n      targetDay[classtype].items = [];\n    }\n\n    targetDay[classtype].items.push(selectedItem);\n    console.log(bootcampdatacopy);\n    bootcampdatacopy.constructor === Array\n      ? setbootcampdatacopy([...bootcampdatacopy])\n      : setbootcampdatacopy({ ...bootcampdatacopy });\n  };\n\n  return (\n    <Modal\n      show={show}\n      shiftitem={shiftitem}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"item-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"item-modal\">{heading}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"days\"\n            onChange={(e) => setSelectedDate(e.target.value)}\n          >\n            <option>--</option>\n            {shiftitem.dates.map((date) => {\n              if (typeof date === \"number\") {\n                return (\n                  <>\n                    <option value={date}>\n                      Day {bootcampdatacopy[date].courseDay}\n                    </option>\n                    ;\n                  </>\n                );\n              } else {\n                return (\n                  <>\n                    <option value={date}>{date}</option>;\n                  </>\n                );\n              }\n            })}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleSubmitDate(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default ShiftItemModal;\n","import React, { useState } from \"react\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport ShiftItemModal from \"./ShiftItemModal\";\n\nfunction ClassItem({\n  day,\n  setBootcampDataCopy,\n  section,\n  bootcampDataCopy,\n  classType,\n  sectionType,\n  item,\n  dayIndex,\n  classIndex,\n}) {\n  // toggle visibility of buttons\n  const [buttonsVisible, setButtonsVisible] = useState(false);\n  const [modalShow, setModalShow] = useState(false);\n  const [shiftItem, setShiftItem] = useState({\n    direction: null,\n    dates: [],\n  });\n\n  const handleShift = (direction, dayIndex, classIndex) => {\n    let datesArray = [];\n    console.log(dayIndex);\n\n    if (direction === \"up\") {\n      console.log(bootcampDataCopy);\n      bootcampDataCopy.constructor === Object\n        ? Object.keys(bootcampDataCopy)\n            .filter(\n              (date) =>\n                bootcampDataCopy[date].courseDay < dayIndex + 1 &&\n                bootcampDataCopy[date].courseDay !== null\n            )\n            .map((date) => {\n              if (!datesArray.includes(date)) {\n                datesArray.push(date);\n              }\n            })\n        : bootcampDataCopy\n            .filter((date) => bootcampDataCopy.indexOf(date) < dayIndex)\n            .map((date) => {\n              if (!datesArray.includes(bootcampDataCopy.indexOf(date))) {\n                datesArray.push(bootcampDataCopy.indexOf(date));\n              }\n            });\n\n      setShiftItem({\n        ...shiftItem,\n        direction: \"up\",\n        dates: datesArray,\n      });\n\n      setModalShow(true);\n    } else if (direction === \"down\") {\n      bootcampDataCopy.constructor === Object\n        ? Object.keys(bootcampDataCopy)\n            .filter(\n              (date) =>\n                bootcampDataCopy[date].courseDay > dayIndex + 1 &&\n                bootcampDataCopy[date].courseDay !== null\n            )\n            .map((date) => {\n              if (!datesArray.includes(date)) {\n                datesArray.push(date);\n              }\n            })\n        : bootcampDataCopy\n            .filter((date) => bootcampDataCopy.indexOf(date) > dayIndex)\n            .map((date) => {\n              if (!datesArray.includes(bootcampDataCopy.indexOf(date))) {\n                datesArray.push(bootcampDataCopy.indexOf(date));\n              }\n            });\n\n      setShiftItem({\n        ...shiftItem,\n        direction: \"down\",\n        dates: datesArray,\n      });\n\n      setModalShow(true);\n    } else {\n      sectionType[classType].items.splice(classIndex, 1);\n      setBootcampDataCopy({ ...bootcampDataCopy });\n      console.log(bootcampDataCopy);\n    }\n  };\n\n  return (\n    <div>\n      <div\n        className=\"class-item\"\n        onMouseEnter={() => setButtonsVisible(true)}\n        onMouseLeave={() => setButtonsVisible(false)}\n      >\n        {item.name}\n        {buttonsVisible && (\n          <div>\n            <button onClick={() => handleShift(\"delete\", dayIndex, classIndex)}>\n              <RemoveIcon />\n            </button>\n            <button onClick={() => handleShift(\"up\", dayIndex, classIndex)}>\n              <ExpandLessIcon />\n            </button>\n            <button onClick={() => handleShift(\"down\", dayIndex, classIndex)}>\n              <ExpandMoreIcon />\n            </button>\n          </div>\n        )}\n        {modalShow && (\n          <ShiftItemModal\n            show={modalShow}\n            onHide={() => setModalShow(false)}\n            shiftitem={shiftItem}\n            bootcampdatacopy={bootcampDataCopy}\n            setbootcampdatacopy={setBootcampDataCopy}\n            sectiontype={sectionType}\n            classtype={classType}\n            classindex={classIndex}\n            section={section}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ClassItem;\n","import React, { useState } from \"react\";\nimport ClassItem from \"./ClassItem\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport AddItemModal from \"./AddItemModal\";\n\nfunction SectionClass({\n  day,\n  sectionIndex,\n  sectionclass,\n  sectionType,\n  bootcampDataCopy,\n  setBootcampDataCopy,\n  section,\n  dayIndex,\n}) {\n  const [classButtonsVisible, setClassButtonsVisible] = useState(false);\n\n  const [showInputModal, setShowInputModal] = useState(false);\n  // helper function that maps each element in section array to a new course day\n  const shiftSection = (sectionArray, startDay, bootcampDataCopy) => {\n    sectionArray.forEach((element, index) => {\n      console.log(\"day index\", dayIndex);\n      if (element !== null) {\n        if (\n          bootcampDataCopy[startDay + index].dateTypes[section][sectionclass]\n            .items\n        ) {\n          sectionArray[index].forEach((item) => {\n            bootcampDataCopy[startDay + index].dateTypes[section][\n              sectionclass\n            ].items.push(item);\n          });\n        } else {\n          bootcampDataCopy[startDay + index].dateTypes[section][\n            sectionclass\n          ].items = sectionArray[index];\n        }\n      }\n    });\n    return bootcampDataCopy;\n  };\n\n  const handleClassShift = (direction, dayIndex) => {\n    // puts all the items in selected class in an array and deletes them from their original position\n    const sectionArray = [];\n    for (let i = dayIndex; i < bootcampDataCopy.length - 1; i += 1) {\n      if (bootcampDataCopy[i].dateTypes[section][sectionclass].items) {\n        const selectedSection =\n          bootcampDataCopy[i].dateTypes[section][sectionclass].items;\n        sectionArray.push(selectedSection);\n        delete bootcampDataCopy[i].dateTypes[section][sectionclass].items;\n      } else {\n        sectionArray.push(null);\n      }\n    }\n\n    let startDay;\n    // when user clicks the down button, items are put into section/class of the next day\n    if (direction === \"down\") {\n      startDay = dayIndex + 1;\n      bootcampDataCopy = shiftSection(sectionArray, startDay, bootcampDataCopy);\n    } else {\n      // when user clicks the up button, items are put into section/class of the previous day\n      startDay = dayIndex - 1;\n      bootcampDataCopy = shiftSection(sectionArray, startDay, bootcampDataCopy);\n    }\n\n    console.log(\"boot camp data copy\", bootcampDataCopy);\n    setBootcampDataCopy([...bootcampDataCopy]);\n  };\n\n  return (\n    <div>\n      {sectionType[sectionclass].items && (\n        <div className=\"section-class\">\n          <div className=\"class-title\">{sectionclass}</div>\n          <div className=\"class-items\">\n            {sectionType[sectionclass].items.map((item, classIndex) => {\n              const id = `day-${dayIndex}-section-${section}-class-${sectionclass}-${classIndex}`;\n              return (\n                <ClassItem\n                  day={day}\n                  sectionclass={sectionclass}\n                  bootcampDataCopy={bootcampDataCopy}\n                  setBootcampDataCopy={setBootcampDataCopy}\n                  section={section}\n                  classType={sectionclass}\n                  sectionType={sectionType}\n                  item={item}\n                  dayIndex={dayIndex}\n                  classIndex={classIndex}\n                />\n              );\n            })}\n          </div>\n          <div\n            className=\"section-class-header\"\n            onMouseEnter={() => setClassButtonsVisible(true)}\n            onMouseLeave={() => setClassButtonsVisible(false)}\n          >\n            {classButtonsVisible && (\n              <div>\n                <button\n                  onClick={() => handleClassShift(\"up\", dayIndex, sectionIndex)}\n                >\n                  <ExpandLessIcon />\n                </button>\n                <button\n                  onClick={() =>\n                    handleClassShift(\"down\", dayIndex, sectionIndex)\n                  }\n                >\n                  <ExpandMoreIcon />\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SectionClass;\n","import React from \"react\";\nimport SectionClass from \"./SectionClass\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction Section({\n  day,\n  setBootcampDataCopy,\n  section,\n  sectionType,\n  dayIndex,\n  bootcampDataCopy,\n}) {\n  // variable classExists is created to track if any class of a section exists (it is initially set to false)\n  // if any class of a section exists, classExists is set to true\n  // if classExists is true, a header for this section will be created\n  let classExists = false;\n  if (sectionType.constructor === Object) {\n    if (\n      sectionType.preClass.items ||\n      sectionType.inClass.items ||\n      sectionType.postClass.items ||\n      (sectionType === \"projects\" &&\n        (sectionType.projectDue.items || sectionType.projectStart.items)) ||\n      (sectionType === \"cp\" && sectionType.cpDue.items)\n    ) {\n      classExists = true;\n    }\n  }\n\n  return (\n    <div>\n      {sectionType.constructor === Object && (\n        <>\n          <Accordion>\n            {classExists && (\n              <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>{sectionType.type}</Accordion.Header>\n                <Accordion.Body>\n                  {Object.keys(sectionType)\n                    .filter((sectionClass) => sectionType[sectionClass].items)\n                    .map((sectionclass, sectionIndex) => {\n                      return (\n                        <div className=\"all-classes\">\n                          <SectionClass\n                            day={day}\n                            sectionIndex={sectionIndex}\n                            sectionclass={sectionclass}\n                            sectionType={sectionType}\n                            bootcampDataCopy={bootcampDataCopy}\n                            setBootcampDataCopy={setBootcampDataCopy}\n                            section={section}\n                            dayIndex={dayIndex}\n                          />\n                        </div>\n                      );\n                    })}\n                </Accordion.Body>\n              </Accordion.Item>\n            )}\n          </Accordion>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Section;\n","import React, { useState } from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Section from \"./Section\";\n\nfunction MainAccordion({\n  dayIndex,\n  bootcampDataCopy,\n  setBootcampDataCopy,\n  day,\n  setShowInputModal,\n  setCourseDate,\n}) {\n  const handlePlusClick = (day) => {\n    console.log(day);\n    setCourseDate(day);\n    setShowInputModal(true);\n  };\n\n  return (\n    <div>\n      {bootcampDataCopy[day].dateTypes.module && (\n        <Accordion>\n          <Accordion.Item eventKey={dayIndex}>\n            <Accordion.Header>\n              <div\n                className=\"course-day-symbol\"\n                onClick={() => handlePlusClick(day)}\n              >\n                {\" \"}\n                <AddIcon />\n              </div>\n              <div className=\"course-day-header\">\n                {bootcampDataCopy.constructor === Object ? (\n                  <>\n                    {day}, Week: {bootcampDataCopy[day].courseWeek}, Course Day:{\" \"}\n                    {bootcampDataCopy[day].courseDay},{\" \"}\n                    {bootcampDataCopy[day].dateTypes.module}{\" \"}\n                  </>\n                ) : (\n                  <>\n                    Course Day: {bootcampDataCopy[day].courseDay},{\" \"}\n                    {bootcampDataCopy[day].dateTypes.module}{\" \"}\n                  </>\n                )}\n              </div>\n            </Accordion.Header>\n            <Accordion.Body>\n              <div className=\"course-day\">\n                <div>\n                  {Object.keys(bootcampDataCopy[day].dateTypes).map(\n                    (section) => (\n                      <Section\n                        day={day}\n                        setBootcampDataCopy={setBootcampDataCopy}\n                        section={section}\n                        sectionType={bootcampDataCopy[day].dateTypes[section]}\n                        dayIndex={dayIndex}\n                        bootcampDataCopy={bootcampDataCopy}\n                      />\n                    )\n                  )}\n                </div>\n              </div>\n            </Accordion.Body>\n          </Accordion.Item>\n        </Accordion>\n      )}\n    </div>\n  );\n}\n\nexport default MainAccordion;\n","import React, { useState } from \"react\";\nimport AddItemModal from \"./AddItemModal\";\nimport MainAccordion from \"./MainAccordion\";\nimport Button from \"react-bootstrap/Button\";\nimport download from \"../download\";\n\nconst GenerateDataShiftContent = ({\n  bootcampDataCopy,\n  setBootcampDataCopy,\n}) => {\n  const [showInputModal, setShowInputModal] = useState(false);\n  const [courseDate, setCourseDate] = useState(\"\");\n\n  const handleDownloadMainClick = () => {\n    console.log(\"main data file mod\", bootcampDataCopy);\n    download(bootcampDataCopy, \"modified-main-data-file.json\");\n  };\n\n  const handleBatchDownloadClick = () => {\n    console.log(\"batch data copy\", bootcampDataCopy);\n    download(\n      bootcampDataCopy,\n      `modified-${bootcampDataCopy.courseName}-file.json`\n    );\n  };\n\n  const handleClose = () => {\n    const element = document.getElementsByClassName(\n      \"accordion-collapse collapse show\"\n    );\n\n    console.log(\"element\", element);\n    Array.from(element).forEach((subelement) => {\n      console.log(subelement);\n      subelement.classList.remove(\"show\");\n    });\n  };\n\n  return (\n    <>\n      {bootcampDataCopy.constructor === Object &&\n        Object.keys(bootcampDataCopy).length > 0 && (\n          <div>\n            <div className=\"download-button-container\">\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={handleBatchDownloadClick}\n              >\n                Download File\n              </Button>\n            </div>\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              onClick={handleClose}\n            >\n              close all\n            </button>\n            {Object.keys(bootcampDataCopy).map((day, dayIndex) => {\n              return (\n                <>\n                  <MainAccordion\n                    dayIndex={dayIndex}\n                    bootcampDataCopy={bootcampDataCopy}\n                    setBootcampDataCopy={setBootcampDataCopy}\n                    day={day}\n                    setShowInputModal={setShowInputModal}\n                    setCourseDate={setCourseDate}\n                  />\n                  {/* {bootcampDataCopy[day].dateTypes.module && (\n                    <Accordion>\n                      <Accordion.Item eventKey={dayIndex}>\n                        <Accordion.Header>\n                          <div\n                            className=\"course-day-symbol\"\n                            onClick={() => handlePlusClick(day)}\n                          >\n                            {\" \"}\n                            <AddIcon />\n                          </div>\n                          <div className=\"course-day-header\">\n                            {day}, Week: {bootcampDataCopy[day].courseWeek},\n                            Course Day: {bootcampDataCopy[day].courseDay},{\" \"}\n                            {bootcampDataCopy[day].dateTypes.module}{\" \"}\n                          </div>\n                        </Accordion.Header>\n                        <Accordion.Body>\n                          <div className=\"course-day\">\n                            <div>\n                              {Object.keys(bootcampDataCopy[day].dateTypes).map(\n                                (section) => (\n                                  <Section\n                                    day={day}\n                                    setBootcampDataCopy={setBootcampDataCopy}\n                                    section={section}\n                                    sectionType={\n                                      bootcampDataCopy[day].dateTypes[section]\n                                    }\n                                    dayIndex={dayIndex}\n                                    bootcampDataCopy={bootcampDataCopy}\n                                  />\n                                )\n                              )}\n                            </div>\n                          </div>\n                        </Accordion.Body>\n                      </Accordion.Item>\n                    </Accordion>\n                  )} */}\n                </>\n              );\n            })}\n            {showInputModal && courseDate && (\n              <AddItemModal\n                show={showInputModal}\n                onHide={() => setShowInputModal(false)}\n                bootcampdatacopy={bootcampDataCopy}\n                setbootcampdatacopy={setBootcampDataCopy}\n                setShowInputModal={setShowInputModal}\n                coursedate={courseDate}\n              />\n            )}\n          </div>\n        )}\n      {bootcampDataCopy.constructor === Array && (\n        <div className=\"accordion-container\">\n          <div className=\"download-button-container\">\n            <button\n              className=\"btn btn-primary\"\n              onClick={handleDownloadMainClick}\n            >\n              download modified file\n            </button>\n          </div>\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary\"\n            onClick={handleClose}\n          >\n            close all\n          </button>\n          {bootcampDataCopy.map((day, dayIndex) => {\n            return (\n              <MainAccordion\n                dayIndex={dayIndex}\n                bootcampDataCopy={bootcampDataCopy}\n                setBootcampDataCopy={setBootcampDataCopy}\n                day={dayIndex}\n                setShowInputModal={setShowInputModal}\n                setCourseDate={setCourseDate}\n              />\n            );\n          })}\n          {showInputModal && courseDate && (\n            <AddItemModal\n              show={showInputModal}\n              onHide={() => setShowInputModal(false)}\n              bootcampdatacopy={bootcampDataCopy}\n              setbootcampdatacopy={setBootcampDataCopy}\n              setShowInputModal={setShowInputModal}\n              coursedate={courseDate}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateDataShiftContent;\n","import React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { scroller } from \"react-scroll\";\nimport { DateTime } from \"luxon\";\n\nfunction DataShiftSidebar({ bootcampDataCopy }) {\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleChooseDate = (e) => {\n    e.preventDefault();\n    console.log(\"insede choose data\");\n\n    const editDate = DateTime.fromFormat(selectedDate, \"yyyy-MM-dd\").toFormat(\n      \"dd-MM-yyyy\"\n    );\n    console.log(editDate);\n    console.log(bootcampDataCopy);\n    console.log(bootcampDataCopy[editDate]);\n    let id;\n\n    if (bootcampDataCopy[editDate] !== undefined) {\n      setErrorMessage(\"\");\n      id = `schedule-week-${bootcampDataCopy[editDate].courseWeek}-day-${bootcampDataCopy[editDate].courseDay}`;\n\n      scroller.scrollTo(id, {\n        smooth: true,\n        offset: -70,\n        duration: 100,\n      });\n    } else {\n      setErrorMessage(`${editDate} not found`);\n    }\n  };\n\n  return (\n    <div className=\"edit-schedule-container\">\n      <Form className=\"edit-schedule\">\n        <Form.Group className=\"mb-3 input\" controlId=\"formDate\">\n          <Form.Label>Choose Date</Form.Label>\n          <p className=\"error-message\">{errorMessage}</p>\n          <Form.Control\n            type=\"date\"\n            value={selectedDate}\n            onChange={(e) => setSelectedDate(e.target.value)}\n          />\n        </Form.Group>\n        <div className=\"submit-button-container\">\n          <Button\n            variant=\"info\"\n            type=\"submit\"\n            onClick={(e) => {\n              handleChooseDate(e);\n            }}\n          >\n            Go to Date\n          </Button>\n        </div>\n      </Form>\n      <br></br>\n      <br></br>\n    </div>\n  );\n}\n\nexport default DataShiftSidebar;\n","import React from 'react';\nimport { DateTime } from 'luxon';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport { scroller } from 'react-scroll';\n\n// helper function that generates course day header for a normal course day\nconst NormalCourseDay = ({ \n                        day, \n                        timeZoneSet,\n                        id\n                        }) => {\n    localDate = DateTime.fromISO(day.meetingDateTimeUTC, { zone: timeZoneSet });\n    formattedDate = localDate.toFormat('EEE d MMM');\n    meetingTime = localDate.toFormat('t');\n    timeOffset = localDate.toFormat('ZZZZ');\n    timeZone = localDate.toFormat('z');\n\n        return (\n        <>\n            {timeZone === timeZoneSet && (\n            <>\n            <div className=\"main-header\">\n                <h3 className=\"day-header\">{formattedDate}, Week {day.courseWeek}, Course Day {day.courseDay}</h3>\n                <div  onClick={() => scroller.scrollTo( id, {\n                                        smooth: true,\n                                        offset: -70,\n                                        duration: 100,\n                                    })}>\n                <ExpandLessIcon />\n                </div>\n            </div>\n            <p>Meeting Time: {meetingTime} SGT ({timeOffset})</p>\n            <p>{day.dateTypes.module}</p>\n            </>\n            )}\n        </>\n        )\n}\n\n// helper function that generates courseday header for a holiday\nconst HolidayCourseDay = ({ \n                        day, \n                        timeZoneSet,\n                        id \n                    }) => {\n    localDate = DateTime.fromFormat(day.courseDate, 'dd-MM-yyyy');\n    formattedDate = localDate.toFormat('EEE d MMM');\n    timeZone = localDate.toFormat('z');\n    // depending on if the holiday is a public/company holiday, \n    // a different output will be rendered\n    if (day.dateTypes.holidayType === 'public holiday') {\n        holiday = `Public Holiday (${day.dateTypes.name})`;\n    } else {\n        holiday = `Company Holiday (${day.dateTypes.name})`;\n    }\n    \n    return (\n        <>\n        {timeZone === timeZoneSet && (\n            <div className=\"main-header\">\n                <h2>{formattedDate}: {day.dateTypes.location} {holiday}</h2>\n                <div  onClick={() => scroller.scrollTo( id, {\n                                            smooth: true,\n                                            offset: -70,\n                                            duration: 100,\n                                        })}>\n                    <ExpandLessIcon />\n                </div>\n            </div>\n        )}\n        </>\n    )\n}\n\nlet localDate;\nlet formattedDate;\nlet meetingTime;\nlet timeZone;\nlet timeOffset;\nlet holiday;\n\n// ######################################################\n// ######################################################\n\n// function that generates the header for each course day\nconst GenerateCourseDayHeader = ({ day, coursetype }) => {\n    // this is the timezone of the area we are in \n    const timeZoneSet = 'Asia/Singapore';\n    const id = `${coursetype}-top`\n\n    if (day.meetingDateTimeUTC) {\n        return <NormalCourseDay \n                            day={day} \n                            timeZoneSet={timeZoneSet} \n                            id={id}\n                            />\n    } else {\n        return <HolidayCourseDay \n                            day={day} \n                            timeZoneSet={timeZoneSet} \n                            id={id}\n                            />\n    }\n}\n\nexport default GenerateCourseDayHeader;\n","import React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport download from \"../download.js\";\nimport ptbc1 from \"../data/16-08-2021_10-10-2022_BATCH1.json\";\nimport GenerateDataShiftContent from \"./GenerateDataShiftContent\";\nimport DataShiftSidebar from \"./DataShiftSidebar.jsx\";\nimport DatePicker from \"./DatePicker.jsx\";\n\nconst DataShift = ({ bootcampDataCopy, setBootcampDataCopy }) => {\n  return (\n    <>\n      <div className=\"datashift-container\">\n        {/* <div className=\"datashift-button-container\">\n          <DataShiftSidebar bootcampDataCopy={bootcampDataCopy} />\n        </div> */}\n        <div className=\"data-shift\">\n          <div className=\"data-container\">\n            <DatePicker\n              bootcampDataCopy={bootcampDataCopy}\n              setBootcampDataCopy={setBootcampDataCopy}\n            />\n            <GenerateDataShiftContent\n              bootcampDataCopy={bootcampDataCopy}\n              setBootcampDataCopy={setBootcampDataCopy}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DataShift;\n","import React, { useState } from \"react\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport DatePicker from \"./DatePicker\";\nimport DataShift from \"./DataShift\";\nimport MainAccordion from \"./MainAccordion\";\nimport mainDataFile from \"../data/bootcamp-course-days.json\";\nimport GenerateDataShiftContent from \"./GenerateDataShiftContent\";\n\nconst TabsContainer = () => {\n  const [key, setKey] = useState(\"datePicker\");\n  const [batchDataCopy, setBatchDataCopy] = useState({});\n  const [mainDataCopy, setMainDataCopy] = useState(\n    JSON.parse(JSON.stringify(mainDataFile.days))\n  );\n  console.log(\"main data copy\", mainDataCopy);\n\n  return (\n    <Tabs\n      id=\"controlled-tab-example\"\n      activeKey={key}\n      onSelect={(k) => setKey(k)}\n      className=\"mb-3\"\n    >\n      <Tab eventKey=\"datePicker\" title=\"Main\">\n        <GenerateDataShiftContent\n          bootcampDataCopy={mainDataCopy}\n          setBootcampDataCopy={setMainDataCopy}\n        />\n      </Tab>\n      <Tab eventKey=\"dataShift\" title=\"Batch\">\n        <DataShift\n          bootcampDataCopy={batchDataCopy}\n          setBootcampDataCopy={setBatchDataCopy}\n        />\n      </Tab>\n    </Tabs>\n  );\n};\n\nexport default TabsContainer;\n","import React from 'react';\n\nfunction DisplaySection({ heading, sectionType, day }) {\n    return (\n        <div>\n            <h5>{heading}</h5>\n                <ul>\n            {sectionType.map((item, index) => {\n                let id;\n                if (heading === 'Pre Class') {\n                    id = `week-${day.courseWeek}-day-${day.dayNumber}-gpc-${index}`;\n                } \n\n                return (\n                    <>\n                    {item.url && (\n                        <li id={id}>\n                            <a href={item.url}>{item.name}</a>\n                        </li>\n                    )}\n                    {!item.url && (\n                        <li>\n                            {item.name}\n                        </li>\n                    )}\n                    </>\n                )\n            })}\n            </ul>\n        </div>\n    )\n}\n\nexport default DisplaySection\n","import React from 'react';\nimport DisplaySection from './DisplaySection';\n\n// if sections project due/ project start/ cp due exist in a course day, \n// this function will generate a header and content for these sections\nconst GenerateNotifications = ({ \n                                status, \n                                projectdue, \n                                cpdue, \n                                projectstart, \n                                day\n                             }) => {\n    let heading;\n\n    // generates header for the section\n    if (status) {\n        if (status.items) {\n            if (status === projectdue) {\n                heading = 'Project Due';\n            } else if (status === projectstart) {\n                heading = 'Project Start';\n            } else if (status === cpdue) {\n                heading = 'Inteview Prep due';\n            }\n        }\n    }\n\n    return (\n        <>\n        {status && status.items && (\n            <>\n            <DisplaySection \n                        heading={heading} \n                        sectionType={status.items} \n                        day={day} \n                        />\n            </>\n        )}\n    </>\n    )  \n}\n\nexport default GenerateNotifications;","const generateSectionArray = (datetype, classType, sectionArray) => {\n    Object.keys(datetype).forEach((section) => {\n        let classTypeSection;\n    // classTypeSection is determined by what classType is\n        if (classType === 'preClass') {\n            classTypeSection = datetype[section].preClass;\n        } else if (classType === 'inClass') {\n            classTypeSection = datetype[section].inClass;\n        } else {\n            classTypeSection = datetype[section].postClass;\n        } \n\n        if (classTypeSection) {\n            // if there are items in classTypeSection, the items are pushed into sectionArray\n            if (classTypeSection.items) {\n                for (let x = 0; x < classTypeSection.items.length; x += 1) {\n                    sectionArray.push(classTypeSection.items[x]);\n                }\n            }\n        }\n    })\n    return sectionArray;\n}\n\nexport default generateSectionArray;","import React from 'react';\nimport DisplaySection from './DisplaySection';\nimport generateSectionArray from '../generateSectionArray';\n\n\nfunction GenerateDatetypeSections ({ \n                                datetype, \n                                classType, \n                                day \n                                }) { \n    // stores items that are in a particular section of a datetype\n    const sectionArray = [];\n\n    generateSectionArray(datetype, classType, sectionArray);\n\n    // sets the heading depending on the classtype\n    let heading;\n    if (sectionArray.length > 0) {\n           // a header will be created \n        if (classType === 'preClass') {\n            heading ='Pre Class';\n        } else if (classType === 'inClass') {\n            heading = 'In Class';\n        } else {\n            heading = 'Post Class';\n        }\n    }\n\n    return (\n        <div>\n            <DisplaySection \n                        heading={heading} \n                        sectionType={sectionArray} \n                        day={day}\n                        />\n        </div>\n    )\n}\n\nexport default GenerateDatetypeSections\n"," import React from 'react';\n import GenerateNotifications from './GenerateNotifications';\n import GenerateDatetypeSections from './GenerateDatetypeSections';\n\n // generates the content and section headings for each course day\n const GenerateCourseDayContent = ({ day }) => {\n    const projectdue = day.dateTypes.projects.projectDue;\n    const projectstart = day.dateTypes.projects.projectStart;\n    const cpdue = day.dateTypes.cp.cpDue;\n    \n    return (\n        <>\n        <GenerateNotifications\n                            status={projectdue} \n                            cpdue={cpdue} \n                            projectdue={projectdue} \n                            projectstart={projectstart} \n                            day={day}\n                            />\n        <GenerateNotifications\n                            status={cpdue} \n                            cpdue={cpdue} \n                            projectdue={projectdue} \n                            projectstart={projectstart} \n                            day={day}\n                            />\n        <GenerateDatetypeSections \n                                datetype={day.dateTypes} \n                                classType=\"preClass\" \n                                day={day}\n                                />\n        <GenerateDatetypeSections \n                                datetype={day.dateTypes} \n                                classType=\"inClass\" \n                                day={day}\n                                />\n        <GenerateDatetypeSections \n                                datetype={day.dateTypes} \n                                classType=\"postClass\" \n                                day={day}\n                                />\n        <GenerateNotifications \n                            status={projectstart} \n                            cpdue={cpdue} \n                            projectdue={projectdue} \n                            projectstart={projectstart} \n                            day={day}\n                            />\n        </>\n    )\n}\n   \nexport default GenerateCourseDayContent;","import React from 'react'\n\n// renders items in a section\nfunction TableSectionContent({ sectionArray }) {\n    return (\n        <ul>\n        {sectionArray.map((item) => {\n            \n            return (\n                <>\n                {item.url && (\n                    <li>\n                        <a href={item.url}>{item.name}</a>\n                    </li>\n                )}\n                {!item.url && (\n                    <li>\n                        {item.name}\n                    </li>\n                )}\n                </>\n            )\n        })}\n        </ul>\n    )\n}\n\nexport default TableSectionContent\n","import React from 'react';\nimport generateSectionArray from '../generateSectionArray';\nimport TableSectionContent from './TableSectionContent';\n\n// renders in class/ preclass section of table\nfunction TableClass({ day, \n                      sectionClass\n                     }) {\n\n    const classArray = [];\n    const datetype = day.dateTypes;\n\n    // gets all items in a particular section\n    generateSectionArray(datetype, sectionClass, classArray);\n\n    return (\n        <td>\n            <TableSectionContent sectionArray={classArray} />\n        </td>\n    )\n}\n\nexport default TableClass\n","import React from 'react';\nimport GenerateNotifications from './GenerateNotifications';\n\n// renders projects section of table\nfunction TableProjects({ day }) {\n    const projectdue = day.dateTypes.projects.projectDue;\n    const projectstart = day.dateTypes.projects.projectStart;\n    const cpdue = day.dateTypes.cp.cpDue;\n\n    return (\n        <div className=\"table-projects\">\n            <GenerateNotifications status={projectdue} \n                               cpdue={cpdue} \n                               projectdue={projectdue} \n                               projectstart={projectstart} \n                               day={day}\n                               />\n            <GenerateNotifications status={projectstart} \n                               cpdue={cpdue} \n                               projectdue={projectdue} \n                               projectstart={projectstart} \n                               day={day}\n                               />\n        </div>\n    )\n}\n\nexport default TableProjects\n","import React, { useState } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport { DateTime } from \"luxon\";\nimport TableClass from \"./TableClass\";\nimport TableProjects from \"./TableProjects\";\nimport { scroller } from \"react-scroll\";\n\nfunction CurrentContentTable({ scheduleData, coursetype }) {\n  const [noClass, setNoClass] = useState(false);\n\n  const today = DateTime.now();\n  const todayWords = today.toFormat(\"EEE d MMM\");\n  let firstDay;\n  let moveDate;\n  let lastDay;\n  let heading;\n\n  // getting first and last days shown in table , depending on type of bootcamp\n  if (coursetype === \"pt\") {\n    // shows current month for part time bootcamp\n    firstDay = DateTime.now().startOf(\"month\");\n    lastDay = DateTime.now().endOf(\"month\");\n    heading = `Current Month : ${firstDay.toFormat(\n      \"dd/MM/yyyy\"\n    )} - ${lastDay.toFormat(\"dd/MM/yyyy\")}`;\n  } else {\n    // shows current week for full time bootcamp\n    firstDay = DateTime.now().startOf(\"week\");\n    lastDay = DateTime.now().endOf(\"week\");\n    heading = `Current Week : ${firstDay.toFormat(\n      \"dd/MM/yyyy\"\n    )} - ${lastDay.toFormat(\"dd/MM/yyyy\")}`;\n  }\n\n  moveDate = firstDay;\n\n  const weekDatesArray = [];\n  // getting all the dates between first day and last day inclusive and storing them in an array\n  while (moveDate <= lastDay) {\n    weekDatesArray.push(moveDate.toFormat(\"dd-MM-yyyy\"));\n    moveDate = moveDate.plus({ days: 1 });\n  }\n\n  // getting the data objects that correspond to the dates in weekDatesArray and storing them in an array\n  const currentWeekData = [];\n  for (let i = 0; i < weekDatesArray.length; i += 1) {\n    Object.keys(scheduleData).map((day) => {\n      if (day === weekDatesArray[i]) {\n        currentWeekData.push(scheduleData[day]);\n      }\n    });\n  }\n\n  console.log(\"current week data\", currentWeekData);\n  const todayFormatted = today.toFormat(\"dd-MM-yyyy\");\n  console.log(\"today formatted\", todayFormatted);\n\n  let todayId;\n  if (scheduleData[todayFormatted]) {\n    todayId = `${coursetype}-week-${scheduleData[todayFormatted].courseWeek}-day-${scheduleData[todayFormatted].dayNumber}`;\n  }\n  console.log(\"today id\", todayId);\n\n  return (\n    <div className=\"schedule-table\">\n      <h4 className=\"table-heading\">\n        {scheduleData[todayFormatted] ? (\n          <div\n            className=\"today-date\"\n            onClick={() =>\n              scroller.scrollTo(todayId, {\n                smooth: true,\n                offset: -70,\n                duration: 100,\n              })\n            }\n          >\n            Today : {todayWords}\n          </div>\n        ) : (\n          <div className=\"today-date\" onClick={() => setNoClass(true)}>\n            Today: {todayWords}\n            {noClass && <span className=\"no-class-date\">no class</span>}\n          </div>\n        )}\n\n        <br></br>\n        {/* {heading} */}\n      </h4>\n      <Table striped bordered hover size=\"sm\">\n        <thead>\n          <tr>\n            <th></th>\n            <th>Projects</th>\n            <th>Pre Class</th>\n            <th>In Class</th>\n          </tr>\n        </thead>\n        <tbody>\n          {currentWeekData.map((date, index) => {\n            // getting the formatted date that will be shown in the table\n            const formattedDate = DateTime.fromFormat(\n              date.courseDate,\n              \"dd-MM-yyyy\"\n            ).toFormat(\"EEE d MMM\");\n            // getting the id that links formattedDate to element in main content page\n            const id = `${coursetype}-week-${date.courseWeek}-day-${date.dayNumber}`;\n\n            return (\n              <tr>\n                <td\n                  // library react-scroll used to scroll to an element with matching id on main page\n                  onClick={() =>\n                    scroller.scrollTo(id, {\n                      smooth: true,\n                      offset: -70,\n                      duration: 100,\n                    })\n                  }\n                  className=\"table-date\"\n                >\n                  <h6>{formattedDate}</h6>\n                  <p>\n                    Week {date.courseWeek}\n                    <br></br>Course Day {date.courseDay}\n                  </p>\n                </td>\n                {/* getting data for projects section of table */}\n                <td>\n                  <TableProjects day={currentWeekData[index]} />\n                </td>\n                {/* getting data for preclass and inclass section of table */}\n                <TableClass\n                  day={currentWeekData[index]}\n                  sectionClass=\"preClass\"\n                />\n                <TableClass\n                  day={currentWeekData[index]}\n                  sectionClass=\"inClass\"\n                />\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n}\n\nexport default CurrentContentTable;\n","import React from \"react\";\nimport GenerateCourseDayHeader from \"./GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"./GenerateCourseDayContent\";\nimport CurrentContentTable from \"./CurrentContentTable\";\n\n// generates schedule content for a particular course\nfunction ScheduleContent({ scheduleData, coursetype, title }) {\n  const id = `${coursetype}-top`;\n\n  console.log(\"schedule data\", scheduleData);\n  return (\n    <div className=\"content\">\n      <h1 className=\"schedule-header\">{title}</h1>\n      <p id={id}></p>\n      {/* generates table which shows schedule for current week/ month depending on course type */}\n      <CurrentContentTable\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n      />\n      <div className=\"schedule-list\">\n        {/* generates individual day schedule content */}\n        {Object.keys(scheduleData).map((day) => {\n          const id = `${coursetype}-week-${scheduleData[day].courseWeek}-day-${scheduleData[day].dayNumber}`;\n\n          return (\n            <div className=\"day-class\" id={id}>\n              {/* generates schedule header for individual day */}\n              <GenerateCourseDayHeader\n                day={scheduleData[day]}\n                coursetype={coursetype}\n              />\n              {/* generates content if course day is not a holiday */}\n              {!scheduleData[day].dateTypes.holidayType && (\n                <GenerateCourseDayContent day={scheduleData[day]} />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default ScheduleContent;\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { scroller } from \"react-scroll\";\nimport { DateTime } from \"luxon\";\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\n\n// one of the components in Sidebar\nfunction CourseWeeks({ scheduleData, coursetype }) {\n  const weeks = [];\n  // getting all the week numbers\n  Object.keys(scheduleData).forEach((day) => {\n    if (!weeks.includes(scheduleData[day].courseWeek)) {\n      weeks.push(scheduleData[day].courseWeek);\n    }\n  });\n\n  //   const weekSubArrays = [];\n  //   for (let j = 0; j < weeks.length; j += 1) {\n  //     const weekDateArray = [];\n  //     Object.keys(scheduleData).map((date) => {\n  //       if (scheduleData[date].courseWeek === weeks[j]) {\n  //         weekDateArray.push(scheduleData[date]);\n  //       }\n  //     });\n  //     weekSubArrays.push(weekDateArray);\n  //   }\n\n  //   console.log(weekSubArrays);\n  const todayDate = DateTime.now();\n  const firstDayOfWeek = DateTime.now().startOf(\"week\");\n  const lastDayOfWeek = DateTime.now().endOf(\"week\");\n  let target = firstDayOfWeek;\n  const weeksDates = [];\n\n  while (target <= lastDayOfWeek) {\n    weeksDates.push(target.toFormat(\"dd-MM-yyyy\"));\n    target = target.plus({ days: 1 });\n  }\n\n  console.log(\"weeks dates\", weeksDates);\n  const weekNumber = [];\n  weeksDates.forEach((date) => {\n    if (\n      scheduleData[date] &&\n      !weekNumber.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumber.push(scheduleData[date].courseWeek);\n    }\n  });\n  console.log(\"weeknumber\", weekNumber);\n  // const weeksInAMonth = [];\n  // // putting week numbers into subarrays and pushing them into weeksInAMonth\n  // while(weeks.length) {\n  // const weekNumbers = weeks.splice(0,4);\n  //     weeksInAMonth.push(weekNumbers);\n  // }\n\n  return (\n    <div className=\"sidebar-courseweeks\">\n      <h4>Course Weeks</h4>\n      <Nav\n        variant=\"pills\"\n        defaultActiveKey=\"link-0\"\n        className=\"flex-column\"\n        navbarScroll=\"true\"\n      >\n        <Nav.Item>\n          <Nav.Link\n            eventKey=\"link-0\"\n            // uses react-scroll library for scroll function\n            onClick={() =>\n              scroller.scrollTo(`${coursetype}-top`, {\n                smooth: true,\n                offset: -70,\n                duration: 100,\n              })\n            }\n          >\n            Schedule Table\n          </Nav.Link>\n        </Nav.Item>\n        {weeks.map((week, index) => {\n          // generating id that is linked to id of an element in main content of page\n          // on click, page will scroll to where the element is\n          const navId = `link-${index + 1}`;\n          const id = `${coursetype}-week-${week}-day-1`;\n\n          return (\n            <Nav.Item>\n              <Nav.Link\n                eventKey={navId}\n                // uses react-scroll library for scroll function\n                onClick={() =>\n                  scroller.scrollTo(id, {\n                    smooth: true,\n                    offset: -70,\n                    duration: 100,\n                  })\n                }\n              >\n                Week {week}\n                {weeks[index] === weekNumber[0] && (\n                  <span className=\"current-wk-indicator\">\n                    <KeyboardBackspaceIcon />\n                    {\"  \"}\n                    this week\n                  </span>\n                )}\n              </Nav.Link>\n            </Nav.Item>\n          );\n        })}\n      </Nav>\n    </div>\n  );\n}\n\nexport default CourseWeeks;\n","import React from 'react';\nimport CourseWeeks from './CourseWeeks';\nimport Modules from './Modules';\n\n// side navbar \nfunction SideBar({ \n                scheduleData, \n                coursetype\n             }) {\n    \n    return (\n        <div className=\"sidebar\">\n            <CourseWeeks scheduleData={scheduleData}\n                         coursetype={coursetype}\n                         />\n            {/* <Modules scheduleData={scheduleData} /> */}\n        </div>\n    )\n}\n\nexport default SideBar\n","import React from \"react\";\nimport ScheduleContent from \"./ScheduleContent\";\nimport SideBar from \"./SideBar\";\n// import \"../sass/BatchSchedule.scss\";\n\nfunction BatchSchedule({ data, title }) {\n  const scheduleData = JSON.parse(JSON.stringify(data.days));\n\n  // needed to generate id for use with react-scroll library, also indicates full time/ part time\n  let coursetype;\n  if (data.courseType === \"Bootcamp PT\") {\n    coursetype = \"pt\";\n  } else {\n    coursetype = \"ft\";\n  }\n\n  return (\n    <div className=\"course-schedule\">\n      {/* contains links to main part of schedule page */}\n      <SideBar scheduleData={scheduleData} coursetype={coursetype} />\n      {/* contains current schedule table and main content of page */}\n      <ScheduleContent\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        title={title}\n      />\n    </div>\n  );\n}\n\nexport default BatchSchedule;\n","import React, { useState } from \"react\";\nimport { Route, Switch, Link, useRouteMatch, Redirect } from \"react-router-dom\";\nimport Nav from \"react-bootstrap/Nav\";\nimport BatchSchedule from \"./BatchSchedule\";\nimport ptbc1 from \"../data/16-08-2021_10-10-2022_BATCH1.json\";\nimport ftbc3 from \"../data/12-04-2021_23-09-2021_BATCH3.json\";\nimport ftbc4 from \"../data/12-07-2021_22-12-2021_BATCH4.json\";\n\nfunction ScheduleContainer() {\n  const [key, setKey] = useState(\"PTBC1\");\n  let { path, url } = useRouteMatch();\n\n  // pass individual batch json files into BatchSchedule to generate schedules\n  return (\n    <>\n      <Nav\n        variant=\"tabs\"\n        activeKey={key}\n        onSelect={(k) => setKey(k)}\n        className=\"mb-3\"\n      >\n        <Nav.Item>\n          <Nav.Link eventKey=\"FTBC3\">\n            <Link to={`${url}/ftbc3`}>FTBC 3</Link>\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link eventKey=\"FTBC4\">\n            <Link to={`${url}/ftbc4`}>FTBC 4</Link>\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link eventKey=\"PTBC1\">\n            <Link to={`${url}/ptbc1`}>PTBC 1</Link>\n          </Nav.Link>\n        </Nav.Item>\n      </Nav>\n      {/* <Navbar variant=\"dark\" bg=\"secondary\">\n        <Container>\n          <Navbar.Brand href=\"#home\">\n            <img src={logo} alt=\"company logo\"></img>\n          </Navbar.Brand>\n          <Nav className=\"me-auto\">\n            <Nav.Link>\n              <Link to={`${url}/ftbc3`}>FTBC 3</Link>\n            </Nav.Link>\n            <Nav.Link>\n              <Link to={`${url}/ftbc4`}>FTBC 4</Link>\n            </Nav.Link>\n            <Nav.Link>\n              <Link to={`${url}/ptbc1`}>PTBC 1</Link>\n            </Nav.Link>\n          </Nav>\n        </Container>\n      </Navbar> */}\n      <Switch>\n        <Route exact path={path}>\n          <Redirect to={`${path}/ftbc3`} />\n        </Route>\n        <Route path={`${path}/ftbc3`}>\n          <BatchSchedule data={ftbc3} title=\"FTBC 3\" />\n        </Route>\n        <Route path={`${path}/ptbc1`}>\n          <BatchSchedule data={ptbc1} title=\"PTBC 1\" />\n        </Route>\n        <Route path={`${path}/ftbc4`}>\n          <BatchSchedule data={ftbc4} title=\"FTBC 4\" />\n        </Route>\n      </Switch>\n    </>\n  );\n}\n\nexport default ScheduleContainer;\n","import React from 'react';\n// import './sass/App.scss';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport TabsContainer from './components/Tabs';\nimport {\n  BrowserRouter as Router,\n  HashRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport ScheduleContainer from './components/ScheduleContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <BatchSchedule /> */}\n      <HashRouter>\n        <Switch>\n          <Route path=\"/admin\">\n            <TabsContainer />\n          </Route>\n          <Route path=\"/schedules\">\n            <ScheduleContainer />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}