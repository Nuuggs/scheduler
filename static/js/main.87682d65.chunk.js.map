{"version":3,"sources":["components/admin/main-accordion/AddItemModal.jsx","components/admin/main-accordion/inner-accordion/ShiftItemModal.jsx","components/admin/main-accordion/inner-accordion/ClassItem.jsx","components/admin/main-accordion/inner-accordion/SectionClass.jsx","components/admin/main-accordion/inner-accordion/Section.jsx","components/admin/main-accordion/MainAccordion.jsx","download.js","generateCourseDates.js","components/admin/GenerateDataShiftContent.jsx","components/admin/data-shift/ActiveCourses.jsx","generateBasicsMarkdown.js","components/schedules/GenerateCourseDayHeader.jsx","components/admin/data-shift/DatePicker.jsx","components/admin/data-shift/DataShift.jsx","components/admin/Tabs.jsx","assets/4-MILK.png","components/schedules/DisplaySection.jsx","components/schedules/GenerateNotifications.jsx","generateSectionArray.js","components/schedules/GenerateDatetypeSections.jsx","components/schedules/GenerateCourseDayContent.jsx","components/schedules/schedule-table/TableSectionContent.jsx","components/schedules/schedule-table/TableClass.jsx","components/schedules/schedule-table/TableProjects.jsx","components/schedules/schedule-table/ScheduleTable.jsx","generateTableData.js","components/schedules/schedule-table/ContentTable.jsx","components/schedules/current-day/CurrentDaySection.jsx","components/schedules/ScheduleContent.jsx","components/schedules/sidebar/ModuleSection.jsx","components/schedules/sidebar/Modules.jsx","components/schedules/sidebar/CourseWeeks.jsx","components/schedules/sidebar/SideBar.jsx","components/schedules/BatchSchedule.jsx","components/schedules/ScheduleContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddItemModal","show","onHide","bootcampdata","coursedate","setDaysInBatchFile","setDaysInMainFile","useState","title","setTitle","url","setUrl","section","setSection","sectionClass","setSectionClass","Modal","size","centered","Header","closeButton","Title","id","Body","Form","Group","className","controlId","Label","Control","type","placeholder","value","onChange","e","target","Select","Button","variant","onClick","preventDefault","newItem","name","dateTypes","items","push","constructor","Array","handleAddItem","Footer","ShiftItemModal","shiftitem","sectiontype","setbootcampdata","classtype","classindex","selectedDate","setSelectedDate","dates","map","date","courseDay","selectedItem","splice","length","targetDay","handleSubmitDate","shiftOneDay","direction","bootcampData","dayIndex","sectionType","classType","classIndex","bootcampDataArray","console","log","Object","keys","courseDate","ClassItem","setBootcampData","item","modalShow","setModalShow","shiftItem","setShiftItem","handleShift","datesArray","includes","addDates","indexOf","addIndex","SectionClass","day","sectionclass","sectionIndex","handleClassShift","sectionArray","i","selectedSection","startDay","forEach","element","index","shiftSection","Section","classExists","preClass","inClass","postClass","projectDue","projectStart","cpDue","Accordion","Item","eventKey","filter","MainAccordion","setShowInputModal","setCourseDate","accordionKey","handleCloseAll","setAccordionKey","module","handlePlusClick","courseWeek","download","data","filename","dataStr","encodeURIComponent","JSON","stringify","dlAnchorElem","document","createElement","setAttribute","click","publicHolidays","holidayData","PH","publicHolidayArray","key","companyHolidays","company","companyHolidayArray","winterBreak","phWithoutCh","holiday","getLocalDateTime","utc","timeString","courseName","courseType","changedFormat","toFormat","DateTime","fromISO","zone","toUTC","toISO","Number","weekday","generateHolidayObject","dateString","week","dateObj","dayNumber","generateCourseDayObject","weekDay","meetingDateTimeUTC","basicsData","days","generateDataObject","startDate","input","lessonDays","bootcampDataJson","fromFormat","courseDayCount","dateWeek","classDatesCount","dayArray","topLevelObject","daysOfWeek","courseStartIndex","totalCourseDays","bootcampDays","startIndex","fullTime","partTime","generateTopLevelObject","displayDate","displayName","firstDay","formattedDate","plus","weeks","set","copyToClipboard","selBox","style","position","left","top","opacity","undefined","body","appendChild","focus","select","execCommand","removeChild","GenerateDataShiftContent","mainFile","batchFile","batchArray","showInputModal","handleDownloadMainClick","a","handleEditInGithub","gitbookUrl","repoUrls","edit","window","open","handleBatchEdit","batch","content","slice","ActiveCourses","lastWeek","localDate","meetingTime","timeZone","timeOffset","setBatchFile","Nav","Link","parse","handleSelectClick","timeZoneSet","generateSectionList","sectionName","sectionString","classList","mdText","j","generateClassList","dayNames","dayNumbers","weekDates","weekCount","tableRows","generateBasicsMarkdown","Set","sort","number","l","k","n","displayWeek","m","p","holidayType","location","generateCourseArrays","output","r","q","generateCourseDaysTable","localTime","generalDateTypes","general","projectDateTypes","projects","sectionNames","sectionTypes","t","generateCourseData","DatePicker","setStartDate","setCourseName","setCourseType","setFirstDay","secondDay","setSecondDay","handleDownload","handleRender","addToGitHubRepo","generateMarkdown","href","DataShift","TabsContainer","setKey","batchDays","setBatchDays","mainDataFile","setMainFile","mainDays","setMainDays","class","Tabs","activeKey","onSelect","Tab","NormalCourseDay","todaySectionHeader","HolidayCourseDay","GenerateCourseDayHeader","coursetype","DisplaySection","heading","GenerateNotifications","status","projectdue","cpdue","projectstart","generateSectionArray","datetype","classTypeSection","x","GenerateDatetypeSections","GenerateCourseDayContent","cp","TableSectionContent","TableClass","classArray","TableProjects","ScheduleTable","weekNumbers","tableData","today","now","num","Table","bordered","hover","scroller","scrollTo","smooth","offset","duration","generateTableData","scheduleData","setWeekNumbers","setTableData","moveDate","lastDay","firstDayMonth","lastDayMonth","moveDateMonth","startOf","endOf","weekDatesArray","monthDatesArray","currentWeekData","currentMonthData","ContentTable","useEffect","findPreviousDay","dayBefore","findNextDay","firstDayOfCourse","nextDay","CurrentDaySection","previousDayId","previousDay","currentDayId","ScheduleContent","nextToday","months","defaultActiveKey","ModuleSection","info","Modules","moduleNameArray","scheduleUrls","scheduleObjs","itemUrlArray","split","generatingDataArrays","accessingRequiredItems","moduleName","poce","ice","urlObj","splitName","dataObj","sortScheduleObjs","CourseWeeks","currentWeekRef","current","scrollIntoView","block","CurrentWeekDiv","ref","firstDayOfWeek","lastDayOfWeek","weeksDates","weekNumber","useRef","navbarScroll","navId","sidebarId","SideBar","BatchSchedule","courseDatesArray","b","ScheduleContainer","useRouteMatch","path","Navbar","bg","Brand","src","logo","alt","as","to","toUpperCase","exact","App","ptbc1","ptbc2","ftbc4","ftbc5","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.87682d65.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nfunction AddItemModal({\n  show,\n  onHide,\n  bootcampdata,\n  coursedate,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  // input fields for a entry of a new item into the main data file\n  const [title, setTitle] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [section, setSection] = useState(\"\");\n  const [sectionClass, setSectionClass] = useState(\"\");\n\n  // function that adds new item to main data file\n  const handleAddItem = (e) => {\n    e.preventDefault();\n\n    // new item that will be added to main data file\n    const newItem = {\n      name: title,\n      url: url,\n    };\n\n    // if the section that the new item is to be added to is empty, an empty array called items is added to it\n    if (!bootcampdata[coursedate].dateTypes[section][sectionClass].items) {\n      bootcampdata[coursedate].dateTypes[section][sectionClass].items = [];\n    }\n\n    // the new item is then pushed into items array\n    bootcampdata[coursedate].dateTypes[section][sectionClass].items.push(\n      newItem\n    );\n\n    // the new content is saved in state\n     bootcampdata.constructor === Array\n      ? setDaysInMainFile([...bootcampdata])\n      : setDaysInBatchFile({ ...bootcampdata });\n  };\n\n  return (\n    // modal that takes in user input for the creation of a new item\n    <Modal\n      show={show}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"add-input-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"add-input-modal\">Add an item</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Group className=\"mb-3\" controlId=\"title\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\" controlId=\"url\">\n            <Form.Label>URL</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter URL\"\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Label>Section</Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSection(e.target.value)}\n          >\n            <option>choose section</option>\n            <option value=\"general\">general</option>\n            <option value=\"css\">css</option>\n            <option value=\"ux\">ux</option>\n            <option value=\"projects\">projects</option>\n            <option value=\"cp\">cp</option>\n            <option value=\"dsa\">dsa</option>\n          </Form.Select>\n\n          <Form.Label>Class </Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSectionClass(e.target.value)}\n          >\n            <option>choose class type</option>\n            <option value=\"preClass\">preClass</option>\n            <option value=\"postClass\">postClass</option>\n            <option value=\"inClass\">inClass</option>\n            {section === \"projects\" && (\n              <>\n                <option value=\"projectDue\">projectDue</option>\n                <option value=\"projectStart\">projectStart</option>\n              </>\n            )}\n            {section === \"cp\" && <option value=\"cpDue\">cpDue</option>}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleAddItem(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default AddItemModal;\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\n// moves items to a specific date in the schedule\nfunction ShiftItemModal({\n  show,\n  onHide,\n  shiftitem,\n  bootcampdata,\n  setbootcampdata,\n  sectiontype,\n  classtype,\n  classindex,\n  section,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  const [selectedDate, setSelectedDate] = useState(\"\");\n\n  const handleSubmitDate = (e) => {\n    e.preventDefault();\n    // finding the selected item in the data file\n    let selectedItem = sectiontype[classtype].items[classindex];\n    // removing it from it's original position\n    sectiontype[classtype].items.splice(classindex, 1);\n\n    // if items array is empty after removing selected item, remove empty items array\n    if (sectiontype[classtype].items.length === 0) {\n      delete sectiontype[classtype].items;\n    }\n    // this is where we want to move the item to\n    const targetDay = bootcampdata[selectedDate].dateTypes[section];\n\n    // checking to see if items array exists at destination, if not, an empty array called items is added\n    if (!targetDay[classtype].items) {\n      targetDay[classtype].items = [];\n    }\n\n    // selected item is push into items array at destination\n    targetDay[classtype].items.push(selectedItem);\n\n    // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n    bootcampdata.constructor === Array\n      ? setDaysInMainFile([...bootcampdata])\n      : setDaysInBatchFile({...bootcampdata})\n  };\n\n  return (\n    <Modal\n      show={show}\n      shiftitem={shiftitem}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"item-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"item-modal\">Moving item ...</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"days\"\n            onChange={(e) => setSelectedDate(e.target.value)}\n          >\n            <option>--</option>\n            {shiftitem.dates.map((date) => {\n              if (typeof date === \"number\") {\n                return (\n                  <>\n                    <option value={date}>\n                      Day {bootcampdata[date].courseDay}\n                    </option>\n                    ;\n                  </>\n                );\n              } else {\n                return (\n                  <>\n                    <option value={date}>{date}</option>;\n                  </>\n                );\n              }\n            })}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleSubmitDate(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default ShiftItemModal;\n","import React, { useState } from \"react\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport ShiftItemModal from \"./ShiftItemModal\";\nimport DragIndicatorIcon from '@material-ui/icons/DragIndicator';\n\n// helper functions that populates dateArray\n// ##########################################################\nconst addDates = (datesArray, date) => {\n  if (!datesArray.includes(date)) {\n    datesArray.push(date);\n  }\n  return datesArray;\n};\n\nconst addIndex = (bootcampData, datesArray, date) => {\n  if (!datesArray.includes(bootcampData.indexOf(date))) {\n    datesArray.push(bootcampData.indexOf(date));\n  }\n  return datesArray;\n};\n\n// helper function that shifts items 1 day\nconst shiftOneDay = (\n  direction, \n  bootcampData, \n  dayIndex, \n  sectionType, \n  classType, \n  classIndex, \n  section,\n  setDaysInMainFile,\n  setDaysInBatchFile\n  ) => {\n    console.log('inside shift function');\n      let bootcampDataArray;\n      let target; \n       if(bootcampData.constructor === Object) {\n         bootcampDataArray = Object.keys(bootcampData);\n         console.log('bootcamp data array', bootcampDataArray);\n         if(direction === 'up') {\n           target = bootcampData[bootcampDataArray[dayIndex - 1]].courseDate;\n         } else {\n           target = bootcampData[bootcampDataArray[dayIndex + 1]].courseDate;\n           console.log('target', target);\n           \n         }\n      } else {\n        if (direction === 'up') {\n          target = dayIndex - 1\n        } else {\n          target = dayIndex + 1\n        }\n      }\n      // finding the selected item in the data file\n      let selectedItem = sectionType[classType].items[classIndex];\n      // removing it from it's original position\n      sectionType[classType].items.splice(classIndex, 1);\n\n      // if items array is empty after removing selected item, remove empty items array\n      if (sectionType[classType].items.length === 0) {\n        delete sectionType[classType].items;\n      }\n      // this is where we want to move the item to\n      const targetDay = bootcampData[target].dateTypes[section];\n\n      // checking to see if items array exists at destination, if not, an empty array called items is added\n      if (!targetDay[classType].items) {\n        targetDay[classType].items = [];\n      }\n\n      // selected item is push into items array at destination\n      targetDay[classType].items.push(selectedItem);\n\n      // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n      bootcampData.constructor === Array\n        ? setDaysInMainFile([...bootcampData])\n        : setDaysInBatchFile({...bootcampData})\n\n    }\n// ############################################################\n\nfunction ClassItem({\n  setBootcampData,\n  section,\n  bootcampData,\n  classType,\n  sectionType,\n  item,\n  dayIndex,\n  classIndex,\n  setDaysInMainFile,\n  setDaysInBatchFile\n}) {\n  // toggle visibility of buttons\n  const [modalShow, setModalShow] = useState(false);\n  // object shift item is initialised with keys direction and dates to store data that will be passed into the nect component\n  const [shiftItem, setShiftItem] = useState({\n    direction: null,\n    dates: [],\n  });\n\n  // function that handles moving data from one day to another\n  const handleShift = (direction, dayIndex, classIndex) => {\n    // array that contains all the dates either before or after a selected date depending on direction chosen by user\n    let datesArray = [];\n\n    \n\n    // item is being moved backwards in the schedule\n    if (direction === \"any\") {\n      // if bootcampData either an object or an array depending on wether the user is editing the main or individual schedule files, and needs to be processed accordingly\n      bootcampData.constructor === Object\n        ? Object.keys(bootcampData)\n            .map((date) => {\n              datesArray = addDates(datesArray, date);\n            })\n        : bootcampData\n            .map((date) => {\n              datesArray = addIndex(bootcampData, datesArray, date);\n            });\n\n      // data is put into object shift item\n      setShiftItem({\n        ...shiftItem,\n        dates: datesArray,\n      });\n      // modal that takes user input to move item is shown\n      setModalShow(true);\n      // item is being moved forward in the schedule\n    } else if (direction === \"down\") {\n     shiftOneDay(\n        'down', \n        bootcampData, \n        dayIndex, \n        sectionType, \n        classType, \n        classIndex, \n        section,\n        setDaysInMainFile,\n        setDaysInBatchFile\n     )\n\n    } else if (direction === \"up\") {\n      shiftOneDay(\n        'up', \n        bootcampData, \n        dayIndex, \n        sectionType, \n        classType, \n        classIndex, \n        section,\n        setDaysInMainFile,\n        setDaysInBatchFile\n     )\n    } else {\n      // here the item is being deleted from the schedule\n      sectionType[classType].items.splice(classIndex, 1);\n      if (sectionType[classType].items.length === 0) {\n        delete sectionType[classType].items;\n      }\n      setBootcampData([...bootcampData]);\n    }\n  };\n\n  return (\n    <div>\n      <div\n        className=\"class-item\"\n      >\n        {item.name}\n        \n          <div>\n            {/* remove item  */}\n            <button className=\"trash-can\" onClick={() => handleShift(\"delete\", dayIndex, classIndex)}>\n              <DeleteOutlinedIcon />\n            </button>\n            {/* move item backwards in the schedule  */}\n            <button onClick={() => handleShift(\"up\", dayIndex, classIndex)}>\n              <ExpandLessIcon />\n            </button>\n            {/* move item forward in the schedule  */}\n            <button onClick={() => handleShift(\"down\", dayIndex, classIndex)}>\n              <ExpandMoreIcon />\n            </button>\n            <button className=\"select\" onClick={() => handleShift('any', dayIndex, classIndex)}>\n              <DragIndicatorIcon />\n            </button>\n          </div>\n        \n        {modalShow && (\n          // modal that is shown when the user clicks either of the above buttons\n          <ShiftItemModal\n            show={modalShow}\n            onHide={() => setModalShow(false)}\n            shiftitem={shiftItem}\n            bootcampdata={bootcampData}\n            setbootcampdata={setBootcampData}\n            sectiontype={sectionType}\n            classtype={classType}\n            classindex={classIndex}\n            section={section}\n            setDaysInMainFile={setDaysInMainFile}\n            setDaysInBatchFile={setDaysInBatchFile}\n            />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ClassItem;\n","import React from \"react\";\nimport ClassItem from \"./ClassItem\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nfunction SectionClass({\n  day,\n  sectionIndex,\n  sectionclass,\n  sectionType,\n  bootcampData,\n  setBootcampData,\n  section,\n  dayIndex,\n  setDaysInBatchFile,\n  setDaysInMainFile,\n}) {\n\n  // helper function that maps each element in section array to a new course day\n  const shiftSection = (sectionArray, startDay, bootcampData) => {\n    sectionArray.forEach((element, index) => {\n      if (element !== null && bootcampData.constructor === Object) {\n        if (bootcampData[bootcampDataArray[startDay + index]].dateTypes[section] &&\n          bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][sectionclass]) {\n          if (bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][sectionclass]\n              .items) {\n            sectionArray[index].forEach((item) => {\n              console.log.log('item', item);\n              bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][\n                sectionclass\n              ].items.push(item);\n            });\n          } else {\n            bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][\n              sectionclass\n            ].items = sectionArray[index];\n          }\n        }\n      } else if (element !== null && bootcampData.constructor === Array) {\n          if (bootcampData[startDay + index].dateTypes[section][sectionclass]\n            .items) {\n          sectionArray[index].forEach((item) => {\n            bootcampData[startDay + index].dateTypes[section][\n              sectionclass\n            ].items.push(item);\n          });\n          } else {\n            bootcampData[startDay + index].dateTypes[section][\n              sectionclass\n            ].items = sectionArray[index];\n          }\n        }\n      });\n    return bootcampData;\n  };\n\n  let bootcampDataArray;\n  const handleClassShift = (direction, dayIndex) => {\n    // puts all the items in selected class in an array and deletes them from their original position\n    const sectionArray = [];\n    \n    if (bootcampData.constructor === Object) {\n      bootcampDataArray = Object.keys(bootcampData);\n\n        for (let i = dayIndex; i < bootcampDataArray.length - 1; i += 1) {\n          if(bootcampData[bootcampDataArray[i]].dateTypes[section] && bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass]) {\n            if (bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items) {\n            const selectedSection =\n              bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items;\n              sectionArray.push(selectedSection);\n              delete bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items;\n            } else {\n              sectionArray.push(null);\n            }\n          }\n          \n        }\n      \n    } else {\n      for (let i = dayIndex; i < bootcampData.length - 1; i += 1) {\n        if (bootcampData[i].dateTypes[section][sectionclass].items) {\n          const selectedSection =\n            bootcampData[i].dateTypes[section][sectionclass].items;\n          sectionArray.push(selectedSection);\n          delete bootcampData[i].dateTypes[section][sectionclass].items;\n        } else {\n          sectionArray.push(null);\n        }\n      }\n    }\n    \n\n    let startDay;\n    // when user clicks the down button, items are put into section/class of the next day\n    if (direction === \"down\") {\n      startDay = dayIndex + 1;\n    } else {\n      // when user clicks the up button, items are put into section/class of the previous day\n      startDay = dayIndex - 1;\n    }\n\n    bootcampData = shiftSection(sectionArray, startDay, bootcampData);\n    \n     // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n    bootcampData.constructor === Array\n      ? setDaysInMainFile([...bootcampData])\n      : setDaysInBatchFile({...bootcampData})\n  };\n\n  return (\n    <div>\n      {sectionType[sectionclass].items && (\n        <div className=\"section-class\">\n          <div className=\"class-title\">{sectionclass}</div>\n          <div className=\"class-items\">\n            {sectionType[sectionclass].items.map((item, classIndex) => {\n              return (\n                <ClassItem\n                  day={day}\n                  sectionclass={sectionclass}\n                  bootcampData={bootcampData}\n                  setBootcampData={setBootcampData}\n                  section={section}\n                  classType={sectionclass}\n                  sectionType={sectionType}\n                  item={item}\n                  dayIndex={dayIndex}\n                  classIndex={classIndex}\n                  setDaysInBatchFile={setDaysInBatchFile}\n                  setDaysInMainFile={setDaysInMainFile}\n                />\n              );\n            })}\n          </div>\n          <div\n            className=\"section-class-header\"\n  \n          >\n              <div>\n                <button\n                  onClick={() => handleClassShift(\"up\", dayIndex, sectionIndex)}\n                >\n                  <ExpandLessIcon />\n                </button>\n                <button\n                  onClick={() =>\n                    handleClassShift(\"down\", dayIndex, sectionIndex)\n                  }\n                >\n                  <ExpandMoreIcon />\n                </button>\n              </div>\n          \n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SectionClass;\n","import React from \"react\";\nimport SectionClass from \"./SectionClass\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction Section({\n  day,\n  setBootcampData,\n  section,\n  sectionType,\n  dayIndex,\n  bootcampData,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  // variable classExists is created to track if any class of a section exists (it is initially set to false)\n  // if any class of a section exists, classExists is set to true\n  // if classExists is true, a header for this section will be created\n  let classExists = false;\n  if (sectionType.constructor === Object) {\n    if (\n      sectionType.preClass.items ||\n      sectionType.inClass.items ||\n      sectionType.postClass.items ||\n      (sectionType === \"projects\" &&\n        (sectionType.projectDue.items || sectionType.projectStart.items)) ||\n      (sectionType === \"cp\" && sectionType.cpDue.items)\n    ) {\n      classExists = true;\n    }\n  }\n\n  return (\n    <div>\n      {sectionType.constructor === Object && (\n        <>\n          <Accordion>\n            {classExists && (\n              <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>{sectionType.type}</Accordion.Header>\n                <Accordion.Body>\n                  {Object.keys(sectionType)\n                    .filter((sectionClass) => sectionType[sectionClass].items)\n                    .map((sectionclass, sectionIndex) => {\n                      return (\n                        <div className=\"all-classes\">\n                          <SectionClass\n                            day={day}\n                            sectionIndex={sectionIndex}\n                            sectionclass={sectionclass}\n                            sectionType={sectionType}\n                            bootcampData={bootcampData}\n                            setBootcampData={setBootcampData}\n                            section={section}\n                            dayIndex={dayIndex}\n                            setDaysInBatchFile={setDaysInBatchFile}\n                            setDaysInMainFile={setDaysInMainFile}\n                          />\n                        </div>\n                      );\n                    })}\n                </Accordion.Body>\n              </Accordion.Item>\n            )}\n          </Accordion>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Section;\n","import React from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Section from \"./inner-accordion/Section\";\n\nfunction MainAccordion({\n  dayIndex,\n  bootcampData,\n  setBootcampData,\n  day,\n  setShowInputModal,\n  setCourseDate,\n  handleCloseAll,\n  setAccordionKey,\n  accordionKey,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  \n\n  const handlePlusClick = (day) => {\n    console.log(day);\n    setCourseDate(day);\n    setShowInputModal(true);\n  };\n\n  return (\n    <div>\n      {bootcampData[day].dateTypes.module && (\n        <Accordion key={accordionKey}>\n          <Accordion.Item eventKey={dayIndex}>\n            <div\n                className=\"course-day-symbol\"\n                onClick={() => handlePlusClick(day)}\n              >\n                {\" \"}\n                <AddIcon />\n            </div>\n            <Accordion.Header>\n              <div className=\"course-day-header\">\n                {bootcampData.constructor === Object ? (\n                  <>\n                    {day}, Week: {bootcampData[day].courseWeek}, Course Day:{\" \"}\n                    {bootcampData[day].courseDay},{\" \"}\n                    {bootcampData[day].dateTypes.module}{\" \"}\n                  </>\n                ) : (\n                  <>\n                    Course Day: {bootcampData[day].courseDay},{\" \"}\n                    {bootcampData[day].dateTypes.module}{\" \"}\n                  </>\n                )}\n              </div>\n            </Accordion.Header>\n            <Accordion.Body>\n              <div className=\"course-day\">\n                <div>\n                  {Object.keys(bootcampData[day].dateTypes).map(\n                    (section) => (\n                      <Section\n                        day={day}\n                        setBootcampData={setBootcampData}\n                        section={section}\n                        sectionType={bootcampData[day].dateTypes[section]}\n                        dayIndex={dayIndex}\n                        bootcampData={bootcampData}\n                        setDaysInBatchFile={setDaysInBatchFile}\n                        setDaysInMainFile={setDaysInMainFile}\n                      />\n                    )\n                  )}\n                </div>\n              </div>\n            </Accordion.Body>\n          </Accordion.Item>\n        </Accordion>\n      )}\n    </div>\n  );\n}\n\nexport default MainAccordion;\n","const download = (data, filename) => {\n        // from: https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\n        var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data));\n        var dlAnchorElem = document.createElement('a');\n        dlAnchorElem.setAttribute(\"href\",     dataStr     );\n        dlAnchorElem.setAttribute(\"download\", filename);\n        dlAnchorElem.click();\n    };\n\nexport default download;","import { DateTime } from 'luxon';\nimport holidayData from './data/2021-sg-stat-holidays.json';\nimport basicsData from './data/basics-course-days.json';\nimport bootcampDataJson from './data/bootcamp-course-days.json';\n\nconst publicHolidays = holidayData.PH;\nconst publicHolidayArray = [];\n// get array of all public holiday dates\nObject.keys(publicHolidays).map((key, index) => {\n    publicHolidayArray.push(key);\n});\n\nconst companyHolidays = holidayData.company;\nconst companyHolidayArray = [];\nconst winterBreak = [];\n// get array of all company holiday dates\nObject.keys(companyHolidays).map((key, index) => {\n    companyHolidayArray.push(key);\n    // get array of winter break dates\n    if(companyHolidays[key].name === 'winter break') {\n        winterBreak.push(companyHolidays[key].date);\n    }\n});\n\nconst phWithoutCh = [];\n// get array of public holidays not including those included in winter break\npublicHolidayArray.forEach((holiday) => {\n    if(!companyHolidayArray.includes(holiday)) {\n        phWithoutCh.push(holiday);\n    }\n});\n\nlet bootcampData;\n\n// helper function for getting utc date/time\nconst getLocalDateTime = (utc, timeString, courseName, courseType, date) => {\n    const changedFormat = date.toFormat(\"yyyy-MM-dd\");\n    if (courseType === 'Basics') {\n        utc = DateTime.fromISO(changedFormat + timeString, {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp FT' && Number(courseName) % 2 === 0) {\n        utc = DateTime.fromISO(changedFormat + 'T13:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if ((courseType === 'Bootcamp FT' && Number(courseName) % 2 !== 0) || (courseType === 'Bootcamp PT' && (date.weekday === 6))) {\n        utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp PT' && (date.weekday === 1)) {\n        utc = DateTime.fromISO(changedFormat + 'T19:30', {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp PT' && (date.weekday === 6)) {\n        utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n    }\n    return utc;\n}\n\n// helper function for deciding what goes in topLevelObject based on course type\nconst generateTopLevelObject = (courseType, topLevelObject, lessonDays, courseName) => {\n    console.log('lesson days', lessonDays);\n\n        if (courseType === 'Basics') {\n            topLevelObject = {\n                daysOfWeek: lessonDays,\n                courseStartIndex: 0,\n                totalCourseDays: basicsData.totalCourseDays,\n                ...topLevelObject\n            };\n        } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            let bootcampDays;\n            // TODO:  this is to be removed when ftbc4 finishes\n            let startIndex;\n\n            if (courseType === 'Bootcamp FT') {\n                bootcampDays = bootcampData.daysOfWeek.fullTime;\n                startIndex = bootcampData.courseStartIndex;\n                if (courseName === '4') {\n                    startIndex = 4;\n                }\n            } else {\n                bootcampDays = bootcampData.daysOfWeek.partTime;\n                startIndex = bootcampData.courseStartIndex;\n            }\n            console.log('start index', startIndex)\n            topLevelObject = {\n                daysOfWeek: bootcampDays,\n                courseStartIndex: startIndex,\n                totalCourseDays: bootcampData.totalCourseDays,\n                ...topLevelObject\n            }\n        }\n\n        return topLevelObject;\n    }\n\n// helper function that generates dateObj if the course date falls on a public holiday\nconst generateHolidayObject = (dateString, week, date, dateObj) => {\n    dateObj = {\n        courseDay: null,\n        courseDate: dateString,\n        courseWeek: week,\n        dayNumber: date.weekday,\n        dateTypes: {}\n    }\n\n    if (phWithoutCh.includes(dateString)) {\n        dateObj.dateTypes = publicHolidays[dateString];\n    } else {\n        dateObj.dateTypes = companyHolidays[dateString];\n    }\n\n    return dateObj;\n}\n\n// helper function that generates dateObj for a normal courseday\nconst generateCourseDayObject = (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay) => {\n    // get whatever index of basicsData that is specified by courseDayCount\n    \n\n        dateObj = {\n        courseDate: dateString,\n        courseWeek: week,\n        weekDay: weekDay,\n        dayNumber: date.weekday, \n        meetingDateTimeUTC: utc,\n        };\n    \n\n    // data is different for basics and bootcamp\n    if (courseType === 'Basics') {\n        dateObj = {\n            ...dateObj, ...basicsData.days[courseDay]\n        }\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            dateObj = {\n            ...dateObj, ...bootcampData.days[courseDay]\n        }\n    }\n    return dateObj;\n}\n\n// ##################################################################\n// ##################################################################\n\nconst generateDataObject = (startDate, courseName, courseType, input, lessonDays) => {\n    // used if we are generating batch schedule straight after making changes to main json file\n    if (input) {\n        bootcampData = input;\n    } else {\n        bootcampData = bootcampDataJson;\n    }\n\n    let date = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let utc;\n    utc = getLocalDateTime(utc, 'T16:00', courseName, courseType, date);\n    let dateWeek = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let classDatesCount = 1;\n    let week = 1;\n    let weekDay = 1;\n    let data;\n    let courseDayCount;\n    // starts from 0 because it's tracking the index of the json data file\n    let courseDay = 0;\n\n    let topLevelObject = {\n            courseType: courseType,\n            days: {}\n        };\n\n    data = generateTopLevelObject(courseType, topLevelObject, lessonDays, courseName);\n\n    // set the number of course days based on course type\n    if (courseType === 'Basics') {\n        courseDayCount = 13;\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n        courseDayCount = 116;\n    }\n\n    const dayArray = data.daysOfWeek;\n    let dayIndex = data.courseStartIndex;\n\n    while (courseDayCount > 0) {\n        const dateString = date.toFormat('dd-MM-yyyy');\n\n        // setting filename from start date, end date, courseName of course \n        // if this condition is met, dateString will be the end date of course\n        if (courseDay + 1 === data.totalCourseDays) {\n            // start date\n            const displayDate = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n            const displayName = `${displayDate.toFormat('dd-MM-yyyy')}_${dateString}_BATCH${courseName}`;\n            data.courseName = displayName;\n        }\n\n        let dateObj;\n        // if date is a public holiday\n        if (phWithoutCh.includes(dateString) || winterBreak.includes(dateString)) {\n            dateObj = generateHolidayObject (dateString, week, date, dateObj);\n\n        // if date is not a holiday\n        } else {\n            dateObj = generateCourseDayObject (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay);\n\n            // increase course days on days that classes are held,\n            // DO NOT increase course days on holidays\n            courseDayCount -= 1;\n            courseDay += 1;\n        }\n        data.days[dateString] = dateObj;\n\n        const firstDay = DateTime.fromFormat(startDate, \"yyyy-MM-dd\").toFormat('dd-MM-yyyy');\n        const formattedDate = date.toFormat('dd-MM-yyyy');\n\n        if (classDatesCount === data.totalCourseDays && courseType === 'Basics') {\n            date = date.plus({ days: 2 }); \n            utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n            weekDay += 1;\n            week += 1;\n\n        } else {\n            // first meeting of basics is a pre-course meeting that always starts on a saturday\n            // (not included in daysOfWeek)\n            \n            // this is the end of the dayArray (last day of the week)\n            if (( dayIndex === dayArray.length -1) || \n                (formattedDate === firstDay && courseType === 'Basics')) {\n                weekDay = 1;\n                week += 1;\n                dateWeek = dateWeek.plus({ weeks: 1 });\n                // return to beginning of array (return to beginning of week)\n                dayIndex = 0;\n                date = date.plus({ weeks: 1 }).set({ weekday: dayArray[dayIndex] })\n                utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n\n            } else {\n                // day within the week\n                dayIndex += 1;\n                date = date.set({ weekday: dayArray[dayIndex] })\n                utc = getLocalDateTime (utc, 'T13:00', courseName, courseType, date);\n\n                if (!phWithoutCh.includes(dateString)) {\n                    weekDay += 1;\n                }\n            }\n        }\n        // increase classDatesCount regardless of whether it is a public holiday\n        classDatesCount += 1;\n    }\n    // TODO: needs to be removed after ftbc4 are finished\n    if (courseType === 'Bootcamp FT' && courseName === '4') {\n        data.days['09-07-2021'].dayNumber = 1;\n    }\n    return data;\n}\n\nexport default generateDataObject;","import React, { useState } from \"react\";\nimport AddItemModal from \"./main-accordion/AddItemModal\";\nimport MainAccordion from \"./main-accordion/MainAccordion\";\nimport Button from \"react-bootstrap/Button\";\nimport download from \"../../download\";\nimport generateDataObject from \"../../generateCourseDates\";\nimport { DateTime } from \"luxon\";\n\n// helper function for cpoying data to clipboard\nconst copyToClipboard = (data) => {\n  // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n  let selBox = document.createElement('textarea');\n  selBox.style.position = 'fixed';\n  selBox.style.left = '0';\n  selBox.style.top = '0';\n  selBox.style.opacity = '0';\n  // this copies the JSON data to clipboard with original formatting\n  selBox.value = JSON.stringify(data, undefined, 2);\n  document.body.appendChild(selBox);\n  selBox.focus();\n  selBox.select();\n  document.execCommand('copy');\n  document.body.removeChild(selBox);\n}\n \n// ############################################################################\n// ############################################################################\nconst GenerateDataShiftContent = ({\n  bootcampData,\n  setBootcampData,\n  mainFile,\n  batchFile,\n  setDaysInBatchFile,\n  setDaysInMainFile,\n  batchArray\n}) => {\n  const [showInputModal, setShowInputModal] = useState(false);\n  const [courseDate, setCourseDate] = useState(\"\");\n  // used in the close all functionality\n  const [accordionKey, setAccordionKey] = useState(1234);\n\n  // function that handles download of main data file after edits\n  const handleDownloadMainClick = async () => {\n    download(mainFile, \"modified-main-data-file.json\");\n  };\n\n  // function that handles download of individual batch data file after edits\n  const handleBatchDownloadClick = () => {\n    download(\n      batchFile,\n      `modified-${batchFile.courseName}-file.json`\n    );\n  };\n\n  // state set so that rerender occurs\n  const handleCloseAll = () => {\n    const newAccordionKeyValue = accordionKey + 1;\n    setAccordionKey(newAccordionKeyValue);\n  }\n\n  // copys json data file to clipboard\n  const handleEditInGithub = (data) => {\n    copyToClipboard(data);\n\n    let gitbookUrl;\n    if (data.repoUrls) {\n      gitbookUrl = mainFile.repoUrls.edit;\n    } else {\n      gitbookUrl = `https://github.com/rocketacademy/scheduler/edit/main/src/data/${batchFile.courseName}.json`;\n    }\n    // opens a new window in the browser at specified address(gitbook edit page)\n    window.open(gitbookUrl, \"_blank\")\n  }\n\n  const handleBatchEdit = async (index) => {\n    try {\n      const batch = batchArray[index];\n      const startDate = DateTime.fromFormat(batch.content.courseName.slice(0, 10), 'dd-MM-yyyy').toFormat('yyyy-MM-dd');\n      let courseType;\n      if (batch.name.includes('pt')) {\n        courseType = 'Bootcamp PT';\n      } else {\n        courseType = 'Bootcamp FT';\n      }\n      const courseName = batch.content.courseName[batch.content.courseName.length-1];\n      const data = await generateDataObject(startDate, courseName, courseType, mainFile);\n      copyToClipboard(data);\n      window.open(`https://github.com/rocketacademy/scheduler/edit/main/src/data/${data.courseName}.json`, \"_blank\")\n\n    }\n    catch (error) {\n      console.log(error);\n    }\n  }\n  \n  return (\n    <>\n      {/* renders batch schedule data file  */}\n      {bootcampData.constructor === Object &&\n        Object.keys(bootcampData).length > 0 && (\n          <div>\n            <div className=\"download-button-container\">\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={() => handleEditInGithub(batchFile)}\n              >\n                  Edit in GitHub Repo\n              </Button>\n              {\" \"}\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={handleBatchDownloadClick}\n              >\n                Download Modified Batch File\n              </Button>\n            </div>\n            <div className=\"close-all-container\">\n              <Button onClick={handleCloseAll}>close all</Button>\n            </div>\n            {Object.keys(bootcampData).map((day, dayIndex) => {\n              return (\n                <>\n                <div>\n                  <MainAccordion\n                    dayIndex={dayIndex}\n                    bootcampData={bootcampData}\n                    setBootcampData={setBootcampData}\n                    day={day}\n                    setShowInputModal={setShowInputModal}\n                    setCourseDate={setCourseDate}\n                    handleCloseAll={handleCloseAll}\n                    accordionKey={accordionKey}\n                    setAccordionKey={setAccordionKey}\n                    setDaysInBatchFile={setDaysInBatchFile}\n                    setDaysInMainFile={setDaysInMainFile}\n                  />\n                </div>\n                </>\n              );\n            })}\n            {/* modal that takes in user input to create a new item in the schedule  */}\n            {showInputModal && courseDate && (\n              <AddItemModal\n                show={showInputModal}\n                onHide={() => setShowInputModal(false)}\n                bootcampdata={bootcampData}\n                setbootcampdata={setBootcampData}\n                setShowInputModal={setShowInputModal}\n                coursedate={courseDate}\n                setDaysInBatchFile={setDaysInBatchFile}\n                setDaysInMainFile={setDaysInMainFile}\n              />\n            )}\n          </div>\n        )}\n      {/* displays main data file  */}\n      {bootcampData.constructor === Array && (\n        <div className=\"accordion-container\">\n          <div className=\"download-button-container\">\n            <Button\n              className=\"btn btn-primary\"\n              onClick={() => handleEditInGithub(mainFile)}\n            >\n            Edit in GitHub Repo\n            </Button>\n            <Button\n              className=\"btn btn-primary\"\n              onClick={handleDownloadMainClick}\n            >\n              download modified file\n            </Button>\n          </div>\n          <div className=\"batchfile-edit-container\">\n          {batchArray.map((batch, index) => {\n            return (\n              <>\n              <Button className=\"batch-update\" onClick={() => handleBatchEdit(index)}>\n                Update {batch.name}\n              </Button>\n              </>\n            )\n          })}\n          </div>\n          <div className=\"close-all-container\">\n            <Button onClick={handleCloseAll}>Close All</Button>\n          </div>\n          {bootcampData.map((day, dayIndex) => {\n            return (\n              <MainAccordion\n                dayIndex={dayIndex}\n                bootcampData={bootcampData}\n                setBootcampData={setBootcampData}\n                day={dayIndex}\n                setShowInputModal={setShowInputModal}\n                setCourseDate={setCourseDate}\n                handleCloseAll={handleCloseAll}\n                accordionKey={accordionKey}\n                setAccordionKey={setAccordionKey}\n                setDaysInMainFile={setDaysInMainFile}\n                setDaysInBatchFile={setDaysInBatchFile}\n              />\n            );\n          })}\n          {showInputModal && (\n            <AddItemModal\n              show={showInputModal}\n              onHide={() => setShowInputModal(false)}\n              bootcampdata={bootcampData}\n              setbootcampdata={setBootcampData}\n              setShowInputModal={setShowInputModal}\n              coursedate={courseDate}\n              setDaysInMainFile={setDaysInMainFile}\n              setDaysInBatchFile={setDaysInBatchFile}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateDataShiftContent;\n\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\n\n// side navbar that displays links to all batch schedules in batchArray\nfunction ActiveCourses({ batchArray, setBootcampData, setBatchFile }) {\n  const handleSelectClick = (batch) => {\n     setBootcampData(\n      JSON.parse(JSON.stringify(batch.content.days))\n    )\n    setBatchFile(\n      JSON.parse(JSON.stringify(batch.content))\n    )\n  };\n\n  return (\n    <div>\n      <h4>Batches</h4>\n      <Nav variant=\"pills\" className=\"flex-column \">\n        {/* a link is rendered for each element in batchArray */}\n        {batchArray.map((batch, index) => {\n          return (\n            <Nav.Link\n              // when a link is clicked , the content of the selected batch file is rendered\n              onClick={() =>\n                handleSelectClick(batch)\n              }\n              eventKey={index}\n            >\n              {batch.name}\n            </Nav.Link>\n          );\n        })}\n      </Nav>\n    </div>\n  );\n}\n\nexport default ActiveCourses;\n","import { DateTime } from 'luxon';\n\n// timezone is manually set to 'Asia/Singapore' because we are located here\nconst timeZoneSet = 'Asia/Singapore';\n\n// helper function , generates list for pre-class, in-class, post-class\nconst generateClassList = (classList, classType) => {\n    if (classType.mdText) {\n        classList += classType.mdText;\n    }\n\n    if ( classType.items.length > 0) {\n        for (let j = 0; j < classType.items.length; j +=1 ) {\n            if (classType.items[j].url) {\n                classList += `* [${classType.items[j].name}](${classType.items[j].url})\\n`;\n            } else {\n                classList += `* ${classType.items[j].name}\\n`;\n            }  \n        }\n        classList += '\\n';\n    }\n    return classList;\n}\n\n// helper function, generates content list for each section \nconst generateSectionList = (sectionName, sectionType) => {\n    let sectionString = '';\n    if (sectionType.items.length > 0) {\n        if (sectionName === 'preclass') {\n            sectionString = '### Pre Class\\n';\n        } else if (sectionName === 'inclass') {\n            sectionString = '### In Class\\n';\n        } else if (sectionName === 'postclass') {\n            sectionString = '### Post Class\\n';\n        } \n    }\n    \n    sectionString = generateClassList (sectionString, sectionType);\n    return sectionString;\n}\n\n// helper function to get arrays needed to generate markdown\nconst generateCourseArrays = (data) => {\n    // get all course dates\n    Object.keys(data.days).forEach((date) => {\n        dates.push(date);\n    })\n\n    // all possible day numbers that course days fall on\n    dates.forEach((date) => {\n        dayNumbers.push(data.days[date].dayNumber);\n    })\n    dayNumbers = [...new Set(dayNumbers)].sort();\n\n    // all possible names of days of week courdays fall on (this is the table header)\n    dayNumbers.forEach((number) => {\n        daysOfWeek.push(dayNames[number]);\n    })\n\n    // getting last week of course\n    lastWeek = data.days[dates[dates.length -1]].courseWeek;\n\n    // getting the dates the coursedays fall on for each week\n    for  (let l = 0; l < lastWeek; l += 1) {\n        const week = [];\n        for (let k = 0; k < dates.length; k += 1) {\n            if (data.days[dates[k]].courseWeek === weekCount) {\n                week.push(data.days[dates[k]].courseDate);\n            }\n        }\n        weekDates.push(week);\n        weekCount += 1;\n    }\n\n    // getting rows of table\n    // for each subarray in the weekDates array, displayWeek is initialised to ['-', '-', '-']\n    for (let n = 0; n < weekDates.length; n += 1) {\n        let displayWeek = [];\n        dayNumbers.forEach((day) => {\n            displayWeek.push('-');\n        })\n        \n        // each element in each subarray of weekDates is compared to the element in the same index\n        // position in dayNumbers array\n        for (let m = 0; m < weekDates[n].length; m += 1) {\n            for (let p = 0; p < dayNumbers.length; p += 1) {\n                // if element.dayNumber === element at the same index position in dayNumbers array \n                if (data.days[weekDates[n][m]].dayNumber === dayNumbers[p]) {\n                    if (data.days[weekDates[n][m]].dateTypes.title) {\n                        // the '-' in displayWeek is replaced by the dateString\n                        const dateString = DateTime.fromISO(data.days[weekDates[n][m]].meetingDateTimeUTC, { zone: timeZoneSet }).toFormat('d MMM');\n                        displayWeek[p] = `[${dateString}](#course-day-${data.days[weekDates[n][m]].courseDay})`;\n                    } else {\n                        // if title of the day does not exist, it means it's a public holiday\n                        displayWeek[p] = `${data.days[weekDates[n][m]].dateTypes.holidayType} (${data.days[weekDates[n][m]].dateTypes.location})`;\n                    }\n                }\n            }\n        }\n        tableRows.push(displayWeek);\n    }\n}\n\n// helper function that generates course days table marksown\nconst generateCourseDaysTable = (output) => {\n    // schedule table header \n    output += '| Week |';\n    for (let p = 0; p < daysOfWeek.length; p += 1) {\n        output += ` ${daysOfWeek[p]} |`;\n    }\n\n    output += '\\n| :---: |';\n    for (let r = 0; r < daysOfWeek.length; r += 1) {\n        output += ' :---: |';\n    }\n\n    output += '\\n';\n\n    // schedule table content\n    for (let q = 0; q < tableRows.length; q += 1) {\n        output += `| ${q} |`;\n        for (let r = 0; r < tableRows[q].length; r += 1) {\n            output += ` ${tableRows[q][r]} |`;\n        }\n        output += '\\n';\n    }\n    return output;\n}\n\n// helper function that produces the main content of the page (in markdown)\nconst generateCourseData = (output, data) => {\n    // loop that generates the main part of the page\n    for (let i = 0; i < Object.keys(data.days).length; i += 1) {\n        let localDate;\n        // course day\n        if (data.days[dates[i]].meetingDateTimeUTC) {\n            // getting the date/time from utc string, timezone is manually set\n            localDate = DateTime.fromISO(data.days[dates[i]].meetingDateTimeUTC, { zone: timeZoneSet });\n            const formattedDate = localDate.toFormat('EEE d MMM');\n            output += `# ${formattedDate}, Week ${data.days[dates[i]].courseWeek}, Course Day ${data.days[dates[i]].courseDay}{#course-day-${data.days[dates[i]].courseDay}}:`;\n            // adding title to heading\n            output += ` ${data.days[dates[i]].dateTypes.title}\\n`;\n            // getting meeting time\n            const localTime = localDate.toFormat('t');\n            output += `Meeting time: ${localTime} `;\n            const timeZone = localDate.toFormat('z');\n            // luxon does not provide abbreviated localised timezones\n            if (timeZone === 'Asia/Singapore') {\n                output += 'SGT ';\n            }\n            const timeOffset = localDate.toFormat('ZZZZ');\n            output += `(${timeOffset})\\n\\n`;\n        } else {\n            // public holiday, as public holiday has no meeting time\n            localDate = DateTime.fromFormat(data.days[dates[i]].courseDate, 'dd-MM-yyyy').toFormat('EEE, d MMM');\n            output += `# ${localDate}: `;\n            if (data.days[dates[i]].dateTypes.location === 'SG') {\n                output += `Singapore `;\n            }\n            output += `${data.days[dates[i]].dateTypes.holidayType}, ${data.days[dates[i]].dateTypes.name}`;\n        }\n\n        // generate day's course material\n        const generalDateTypes = data.days[dates[i]].dateTypes.general;\n        const projectDateTypes = data.days[dates[i]].dateTypes.projects;\n\n        if (projectDateTypes) {\n            if (projectDateTypes.projectDue.items) {\n                output += '### Project Due\\n';\n                output += `[${projectDateTypes.projectDue.items[0].name}](${projectDateTypes.projectDue.items[0].url})\\n\\n`;\n            }\n        }\n\n        if (generalDateTypes) {\n            const sectionNames = ['preclass', 'inclass', 'postclass'];\n            const sectionTypes = [generalDateTypes.preClass, generalDateTypes.inClass, generalDateTypes.postClass];\n            for (let t = 0; t < sectionNames.length; t += 1) {\n                output += generateSectionList(sectionNames[t], sectionTypes[t]);\n            }\n        };\n\n        if (projectDateTypes) {\n            if (projectDateTypes.projectStart.items) {\n                if (projectDateTypes.projectStart.items.length > 0) {\n                output += '### Project Start\\n';\n                output += `[${projectDateTypes.projectStart.items[0].name}](${projectDateTypes.projectStart.items[0].url})\\n\\n`;\n                }\n            }\n        }\n        output += '\\n\\n';\n    }\n    return output;\n}\n\nconst dayNames = {\n        1: 'Monday',\n        2: 'Tuesday',\n        3: 'Wednesday',\n        4: 'Thursday',\n        5: 'Friday',\n        6: 'Saturday'\n    }\n\n/* ###################################################\n######################################################\n################################################### */\n\nconst dates = [];\nlet dayNumbers = [];\nconst daysOfWeek = [];\nconst weekDates = [];\nlet weekCount = 1;\nlet lastWeek;\nconst tableRows = [];\n\nconst generateBasicsMarkdown = (data) => {\n  \n    // generate all arrays needed to produce markdown\n    generateCourseArrays(data);\n    \n    // initialize output\n    let output = '---\\ndescription: What and when we will learn\\n---\\n# Course Dates\\n';\n\n    // add course table to output\n    output = generateCourseDaysTable(output);\n    output += '\\n';\n\n    // add course data to output\n    output = generateCourseData(output, data);\n\n    // add further reading section to the end of page\n    output += '# Further Reading\\n### Past Projects\\n * [Drawing With Emojis](https://basics.rocketacademy.co/past-projects/drawing-with-emojis)\\n * [Guess The Word](https://basics.rocketacademy.co/past-projects/guess-the-word)';\n\n   return output;\n}\n\nexport default generateBasicsMarkdown;\n\n","import React from \"react\";\nimport { DateTime } from \"luxon\";\n\n// helper function that generates course day header for a normal course day\nconst NormalCourseDay = ({ todaySectionHeader, day, timeZoneSet, id }) => {\n  localDate = DateTime.fromISO(day.meetingDateTimeUTC, { zone: timeZoneSet });\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  meetingTime = localDate.toFormat(\"t\");\n  timeOffset = localDate.toFormat(\"ZZZZ\");\n  timeZone = localDate.toFormat(\"z\");\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header-div\">\n          <div className=\"main-header\">\n            {!todaySectionHeader ? (\n              <h3 className=\"day-header\">\n                {formattedDate}, Week {day.courseWeek}, Course Day{\" \"}\n                {day.courseDay}\n              </h3>\n            ) : (\n              <h3 className=\"day-header\">{formattedDate}</h3>\n            )}\n          </div>\n          <p>\n            Meeting Time: {meetingTime} SGT ({timeOffset})\n          </p>\n          {day.courseDay > 0 && (\n            <p>{day.dateTypes.module}</p>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\n// helper function that generates courseday header for a holiday\nconst HolidayCourseDay = ({ day, timeZoneSet, id }) => {\n  localDate = DateTime.fromFormat(day.courseDate, \"dd-MM-yyyy\");\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  timeZone = localDate.toFormat(\"z\");\n  // depending on if the holiday is a public/company holiday,\n  // a different output will be rendered\n  if (day.dateTypes.holidayType === \"public holiday\") {\n    holiday = `Public Holiday (${day.dateTypes.name})`;\n  } else {\n    holiday = `Company Holiday (${day.dateTypes.name})`;\n  }\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header\">\n          <h2>\n            {formattedDate}: {day.dateTypes.location} {holiday}\n          </h2>\n        </div>\n      )}\n    </>\n  );\n};\n\nlet localDate;\nlet formattedDate;\nlet meetingTime;\nlet timeZone;\nlet timeOffset;\nlet holiday;\n\n// ######################################################\n// ######################################################\n\n// function that generates the header for each course day\nconst GenerateCourseDayHeader = ({ todaySectionHeader, day, coursetype }) => {\n  // this is the timezone of the area we are in\n  const timeZoneSet = \"Asia/Singapore\";\n\n  if (day.meetingDateTimeUTC) {\n    return (\n      <NormalCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n      />\n    );\n  } else {\n    return (\n      <HolidayCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n      />\n    );\n  }\n};\n\nexport default GenerateCourseDayHeader;\n","import React, { useState } from \"react\";\nimport generateDataObject from \"../../../generateCourseDates.js\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport download from \"../../../download.js\";\nimport generateBasicsMarkdown from \"../../../generateBasicsMarkdown.js\";\n\nconst DatePicker = ({ \n  setBootcampData, \n }) => {\n    // inputs from user used to generate course data\n  const [startDate, setStartDate] = useState(\"\");\n  const [courseName, setCourseName] = useState(\"\");\n  const [courseType, setCourseType] = useState(\"\");\n  const [firstDay, setFirstDay] = useState(null);\n  const [secondDay, setSecondDay] = useState(null);\n\n  // function that generates and downloads schedule data when download button is clicked\n  const handleDownload = async (e) => {\n    e.preventDefault();\n    try {\n      const data = await generateDataObject(startDate, courseName, courseType, null, null);\n      download(data, `${data.courseName}.json`);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // function that generates and renders schedule data when button is clicked\n  const handleRender = async (e) => {\n    e.preventDefault();\n    try {\n      const data = await generateDataObject(startDate, courseName, courseType, null, null);\n      await setBootcampData(JSON.parse(JSON.stringify(data.days)));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const addToGitHubRepo = async (e) => {\n    e.preventDefault();\n    try {\n      const data = await generateDataObject(startDate, courseName, courseType, null, null);\n      // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n      let selBox = document.createElement('textarea');\n      selBox.style.position = 'fixed';\n      selBox.style.left = '0';\n      selBox.style.top = '0';\n      selBox.style.opacity = '0';\n      // this copies the JSON data to clipboard with original formatting\n      selBox.value = JSON.stringify(data, undefined, 2);\n      document.body.appendChild(selBox);\n      selBox.focus();\n      selBox.select();\n      document.execCommand('copy');\n      document.body.removeChild(selBox);\n\n      // opens a new window in the browser at specified address(gitbook create new page)\n      window.open('https://github.com/rocketacademy/scheduler/new/main/src/data', \"_blank\")\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const generateMarkdown = async () => {\n    try {\n      const dayNumbers = {\n        'Monday': 1,\n        'Tuesday': 2,\n        'Wednesday': 3,\n        'Thursday': 4,\n        'Friday': 5,\n        'Saturday': 6,\n        'Sunday': 7\n      };\n\n      const lessonDays = [dayNumbers[firstDay], dayNumbers[secondDay]];\n      console.log(lessonDays);\n      let data = await generateDataObject(startDate, courseName, courseType, null, lessonDays);\n      data = generateBasicsMarkdown(data);\n      console.log('data', data);\n      // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n      let selBox = document.createElement('textarea');\n      selBox.style.position = 'fixed';\n      selBox.style.left = '0';\n      selBox.style.top = '0';\n      selBox.style.opacity = '0';\n      selBox.value = data;\n      document.body.appendChild(selBox);\n      selBox.focus();\n      selBox.select();\n      document.execCommand('copy');\n      document.body.removeChild(selBox);\n\n      // opens a new window in the browser at specified address(gitbook create new page)\n      // window.open('https://github.com/rocketacademy/basics-docs/new/master/course-logistics', \"_blank\")\n    }\n    catch(error) {\n      console.log(error);\n    }\n  }\n\n  console.log('first day', firstDay);\n  console.log('second day', secondDay);\n\n  return (\n    <>\n      <div className=\"date-picker\">\n        <div>\n          <h2>Generate Schedule Data File</h2>\n        </div>\n        <div className=\"input-form-container\">\n          <Form className=\"input-form\">\n            <div className=\"input-fields\">\n            <Form.Group className=\"mb-3 input\" controlId=\"formDate\">\n              <Form.Label>Start Date</Form.Label>\n              <Form.Control\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Batch Number</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={courseName}\n                onChange={(e) => setCourseName(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Course Type</Form.Label>\n              <Form.Select\n                aria-label=\"course-type\"\n                onChange={(e) => setCourseType(e.target.value)}\n              >\n                <option>Select course type</option>\n                <option value=\"Basics\">Basics</option>\n                <option value=\"Bootcamp FT\">Bootcamp FT</option>\n                <option value=\"Bootcamp PT\">Bootcamp PT</option>\n              </Form.Select>\n            </Form.Group>\n            </div>\n            {courseType === 'Basics' && (\n              <div className=\"basics-days\">\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                  <Form.Label>1st Course Day</Form.Label>\n                  <Form.Select\n                    aria-label=\"course-day-1\"\n                    onChange={(e) => setFirstDay(e.target.value)}\n                  >\n                    <option>Select day</option>\n                    <option value=\"Monday\">Monday</option>\n                    <option value=\"Tuesday\">Tuesday</option>\n                    <option value=\"Wednesday\">Wednesday</option>\n                    <option value=\"Thursday\">Thursday</option>\n                    <option value=\"Friday\">Friday</option>\n                    <option value=\"Saturday\">Saturday</option>\n                    <option value=\"Sunday\">Sunday</option>\n                  </Form.Select>\n                </Form.Group>\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                  <Form.Label>2nd Course Day</Form.Label>\n                  <Form.Select\n                    aria-label=\"course-day-2\"\n                    onChange={(e) => setSecondDay(e.target.value)}\n                  >\n                  <option>Select day</option>\n                  <option value=\"Monday\">Monday</option>\n                  <option value=\"Tuesday\">Tuesday</option>\n                  <option value=\"Wednesday\">Wednesday</option>\n                  <option value=\"Thursday\">Thursday</option>\n                  <option value=\"Friday\">Friday</option>\n                  <option value=\"Saturday\">Saturday</option>\n                  <option value=\"Sunday\">Sunday</option>\n                  </Form.Select>\n                </Form.Group>\n              </div>\n            )}\n          </Form>\n          <div className=\"submit-button-container\">\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={(e) => {\n                handleRender(e);\n              }}\n            >\n              Render Schedule\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={(e) => {\n                handleDownload(e);\n              }}\n            >\n              Download Schedule\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={(e) => {\n                addToGitHubRepo(e);\n              }}\n            >\n              Add to GitHub Repo\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={(e) => {\n                generateMarkdown(e);\n              }}\n            >\n              Basics Markdown\n            </Button>\n          </div>\n          <br></br>\n          <div>\n            <a href=\"https://github.com/rocketacademy/scheduler\">\n              link to GitHub repo\n            </a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DatePicker;\n","import React from \"react\";\nimport GenerateDataShiftContent from \"../GenerateDataShiftContent\";\nimport ActiveCourses from \"./ActiveCourses.jsx\";\nimport DatePicker from \"./DatePicker.jsx\";\n\nconst DataShift = ({ \n  batchArray, \n  bootcampData, \n  setBootcampData, \n  setBatchFile, \n  batchFile, \n  setDaysInBatchFile, \n  setDaysInMainFile\n }) => {\n \n  return (\n    <>\n      <div className=\"datashift-container\">\n        <div className=\"all-courses-navbar\">\n          {/* this component contains links to indivudual batch schedules to be rendered and edited */}\n          <ActiveCourses\n            batchArray={batchArray}\n            setBootcampData={setBootcampData}\n            setBatchFile={setBatchFile}\n          />\n        </div>\n        <div className=\"data-shift\">\n          <div className=\"data-container\">\n            {/* this component generates a course schedule based on start date and course type from the main json data file */}\n            <DatePicker\n              bootcampData={bootcampData}\n              setBootcampData={setBootcampData}\n            />\n            {/* this component allows the user to edit the schedule rendered */}\n            <GenerateDataShiftContent\n              batchArray={batchArray}\n              bootcampData={bootcampData}\n              setBootcampData={setBootcampData}\n              batchFile={batchFile}\n              setDaysInBatchFile={setDaysInBatchFile}\n              setDaysInMainFile={setDaysInMainFile}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DataShift;\n","import React, { useState, useEffect } from \"react\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport DataShift from \"./data-shift/DataShift\";\nimport mainDataFile from \"../../data/bootcamp-course-days.json\";\nimport GenerateDataShiftContent from \"./GenerateDataShiftContent\";\n\nconst TabsContainer = ({ batchArray }) => {\n  const [key, setKey] = useState(\"datePicker\");\n\n  // remains empty until user picks/ generates schedule to edit. this is the days section of the batch data file\n  const [batchDays, setBatchDays] = useState({});\n  // this is the whole data file\n  const [batchFile, setBatchFile] = useState({});\n\n  // this is the main bootcamp data json file that has not been mapped onto any dates\n  const [mainFile, setMainFile] = useState(\n    JSON.parse(JSON.stringify(mainDataFile))\n  );\n  // this is the course days section of the bootcamp data json file  \n  const [mainDays, setMainDays] = useState(\n    JSON.parse(JSON.stringify(mainDataFile.days))\n  );\n  // helper function for setting state (mainFile)\n  const setDaysInMainFile = (mainDays) => {\n    setMainFile({...mainFile, days: mainDays})\n  }\n\n  // helper function for setting state (batchFile)\n  const setDaysInBatchFile = (batchDays) => {\n    setBatchFile({...batchFile, days: batchDays})\n  }\n\n  return (\n    <div class=\"container\">\n    <Tabs\n      id=\"controlled-tab-example\"\n      activeKey={key}\n      onSelect={(k) => setKey(k)}\n      className=\"\"\n    >\n      {/* this tab contains the component for editing the main data file */}\n      <Tab eventKey=\"datePicker\" title=\"Main\">\n        <GenerateDataShiftContent\n          bootcampData={mainDays}\n          setBootcampData={setMainDays}\n          mainFile={mainFile}\n          setMainFile={setMainFile}\n          setDaysInBatchFile={setDaysInBatchFile}\n          setDaysInMainFile={setDaysInMainFile}\n          batchArray={batchArray}\n        />\n      </Tab>\n      {/* this tab contains the component for generating/ editing individual batch schedules */}\n      <Tab eventKey=\"dataShift\" title=\"Batch\">\n        <DataShift\n          batchArray={batchArray}\n          bootcampData={batchDays}\n          setBootcampData={setBatchDays}\n          setBatchFile={setBatchFile}\n          batchFile={batchFile}\n          setDaysInBatchFile={setDaysInBatchFile}\n          setDaysInMainFile={setDaysInMainFile}\n        />\n      </Tab>\n    </Tabs>\n    </div>\n  );\n};\n\nexport default TabsContainer;\n","export default __webpack_public_path__ + \"static/media/4-MILK.46ae71aa.png\";","import React from \"react\";\n\n// displays items in a section's classes\nfunction DisplaySection({ heading, sectionType, day }) {\n  return (\n    <div>\n      <h6 className=\"class-header\">{heading}</h6>\n      <ul>\n        {sectionType.map((item, index) => {\n          let id;\n          // id used for scrollTo function of sidebar modules\n          if (heading === \"Pre Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpc-${index}`;\n          } else if (heading === \"In Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gic-${index}`;\n          } else {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpostc-${index}`;\n          }\n\n          return (\n            <>\n              {item.url && (\n                <li id={id}>\n                  <a href={item.url}>{item.name}</a>\n                </li>\n              )}\n              {!item.url && <li>{item.name}</li>}\n            </>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default DisplaySection;\n","import React from \"react\";\nimport DisplaySection from \"./DisplaySection\";\n\n// if sections project due/ project start/ cp due exist in a course day,\n// this function will generate a header and content for these sections\nconst GenerateNotifications = ({\n  status,\n  projectdue,\n  cpdue,\n  projectstart,\n  day,\n}) => {\n  let heading;\n\n  // generates header for the section\n  if (status) {\n    if (status.items) {\n      if (status === projectdue) {\n        heading = \"Project Due\";\n      } else if (status === projectstart) {\n        heading = \"Project Start\";\n      } else if (status === cpdue) {\n        heading = \"Inteview Prep due\";\n      }\n    }\n  }\n\n  return (\n    <>\n      {status && status.items && (\n        <div className=\"notifications\">\n          <DisplaySection\n            heading={heading}\n            sectionType={status.items}\n            day={day}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateNotifications;\n","const generateSectionArray = (datetype, classType, sectionArray) => {\n    Object.keys(datetype).forEach((section) => {\n        let classTypeSection;\n    // classTypeSection is determined by what classType is\n        if (classType === 'preClass') {\n            classTypeSection = datetype[section].preClass;\n        } else if (classType === 'inClass') {\n            classTypeSection = datetype[section].inClass;\n        } else {\n            classTypeSection = datetype[section].postClass;\n        } \n\n        if (classTypeSection) {\n            // if there are items in classTypeSection, the items are pushed into sectionArray\n            if (classTypeSection.items) {\n                for (let x = 0; x < classTypeSection.items.length; x += 1) {\n                    sectionArray.push(classTypeSection.items[x]);\n                }\n            }\n        }\n    })\n    return sectionArray;\n}\n\nexport default generateSectionArray;","import React from 'react';\nimport DisplaySection from './DisplaySection';\nimport generateSectionArray from '../../generateSectionArray';\n\n\nfunction GenerateDatetypeSections ({ \n                                datetype, \n                                classType, \n                                day \n                                }) { \n    // stores items that are in a particular section of a datetype\n    const sectionArray = [];\n\n    generateSectionArray(datetype, classType, sectionArray);\n\n    // sets the heading depending on the classtype\n    let heading;\n    if (sectionArray.length > 0) {\n           // a header will be created \n        if (classType === 'preClass') {\n            heading ='Pre Class';\n        } else if (classType === 'inClass') {\n            heading = 'In Class';\n        } else {\n            heading = 'Post Class';\n        }\n    }\n\n    return (\n        <div>\n            <DisplaySection \n                        heading={heading} \n                        sectionType={sectionArray} \n                        day={day}\n                        />\n        </div>\n    )\n}\n\nexport default GenerateDatetypeSections\n","import React from \"react\";\nimport GenerateNotifications from \"./GenerateNotifications\";\nimport GenerateDatetypeSections from \"./GenerateDatetypeSections\";\n\n// generates the content and section headings for each course day\nconst GenerateCourseDayContent = ({ day }) => {\n  const projectdue = day.dateTypes.projects.projectDue;\n  const projectstart = day.dateTypes.projects.projectStart;\n  const cpdue = day.dateTypes.cp.cpDue;\n\n  return (\n    <>\n      {/* project due notification  */}\n      <GenerateNotifications\n        status={projectdue}\n        cpdue={cpdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      {/* career prep due notification  */}\n      <GenerateNotifications\n        status={cpdue}\n        cpdue={cpdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      {/* preclass section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"preClass\"\n        day={day}\n      />\n      {/* in class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"inClass\"\n        day={day}\n      />\n      {/* post class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"postClass\"\n        day={day}\n      />\n      {/* project start notification  */}\n      <GenerateNotifications\n        status={projectstart}\n        cpdue={cpdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n    </>\n  );\n};\n\nexport default GenerateCourseDayContent;\n","import React from 'react'\n\n// renders items in a section\nfunction TableSectionContent({ sectionArray }) {\n    return (\n        <ul>\n        {sectionArray.map((item) => {\n            \n            return (\n                <>\n                {item.url && (\n                    <li>\n                        <a href={item.url}>{item.name}</a>\n                    </li>\n                )}\n                {!item.url && (\n                    <li>\n                        {item.name}\n                    </li>\n                )}\n                </>\n            )\n        })}\n        </ul>\n    )\n}\n\nexport default TableSectionContent\n","import React from 'react';\nimport generateSectionArray from '../../../generateSectionArray';\nimport TableSectionContent from './TableSectionContent';\n\n// renders in class/ preclass section of table\nfunction TableClass({ day, \n                      sectionClass\n                     }) {\n\n    const classArray = [];\n    const datetype = day.dateTypes;\n\n    // gets all items in a particular section\n    generateSectionArray(datetype, sectionClass, classArray);\n\n    return (\n        <td>\n            <TableSectionContent sectionArray={classArray} />\n        </td>\n    )\n}\n\nexport default TableClass\n","import React from 'react';\nimport GenerateNotifications from '../GenerateNotifications';\n\n// renders projects section of table\nfunction TableProjects({ day }) {\n    const projectdue = day.dateTypes.projects.projectDue;\n    const projectstart = day.dateTypes.projects.projectStart;\n    const cpdue = day.dateTypes.cp.cpDue;\n\n    return (\n        <div className=\"table-projects\">\n            <GenerateNotifications status={projectdue} \n                               cpdue={cpdue} \n                               projectdue={projectdue} \n                               projectstart={projectstart} \n                               day={day}\n                               />\n            <GenerateNotifications status={projectstart} \n                               cpdue={cpdue} \n                               projectdue={projectdue} \n                               projectstart={projectstart} \n                               day={day}\n                               />\n        </div>\n    )\n}\n\nexport default TableProjects\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport Table from \"react-bootstrap/Table\";\nimport { DateTime } from \"luxon\";\nimport TableClass from \"./TableClass\";\nimport TableProjects from \"./TableProjects\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction ScheduleTable({ weekNumbers, tableData, coursetype, today }) {\n  return (\n    <>\n      <Accordion.Header>\n        <h5>\n          {/* header shows different info depending on date and coursetype  */}\n          {coursetype === \"ft\" &&\n            today.toFormat(\"dd-MM-yyyy\") ===\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>\n                Current Course Week:{\" \"}\n                {weekNumbers.map((num) => {\n                  return <span>{num}</span>;\n                })}\n              </>\n            )}\n          {coursetype === \"ft\" &&\n            today.toFormat(\"dd-MM-yyyy\") !==\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>\n                Next Course Week:{\" \"}\n                {weekNumbers.map((num) => {\n                  return <span>{num}</span>;\n                })}\n              </>\n            )}\n          {coursetype === \"pt\" && (\n              <>Current Month's Schedule</>\n            )}\n        </h5>\n      </Accordion.Header>\n      <Accordion.Body>\n        <Table bordered hover size=\"sm\">\n          <thead>\n            <tr>\n              <th></th>\n              <th>Projects</th>\n              <th>Pre Class</th>\n              <th>In Class</th>\n              <th>Post Class</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tableData.map((date, index) => {\n              // getting the formatted date that will be shown in the table\n              const formattedDate = DateTime.fromFormat(\n                date.courseDate,\n                \"dd-MM-yyyy\"\n              ).toFormat(\"EEE d MMM\");\n              // getting the id that links formattedDate to element in main content page\n              const id = `${coursetype}-week-${date.courseWeek}-day-${date.dayNumber}`;\n\n              return (\n                <tr\n                  className={\n                    today.toFormat(\"dd-MM-yyyy\") ===\n                      DateTime.now().toFormat(\"dd-MM-yyyy\") &&\n                    date.courseDate === today.toFormat(\"dd-MM-yyyy\")\n                      ? \"table-secondary\"\n                      : null\n                  }\n                >\n                  <td\n                    // library react-scroll used to scroll to an element with matching id on main page\n                    className=\"table-date\"\n                  >\n                    <h6\n                      onClick={() =>\n                        scroller.scrollTo(id, {\n                          smooth: true,\n                          offset: -70,\n                          duration: 100,\n                        })\n                      }\n                    >\n                      {formattedDate}\n                    </h6>\n                    <p>\n                      Week {date.courseWeek}\n                      <br></br>Course Day {date.courseDay}\n                    </p>\n                  </td>\n                  {/* getting data for projects section of table */}\n                  <td>\n                    <TableProjects day={tableData[index]} />\n                  </td>\n                  {/* getting data for preclass and inclass section of table */}\n                  <TableClass day={tableData[index]} sectionClass=\"preClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"inClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"postClass\" />\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Accordion.Body>\n    </>\n  );\n}\n\nexport default ScheduleTable;\n","// function that generates data required for rendering schedule table\nconst generateTableData = (scheduleData, coursetype, weekNumbers, tableData, setWeekNumbers, setTableData, today ) => {\n  let firstDay;\n  let moveDate;\n  let lastDay;\n  let firstDayMonth;\n  let lastDayMonth;\n  let moveDateMonth;\n  weekNumbers = [];\n  // shows current month for part time bootcamp\n  firstDayMonth = today.startOf(\"month\");\n  lastDayMonth = today.endOf(\"month\");\n\n  // shows current week for full time bootcamp\n  firstDay = today.startOf(\"week\");\n  lastDay = today.endOf(\"week\");\n\n  moveDate = firstDay;\n  const weekDatesArray = [];\n  // getting all the dates between first day and last day of week inclusive and storing them in an array\n  while (moveDate <= lastDay) {\n    weekDatesArray.push(moveDate.toFormat(\"dd-MM-yyyy\"));\n    moveDate = moveDate.plus({ days: 1 });\n  }\n\n  moveDateMonth = firstDayMonth;\n\n  const monthDatesArray = [];\n  if (coursetype === \"pt\") {\n    // getting all the dates between first day and last day of week inclusive and storing them in an array\n    while (moveDateMonth <= lastDayMonth) {\n      monthDatesArray.push(moveDateMonth.toFormat(\"dd-MM-yyyy\"));\n      moveDateMonth = moveDateMonth.plus({ days: 1 });\n    }\n  }\n\n  const currentWeekData = [];\n  const currentMonthData = [];\n\n  // getting the data (object) for each individual day of the month (used for pt schedule table)\n  if (coursetype === \"pt\") {\n    for (let i = 0; i < monthDatesArray.length; i += 1) {\n      Object.keys(scheduleData).map((day) => {\n        if (day === monthDatesArray[i]) {\n          currentMonthData.push(scheduleData[day]);\n        }\n      });\n    }\n    setTableData(currentMonthData);\n  } else {\n    // getting the data (object) for each individual day of the week\n  for (let i = 0; i < weekDatesArray.length; i += 1) {\n    Object.keys(scheduleData).map((day) => {\n      if (day === weekDatesArray[i]) {\n        currentWeekData.push(scheduleData[day]);\n      }\n    });\n  }\n    setTableData(currentWeekData);\n  }\n\n  \n  // getting the week's courseWeek that the indicator will point to\n  weekDatesArray.forEach((date) => {\n    if (\n      scheduleData[date] &&\n      !weekNumbers.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumbers.push(scheduleData[date].courseWeek);\n    }\n  });\n  setWeekNumbers(weekNumbers);\n}\n\nexport default generateTableData;","import React, { useEffect, useState } from \"react\";\nimport ScheduleTable from \"./ScheduleTable\";\nimport generateTableData from \"../../../generateTableData\";\n\nconst ContentTable = ({ scheduleData, coursetype, startDay }) => {\n  const [weekNumbers, setWeekNumbers] = useState();\n  const [tableData, setTableData] = useState();\n\n  useEffect(() => {\n    generateTableData(\n      scheduleData,\n      coursetype,\n      weekNumbers,\n      tableData,\n      setWeekNumbers,\n      setTableData,\n      startDay\n    );\n  }, [scheduleData]);\n\n  return (\n    <div className=\"schedule-table\">\n      {/* table which displays current week's/ month's content based on course type */}\n      {weekNumbers && tableData && (\n        <ScheduleTable\n          weekNumbers={weekNumbers}\n          tableData={tableData}\n          coursetype={coursetype}\n          today={startDay}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ContentTable;\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport GenerateCourseDayHeader from \"../GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"../GenerateCourseDayContent\";\nimport GenerateDatetypeSections from \"../GenerateDatetypeSections\";\nimport { DateTime } from \"luxon\";\n\n// helper function that finds previous course day\nconst findPreviousDay = (scheduleData, today, coursetype) => {\n  let dayBefore;\n\n  if (coursetype === \"ft\") {\n    if (today.weekday === 1) {\n      dayBefore = today.plus({ days: -3 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      dayBefore = today.plus({ days: -2 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.plus({ days: -1 }).toFormat('dd-MM-yyyy');\n    }\n  } else if (coursetype === \"pt\") {\n    if (today.weekday === 1) {\n      dayBefore = today\n        .plus({ weeks: -1 })\n        .set({ weekday: 6 })\n        .toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday > 1 && today.weekday <= 6) {\n      dayBefore = today.set({ weekday: 1 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    }\n  }\n\n  if (scheduleData[dayBefore].dateTypes.holidayType) {\n    dayBefore = findPreviousDay(scheduleData, dayBefore, coursetype);\n  }\n\n  return dayBefore;\n};\n\n//helper funcyion that finds next course day\nconst findNextDay = (scheduleData, today, coursetype, firstDayOfCourse) => {\n  let nextDay;\n\n  if (coursetype === \"ft\" && DateTime.now() > firstDayOfCourse) {\n    if (today.weekday === 6) {\n      nextDay = today.plus({ days: 2 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      nextDay = today.plus({ days: 1}).toFormat('dd-MM-yyyy');\n    } else {\n      nextDay = today.toFormat(\"dd-MM-yyyy\");\n    }\n  } else if (coursetype === \"pt\" && DateTime.now() > firstDayOfCourse) {\n    if (today.weekday === 1) {\n      nextDay = today.toFormat('dd-MM-yyyy');\n    } else if (today.weekday > 1 && today.weekday <= 6) {\n      nextDay = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      nextDay = today.plus({ days: 1 }).toFormat(\"dd-MM-yyyy\");\n    }\n  } else {\n    nextDay = today.toFormat('dd-MM-yyyy');\n  }\n\n  if (scheduleData[nextDay].dateTypes.holidayType) {\n    nextDay = findNextDay(scheduleData, nextDay, coursetype);\n  }\n\n  return nextDay;\n};\n// ##############################################################################\n\nfunction CurrentDaySection({ scheduleData, coursetype, today, firstDayOfCourse }) {\n  // indicates whether or not courseweek and course day is shown on the courseday header\n  const todaySectionHeader = true;\n  let previousDay = null;\n  let nextDay;\n  let previousDayId;\n  // finds previous course day, only applicable if course has already started\n  if (DateTime.now() > firstDayOfCourse) {\n    previousDay = findPreviousDay(scheduleData, today, coursetype);\n    previousDayId = `${coursetype}-week-${scheduleData[previousDay].courseWeek}-day-${scheduleData[previousDay].dayNumber}`;\n  }\n\n  // find the next day if current day is not a course day\n  nextDay = findNextDay(scheduleData, today, coursetype, firstDayOfCourse);\n\n  // creating ids for scrollTo function for top section\n  const currentDayId = `${coursetype}-week-${scheduleData[nextDay].courseWeek}-day-${scheduleData[nextDay].dayNumber}`;\n\n  return (\n    <div>\n      <div className=\"today-date\">\n        {nextDay && (\n          <>\n            <div>\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[nextDay]}\n                coursetype={coursetype}\n              />\n            </div>\n            <div className=\"main-header-course-day\">\n              <h5>\n                Current Course Day:{\" \"}\n                {/* shows either today's content or next course day's content depending on if today's content exists  */}\n                {scheduleData[today.toFormat(\"dd-MM-yyyy\")] ? (\n                  <span>\n                    {scheduleData[today.toFormat(\"dd-MM-yyyy\")].courseDay}\n                  </span>\n                ) : (\n                  <span> {scheduleData[nextDay].courseDay}</span>\n                )}\n              </h5>\n            </div>\n            <div className=\"top-content-container\">\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(currentDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Current Course Day:\n                  </h5>\n                  <br></br>\n                  <GenerateCourseDayContent day={scheduleData[nextDay]} />\n                </>\n              </div>\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(previousDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Previous Course Day:\n                  </h5>\n                  <br></br>\n                  {previousDay && (\n                    <GenerateDatetypeSections\n                    datetype={scheduleData[previousDay].dateTypes}\n                    classType=\"postClass\"\n                    day={scheduleData[previousDay]}\n                  />\n                  )}\n                </>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default CurrentDaySection;\n","import React from \"react\";\nimport GenerateCourseDayHeader from \"./GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"./GenerateCourseDayContent\";\nimport ContentTable from \"./schedule-table/ContentTable\";\nimport { scroller } from \"react-scroll\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport CurrentDaySection from \"./current-day/CurrentDaySection\";\nimport { DateTime } from \"luxon\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\n// generates schedule content for a particular course\nfunction ScheduleContent({ scheduleData, coursetype, title, today, firstDayOfCourse }) {\n  // used by scrollTo function to identify where to scroll to from the up arrow at the bottom of the screen\n  const id = `${coursetype}-top`;\n  const todaySectionHeader = false;\n  // let today = DateTime.now();\n\n  // // checking if first day of course is after today, if so today = first day of course, so that current day\n  // // section and tables and display first day/ weeks info\n  // const courseDatesArray = [];\n  // Object.keys(scheduleData).map((day) => {\n  //   courseDatesArray.push(day);\n  // });\n  // courseDatesArray.sort(function(a, b){return a-b});\n  // const firstDayOfCourse = DateTime.fromFormat(courseDatesArray[0], 'dd-MM-yyyy');\n\n  // if (today < firstDayOfCourse) {\n  //   today = firstDayOfCourse;\n  // }\n\n  let nextToday;\n  if (coursetype === \"ft\") {\n    nextToday = today.plus({ weeks: 1 });\n  } else {\n    nextToday = today.plus({ months: 1 });\n  }\n  \n  return (\n    <div className=\"content\">\n      {/* button that takes user back to the top of the page  */}\n      <div\n        className=\"up-arrow\"\n        onClick={() =>\n          scroller.scrollTo(id, {\n            smooth: true,\n            offset: -70,\n            duration: 100,\n          })\n        }\n      >\n        <ExpandLessIcon />\n      </div>\n      <h1 className=\"schedule-header\">{title}</h1>\n      <p id={id}></p>\n     \n      {/* generates table which shows schedule for current week/ month depending on course type */}\n      <CurrentDaySection\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        today={today}\n        firstDayOfCourse={firstDayOfCourse}\n      />\n      <div className=\"schedule-accordion-container\">\n        <Accordion className=\"current-week-accordion\" defaultActiveKey=\"0\">\n          <Accordion.Item eventKey=\"0\">\n            <ContentTable\n              scheduleData={scheduleData}\n              coursetype={coursetype}\n              startDay={today}\n            />\n          </Accordion.Item>\n        </Accordion>\n        <Accordion className=\"current-week-accordion\">\n          {coursetype === \"ft\" && (\n            <Accordion.Item eventKey=\"0\">\n              <ContentTable\n                scheduleData={scheduleData}\n                coursetype={coursetype}\n                startDay={nextToday}\n              />\n            </Accordion.Item>\n          )}\n        </Accordion>\n      </div>\n      <div className=\"schedule-list\">\n        <h1>Full Schedule</h1>\n        {/* generates individual day schedule content */}\n        {Object.keys(scheduleData).map((day) => {\n          const id = `${coursetype}-week-${scheduleData[day].courseWeek}-day-${scheduleData[day].dayNumber}`;\n\n          return (\n            <div className=\"day-class\" id={id}>\n              {/* generates schedule header for individual day */}\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[day]}\n                coursetype={coursetype}\n              />\n              {/* generates content if course day is not a holiday */}\n              {!scheduleData[day].dateTypes.holidayType && (\n                <GenerateCourseDayContent day={scheduleData[day]} />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default ScheduleContent;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { scroller } from 'react-scroll';\n\nfunction ModuleSection({ \n                    section, \n                    index, \n                    sectionNames, \n                    coursetype, \n                    scheduleData \n                }) {\n    return (\n        <>\n        {section.length > 1 && (\n        <Accordion.Item eventKey={index}>\n            <Accordion.Header>{sectionNames[index]}</Accordion.Header>\n            <Accordion.Body>\n            {section.map((info) => {\n            const id = `${coursetype}-week-${scheduleData[info.date].courseWeek}-day-${scheduleData[info.date].dayNumber}`;\n    \n                return (\n                <p onClick={() =>\n                scroller.scrollTo(id, {\n                    smooth: true,\n                    offset: -70,\n                    duration: 100,\n                })\n                }\n                >\n                {info.name}\n                </p>\n                )\n            })}\n            </Accordion.Body>\n        </Accordion.Item>\n        )}\n        </>\n    )\n}\n\nexport default ModuleSection\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Accordion from 'react-bootstrap/Accordion';\nimport ModuleSection from \"./ModuleSection\";\n\n// helper function for generating scheduleObjs array and moduleNameArray\nconst generatingDataArrays = (\n                              scheduleData, \n                              day, \n                              section, \n                              classtype, \n                              scheduleUrls, \n                              scheduleObjs, \n                              moduleNameArray\n                              ) => {\n  if (scheduleData[day].dateTypes[section][classtype].items) {\n    scheduleData[day].dateTypes[section][classtype].items.map((item) => {\n      // if the item has a url\n      if(item.url && !scheduleUrls.includes(item.url)) {\n        // push the url into scheduleUrls\n        scheduleUrls.push(item.url);\n        // push item name, url and date into scheduleObjs\n        scheduleObjs.push({name: item.name, url: item.url, date: day});\n      }\n      if (item.url) {\n        const itemUrlArray = item.url.split('/');\n        // itemUrlArray[3] is used as the heading of each module section\n        // we're filtering out everythign that does not come from the gitbook \n        if (!moduleNameArray.includes(itemUrlArray[3]) && itemUrlArray[2] === 'bootcamp.rocketacademy.co') {\n          moduleNameArray.push(itemUrlArray[3]);\n        }\n      }\n    })\n  }\n}\n\n// helper finction for accessing required items (items in each class of each section of each day)\nconst accessingRequiredItems = (\n                              scheduleData, \n                              day, \n                              scheduleUrls, \n                              scheduleObjs, \n                              moduleNameArray\n                              ) => {\n  if (scheduleData[day].dateTypes.module) {\n    Object.keys(scheduleData[day].dateTypes)\n    // filtering out module key\n    .filter(section => section !== 'module')\n    .map((section) => {\n      Object.keys(scheduleData[day].dateTypes[section])\n      // filtering out type key\n      .filter(classtype => classtype !== 'type')\n      .map((classtype) => {\n        // if there item array exists in a section, call the function that gets the required data\n        generatingDataArrays(scheduleData, \n                            day, \n                            section, \n                            classtype, \n                            scheduleUrls, \n                            scheduleObjs, \n                            moduleNameArray);\n        \n      })\n    })\n  }\n}\n\nconst sortScheduleObjs = (urlObj, moduleName, general, ice, poce) => {\n  const urlModule = urlObj.url.split('/');\n  // this is the part of the url which we used to get the moduleName\n  const urlModuleName = urlModule[3];\n  // if the module name in the url is the current moduleName\n  if (urlModuleName === moduleName) {\n    const splitName = urlObj.name.split('.');\n    const dataObj = { name: urlObj.name, date: urlObj.date }\n    // push the object into the relevant array\n    if (splitName[1] === 'ICE') {\n      ice.push(dataObj);\n    } else if (splitName[1] === 'POCE') {\n      poce.push(dataObj);\n    } else {\n      general.push(dataObj);\n    }\n  }\n}\n \n// ###################################################################\n// ###################################################################\n\nfunction Modules({ scheduleData, coursetype }) {\n  const moduleNameArray = [];\n  const scheduleUrls = [];\n  const scheduleObjs = [];\n\n  // looking through entire data file \n  Object.keys(scheduleData).map((day) => {\n    accessingRequiredItems (\n                            scheduleData, \n                            day, \n                            scheduleUrls, \n                            scheduleObjs, \n                            moduleNameArray\n                            );\n  })\n\n  moduleNameArray.sort();\n\n  return (\n    <div className=\"sidebar-modules\">\n      <h4>Modules</h4>\n      <Nav className=\"flex-column\">\n        {moduleNameArray.map((moduleName) => {\n          // creating array to store items of each section\n          const general = [];\n          const poce = [];\n          const ice = [];\n\n          // sort each object in scheduleObjs into one of 3 arrays, general, ice, poce\n          scheduleObjs.forEach((urlObj) => {\n            sortScheduleObjs(urlObj, moduleName, general, ice, poce);\n          })\n\n          const sectionArray = [];\n          sectionArray.push(general);\n          sectionArray.push(ice);\n          sectionArray.push(poce);\n\n          // names of each section \n          const sectionNames = ['General', 'In Class', 'Post Class'];\n\n          return (\n            <>\n            <h6 className=\"sidebar-subheading\">{moduleName}</h6>\n            <Accordion className=\"modules-accordion\">\n            {sectionArray.map((section, index) => {\n              return (\n              <ModuleSection\n                        section={section} \n                        index={index} \n                        sectionNames={sectionNames} \n                        coursetype={coursetype} \n                        scheduleData={scheduleData} \n                        />\n              )\n            })}\n            </Accordion>\n            </>\n            )\n          }\n        )}\n      </Nav>\n    </div>\n  );\n}\n\nexport default Modules;\n\n\n","import React, { useEffect, useRef } from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { scroller } from \"react-scroll\";\nimport { DateTime } from \"luxon\";\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\nimport Modules from './Modules';\n\n// one of the components in Sidebar\nfunction CourseWeeks({ scheduleData, coursetype, firstDayOfCourse }) {\n  const weeks = [];\n  // used to scroll to current week on page load \n  const executeScroll = () => currentWeekRef.current.scrollIntoView({ block: \"center\" });\n\n  useEffect(() => {\n    if (DateTime.now() > firstDayOfCourse) {\n      executeScroll();\n    }\n  }, []);\n\n  const CurrentWeekDiv = () => {\n    return (\n      <>\n        <div ref={currentWeekRef}></div>\n      </>\n    );\n  };\n\n  // getting all the week numbers\n  Object.keys(scheduleData).forEach((day) => {\n    if (!weeks.includes(scheduleData[day].courseWeek)) {\n      weeks.push(scheduleData[day].courseWeek);\n    }\n  });\n\n  // getting first and last days of week\n  const firstDayOfWeek = DateTime.now().startOf(\"week\");\n  const lastDayOfWeek = DateTime.now().endOf(\"week\");\n  let target = firstDayOfWeek;\n  // array where all course dates in current week will be stored\n  const weeksDates = [];\n\n  // storing week's dates in the array\n  while (target <= lastDayOfWeek) {\n    weeksDates.push(target.toFormat(\"dd-MM-yyyy\"));\n    target = target.plus({ days: 1 });\n  }\n\n  // getting the week's courseWeek that the indicator will point to\n  const weekNumber = [];\n  const currentWeekRef = useRef(null);\n\n  weeksDates.forEach((date) => {\n    if (\n      scheduleData[date] &&\n      !weekNumber.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumber.push(scheduleData[date].courseWeek);\n    }\n  });\n\n  return (\n    <div className=\"sidebar-courseweeks\">\n      <h4>Course Weeks</h4>\n      <Nav\n        variant=\"pills\"\n        defaultActiveKey=\"0\"\n        className=\"flex-column\"\n        navbarScroll=\"true\"\n      >\n        <Nav.Item>\n          <Nav.Link\n            eventKey=\"0\"\n            // uses react-scroll library for scroll function\n            onClick={() =>\n              scroller.scrollTo(`${coursetype}-top`, {\n                smooth: true,\n                offset: -70,\n                duration: 100,\n              })\n            }\n          >\n            Current Day\n          </Nav.Link>\n        </Nav.Item>\n        {weeks.map((week, index) => {\n          // generating id that is linked to id of an element in main content of page\n          // on click, page will scroll to where the element is\n          const navId = `${index + 1}`;\n          const id = `${coursetype}-week-${week}-day-1`;\n          const sidebarId = `${coursetype}-sidebar-week-${week}`;\n          return (\n            <Nav.Item>\n              <Nav.Link\n                eventKey={navId}\n                // uses react-scroll library for scroll function\n                onClick={() =>\n                  scroller.scrollTo(id, {\n                    smooth: true,\n                    offset: -70,\n                    duration: 100,\n                  })\n                }\n              >\n                {week === weekNumber[0] && DateTime.now() > firstDayOfCourse && <CurrentWeekDiv />}\n                <div>\n                  Week {week}\n                  {/* week indicator that indicates that a certain week is the current week  */}\n                  {weeks[index] === weekNumber[0] && (\n                    <span id={sidebarId} className=\"current-wk-indicator\">\n                      <KeyboardBackspaceIcon />\n                      {\"  \"}\n                      this week\n                    </span>\n                  )}\n                </div>\n              </Nav.Link>\n            </Nav.Item>\n          );\n        })}\n      </Nav>\n      <Modules scheduleData={scheduleData} coursetype={coursetype} />\n    </div>\n  );\n}\n\nexport default CourseWeeks;\n","import React from \"react\";\nimport CourseWeeks from \"./CourseWeeks\";\n\n// side navbar , displays a list of course weeks\nfunction SideBar({ scheduleData, coursetype, firstDayOfCourse }) {\n  return (\n    <div className=\"sidebar\">\n      <CourseWeeks \n        scheduleData={scheduleData} \n        coursetype={coursetype} \n        firstDayOfCourse={firstDayOfCourse}  />\n    </div>\n  );\n}\n\nexport default SideBar;\n","import React from \"react\";\nimport ScheduleContent from \"./ScheduleContent\";\nimport SideBar from \"./sidebar/SideBar\";\nimport { DateTime } from 'luxon';\n\nfunction BatchSchedule({ data, title }) {\n  const scheduleData = JSON.parse(JSON.stringify(data.days));\n\n  // needed to generate id for use with react-scroll library, also indicates if course is full time/ part time\n  let coursetype;\n  if (data.courseType === \"Bootcamp PT\") {\n    coursetype = \"pt\";\n  } else {\n    coursetype = \"ft\";\n  }\n\n  let today = DateTime.now();\n\n  // checking if first day of course is after today, if so today = first day of course, so that current day\n  // section and tables and display first day/ weeks info\n  const courseDatesArray = [];\n  Object.keys(scheduleData).map((day) => {\n    courseDatesArray.push(day);\n  });\n  courseDatesArray.sort(function(a, b){return a-b});\n  const firstDayOfCourse = DateTime.fromFormat(courseDatesArray[0], 'dd-MM-yyyy');\n\n  if (today < firstDayOfCourse) {\n    today = firstDayOfCourse;\n  }\n\n  return (\n    <div className=\"course-schedule\">\n      {/* contains links to main part of schedule page */}\n\n      <SideBar \n        scheduleData={scheduleData} \n        coursetype={coursetype}  \n        firstDayOfCourse={firstDayOfCourse} \n        />\n      {/* contains current schedule table and main content of page */}\n      <ScheduleContent\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        title={title}\n        today={today}\n        firstDayOfCourse={firstDayOfCourse}\n      />\n    </div>\n  );\n}\n\nexport default BatchSchedule;\n","import React from \"react\";\nimport { Route, Switch, Link, useRouteMatch, Redirect } from \"react-router-dom\";\nimport logo from \"../../assets/4-MILK.png\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport BatchSchedule from \"./BatchSchedule\";\n\nfunction ScheduleContainer({ batchArray }) {\n  let { path, url } = useRouteMatch();\n \n  // pass individual batch json files into BatchSchedule to generate schedules\n  return (\n    <>\n      <Navbar variant=\"dark\" bg=\"secondary\">\n        <Navbar.Brand href=\"#home\">\n          <img src={logo} alt=\"company logo\"></img>\n        </Navbar.Brand>\n        <Nav className=\"me-auto\">\n          {batchArray.map((batch) => {\n            return (\n              <>\n              <Nav.Link as={Link} to={`${url}/${batch.name}`}>\n                {batch.name.toUpperCase()}\n              </Nav.Link>\n              </>\n            );\n          })}\n        </Nav>\n      </Navbar>\n      <Switch>\n        <Route exact path={path}>\n          <Redirect to={`${path}/${batchArray[0].name}`} />\n        </Route>\n        {batchArray.map((batch) => {\n          return (\n            <Route path={`${path}/${batch.name}`}>\n              <BatchSchedule\n                data={batch.content}\n                title={batch.name.toUpperCase()}\n              />\n            </Route>\n          );\n        })}\n      </Switch>\n    </>\n  );\n}\n\nexport default ScheduleContainer;\n","import React from 'react';\nimport TabsContainer from './components/admin/Tabs';\nimport ptbc1 from '../src/data/16-08-2021_15-10-2022_BATCH1.json';\nimport ftbc4 from '../src/data/09-07-2021_22-12-2021_BATCH4.json';\nimport ptbc2 from '../src/data/15-11-2021_21-01-2023_BATCH2.json';\nimport ftbc5 from '../src/data/04-10-2021_24-03-2022_BATCH5.json';\n\nimport {\n  HashRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport ScheduleContainer from './components/schedules/ScheduleContainer';\n\nfunction App() {\n\n  // put all batch data files in an array to be passed into separate components for /shedule and /admin\n  const batchArray = [{name:\"ptbc1\", content: ptbc1}, {name:\"ptbc2\", content: ptbc2}, {name: \"ftbc4\", content: ftbc4}, {name:\"ftbc5\", content: ftbc5}];\n\n  return (\n    <div className=\"App\">\n        <HashRouter>\n          <Switch>\n            {/* route that takes user to part of app that edits course schedules */}\n            <Route path=\"/admin\">\n              <TabsContainer batchArray={batchArray} />\n            </Route>\n            {/* route that takes user to part of app that displays batch schedules for student use */}\n            <Route path=\"/schedules\">\n              <ScheduleContainer batchArray={batchArray} />\n            </Route>\n          </Switch>\n        </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}