{"version":3,"sources":["logo.svg","generateCourseDates.js","components/DatePicker.jsx","App.js","reportWebVitals.js","index.js"],"names":["publicHolidays","holidayData","PH","publicHolidayArray","Object","keys","map","key","index","push","companyHolidays","company","companyHolidayArray","winterBreak","name","date","phWithoutCh","forEach","holiday","includes","getLocalDateTime","utc","timeString","courseName","courseType","changedFormat","toFormat","DateTime","fromISO","zone","toUTC","toISO","Number","generateHolidayObject","dateString","week","dateObj","courseDay","courseDate","courseWeek","dayNumber","weekday","dateTypes","generateCourseDayObject","weekDay","meetingDateTimeUTC","basicsData","days","bootcampData","generateDataObject","startDate","fromFormat","console","log","data","courseDayCount","dateWeek","classDatesCount","topLevelObject","daysOfWeek","courseStartIndex","totalCourseDays","generateTopLevelObject","dayArray","dayIndex","displayDate","displayName","plus","length","weeks","set","DatePicker","useState","setStartDate","setCourseName","setCourseType","download","dataStr","encodeURIComponent","JSON","stringify","dlAnchorElem","document","createElement","setAttribute","click","handleSubmit","a","className","Form","Group","controlId","Label","Control","type","value","onChange","e","target","Select","Button","variant","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3fe7909b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { DateTime } from 'luxon';\nimport holidayData from './data/2021-sg-stat-holidays.json';\nimport basicsData from './data/basics-course-days.json';\nimport bootcampData from './data/bootcamp-course-days.json';\n\nconst publicHolidays = holidayData.PH;\nconst publicHolidayArray = [];\n// get array of all public holiday dates\nObject.keys(publicHolidays).map((key, index) => {\n    publicHolidayArray.push(key);\n});\n\nconst companyHolidays = holidayData.company;\nconst companyHolidayArray = [];\nconst winterBreak = [];\n// get array of all company holiday dates\nObject.keys(companyHolidays).map((key, index) => {\n    companyHolidayArray.push(key);\n    // get array of winter break dates\n    if(companyHolidays[key].name === 'winter break') {\n        winterBreak.push(companyHolidays[key].date);\n    }\n});\n\nconst phWithoutCh = [];\n// get array of public holidays not including those included in winter break\npublicHolidayArray.forEach((holiday) => {\n    if(!companyHolidayArray.includes(holiday)) {\n        phWithoutCh.push(holiday);\n    }\n});\n\n// helper function for getting utc date/time\nconst getLocalDateTime = (utc, timeString, courseName, courseType, date) => {\n    const changedFormat = date.toFormat(\"yyyy-MM-dd\");\n    if (courseType === 'Basics') {\n    utc = DateTime.fromISO(changedFormat + timeString, {zone: 'Singapore'}).toUTC().toISO();\n    } else {\n        if (courseType === 'Bootcamp' && Number(courseName) % 2 === 0) {\n            utc = DateTime.fromISO(changedFormat + 'T13:00', {zone: 'Singapore'}).toUTC().toISO();\n        } else if (courseType === 'Bootcamp' && Number(courseName) % 2 !== 0) {\n            utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n        }\n    }\n    return utc;\n}\n\n// helper function for deciding what goes in topLevelObject based on course type\nconst generateTopLevelObject = (courseType, topLevelObject) => {\n        if (courseType === 'Basics') {\n            topLevelObject = {\n                daysOfWeek: [2, 6],\n                courseStartIndex: 1,\n                totalCourseDays: 13,\n                ...topLevelObject\n            };\n        } else if (courseType === 'Bootcamp') {\n            topLevelObject = {\n                daysOfWeek: [1, 2, 3, 4, 5],\n                courseStartIndex: 0,\n                totalCourseDays: 68,\n                ...topLevelObject\n            }\n        }\n\n        return topLevelObject;\n    }\n\n// helper function that generates dateObj if the course date falls on a public holiday\nconst generateHolidayObject = (dateString, week, date, dateObj) => {\n    dateObj = {\n        courseDay: null,\n        courseDate: dateString,\n        courseWeek: week,\n        dayNumber: date.weekday,\n        dateTypes: {}\n    }\n\n    if (phWithoutCh.includes(dateString)) {\n        dateObj.dateTypes = publicHolidays[dateString];\n    } else {\n        dateObj.dateTypes = companyHolidays[dateString];\n    }\n\n    return dateObj;\n}\n\n// helper function that generates dateObj for a normal courseday\nconst generateCourseDayObject = (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay) => {\n    // get whatever index of basicsData that is specified by courseDayCount\n    dateObj = {\n        courseDate: dateString,\n        courseWeek: week,\n        weekDay: weekDay,\n        dayNumber: date.weekday,\n        meetingDateTimeUTC: utc,\n        };\n\n    // data is different for basics and bootcamp\n    if (courseType === 'Basics') {\n        dateObj = {\n            ...dateObj, ...basicsData.days[courseDay]\n        }\n    } else if (courseType === 'Bootcamp') {\n            dateObj = {\n            ...dateObj, ...bootcampData.days[courseDay]\n        }\n    }\n    return dateObj;\n}\n\nconst generateDataObject = (startDate, courseName, courseType) => {\n    let date = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    // T16:00 is the time of class on the first day\n    let utc = DateTime.fromISO(startDate + 'T16:00', {zone: 'Singapore'}).toUTC().toISO();\n    // utc = utc.toUTC().toISO();\n    console.log('utc string', utc);\n    let dateWeek = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let classDatesCount = 1;\n    let week = 1;\n    let weekDay = 1;\n    let data;\n    let courseDayCount;\n    // starts from 0 because it's tracking the index of the json data file\n    let courseDay = 0;\n\n    let topLevelObject = {\n            courseType: courseType,\n            days: {}\n        };\n\n        data = generateTopLevelObject(courseType, topLevelObject);\n        console.log(data);\n\n        // set the number of course days based on course type\n        if (courseType === 'Basics') {\n            courseDayCount = 13;\n        } else if (courseType === 'Bootcamp') {\n            courseDayCount = 49;\n        }\n\n        const dayArray = data.daysOfWeek;\n        let dayIndex = data.courseStartIndex;\n    \n        while (courseDayCount > 0) {\n            const dateString = date.toFormat('dd-MM-yyyy');\n\n            // setting filename from start date, end date, courseName of course \n            // if this consition is met, dateString will be the end date of course\n            if (courseDay + 1 === data.totalCourseDays) {\n                // start date\n                const displayDate = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n                const displayName = `${displayDate.toFormat('dd-MM-yyyy')}_${dateString}_BATCH${courseName}`;\n                data.courseName = displayName;\n            }\n\n            let dateObj;\n            // if date is a public holiday\n            if (phWithoutCh.includes(dateString) || winterBreak.includes(dateString)) {\n                dateObj = generateHolidayObject (dateString, week, date, dateObj);\n\n            // if date is not a holiday\n            } else {\n                dateObj = generateCourseDayObject (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay);\n\n                // increase course days on days that classes are held,\n                // DO NOT increase course days on holidays\n                courseDayCount -= 1;\n                courseDay += 1;\n            }\n            data.days[dateString] = dateObj;\n\n           \n            if (classDatesCount === data.totalCourseDays && courseType === 'Basics') {\n                date = date.plus({ days: 2 }); \n                utc = getLocalDateTime (utc, 'T19:00', courseName, courseType, date);\n                weekDay += 1;\n                week += 1;\n\n            } else {\n                // this is the end of the dayArray (last day of the week)\n                if ( dayIndex === dayArray.length -1) {\n                    weekDay = 1;\n                    week += 1;\n                    dateWeek = dateWeek.plus({ weeks: 1 });\n                    // at the end of the array, return to beginning of array (return to beginning of week)\n                    dayIndex = 0;\n                    date = date.plus({ weeks: 1 }).set({ weekday: dayArray[dayIndex] })\n                    utc = getLocalDateTime (utc, 'T19:00', courseName, courseType, date);\n\n                } else {\n                    dayIndex += 1;\n                    date = date.set({ weekday: dayArray[dayIndex] })\n                    utc = getLocalDateTime (utc, 'T13:00', courseName, courseType, date);\n\n                    if (!phWithoutCh.includes(dateString)) {\n                        weekDay += 1;\n                    }\n                }\n            }\n            // increase classDatesCount regardless of whether it is a public holiday\n            classDatesCount += 1;\n        }\n\n    return data;\n}\n\nexport default generateDataObject;","import React , { useState } from 'react';\nimport generateDataObject from '../generateCourseDates.js';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nconst DatePicker = () => {\n    const [startDate, setStartDate] = useState('');\n    const [courseName, setCourseName] = useState('');\n    const [courseType, setCourseType] = useState('');\n    \n    const download = (data) => {\n        // from: https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\n        var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data));\n        var dlAnchorElem = document.createElement('a');\n        dlAnchorElem.setAttribute(\"href\",     dataStr     );\n        dlAnchorElem.setAttribute(\"download\", `${data.courseName}.json`);\n        dlAnchorElem.click();\n    };\n\n    const handleSubmit = async () => {\n        try {\n            const data = await generateDataObject(startDate, courseName, courseType);\n            console.log('data', data);\n            \n            download(data);\n        } \n        catch (error) {\n            console.log(error);\n        }\n    }\n\n    console.log(startDate);\n    console.log(courseName);\n    console.log(courseType);\n    return (\n        <>\n        <div  className=\"date-picker\">\n            <div>\n                <h2>Course Schedule Markdown</h2>\n            </div>\n            <div className=\"input-form-container\">\n                <Form className=\"input-form\">\n                <Form.Group className=\"mb-3 input\" controlId=\"formDate\">\n                    <Form.Label>Start Date</Form.Label>\n                    <Form.Control type=\"date\" value={startDate} onChange={(e) => setStartDate(e.target.value)}/>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                    <Form.Label>Batch Number</Form.Label>\n                    <Form.Control type=\"number\" value={courseName} onChange={(e) => setCourseName(e.target.value)}/>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                <Form.Label>Course Type</Form.Label>\n                <Form.Select aria-label=\"Default select example\" onChange={(e) => setCourseType(e.target.value)}>\n                    <option>Select course type</option>\n                    <option value=\"Basics\">Basics</option>\n                    <option value=\"Bootcamp\">Bootcamp</option>\n                </Form.Select>\n                </Form.Group>\n                <br></br>\n                <div className=\"submit-button-container\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleSubmit}>\n                        Download File\n                    </Button>\n                </div>\n                </Form>\n            </div>\n        </div>\n        </>\n    )\n}\n\nexport default DatePicker;\n","import logo from './logo.svg';\nimport React from 'react';\nimport './App.css';\nimport schedule from './data/data.json';\nimport DatePicker from './components/DatePicker.jsx';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DatePicker />      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}