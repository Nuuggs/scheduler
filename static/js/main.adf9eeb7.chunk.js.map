{"version":3,"sources":["generateCourseDates.js","components/DatePicker.jsx","App.js","reportWebVitals.js","index.js"],"names":["publicHolidays","holidayData","PH","publicHolidayArray","Object","keys","map","key","index","push","companyHolidays","company","companyHolidayArray","winterBreak","name","date","phWithoutCh","forEach","holiday","includes","getLocalDateTime","utc","timeString","courseName","courseType","changedFormat","toFormat","DateTime","fromISO","zone","toUTC","toISO","Number","weekday","generateHolidayObject","dateString","week","dateObj","courseDay","courseDate","courseWeek","dayNumber","dateTypes","generateCourseDayObject","weekDay","meetingDateTimeUTC","basicsData","days","bootcampData","generateDataObject","startDate","fromFormat","data","courseDayCount","dateWeek","classDatesCount","dayArray","topLevelObject","daysOfWeek","courseStartIndex","totalCourseDays","bootcampDays","fullTime","partTime","generateTopLevelObject","dayIndex","displayDate","displayName","plus","length","weeks","set","DatePicker","useState","setStartDate","setCourseName","setCourseType","download","dataStr","encodeURIComponent","JSON","stringify","dlAnchorElem","document","createElement","setAttribute","click","handleSubmit","e","a","preventDefault","console","log","className","Form","Group","controlId","Label","Control","type","value","onChange","target","Select","Button","variant","onClick","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wygJAKMA,EAAiBC,EAAYC,GAC7BC,EAAqB,GAE3BC,OAAOC,KAAKL,GAAgBM,KAAI,SAACC,EAAKC,GAClCL,EAAmBM,KAAKF,MAG5B,IAAMG,EAAkBT,EAAYU,QAC9BC,EAAsB,GACtBC,EAAc,GAEpBT,OAAOC,KAAKK,GAAiBJ,KAAI,SAACC,EAAKC,GACnCI,EAAoBH,KAAKF,GAEQ,iBAA9BG,EAAgBH,GAAKO,MACpBD,EAAYJ,KAAKC,EAAgBH,GAAKQ,SAI9C,IAAMC,EAAc,GAEpBb,EAAmBc,SAAQ,SAACC,GACpBN,EAAoBO,SAASD,IAC7BF,EAAYP,KAAKS,MAKzB,IAAME,EAAmB,SAACC,EAAKC,EAAYC,EAAYC,EAAYT,GAC/D,IAAMU,EAAgBV,EAAKW,SAAS,cAUpC,MATmB,WAAfF,EACAH,EAAMM,WAASC,QAAQH,EAAgBH,EAAY,CAACO,KAAM,cAAcC,QAAQC,QAC1D,gBAAfP,GAAgCQ,OAAOT,GAAc,IAAM,EAClEF,EAAMM,WAASC,QAAQH,EAAgB,SAAU,CAACI,KAAM,cAAcC,QAAQC,QACvD,gBAAfP,GAAgCQ,OAAOT,GAAc,IAAM,GAAsB,gBAAfC,GAAkD,IAAjBT,EAAKkB,QAChHZ,EAAMM,WAASC,QAAQH,EAAgB,SAAU,CAACI,KAAM,cAAcC,QAAQC,QACxD,gBAAfP,GAAkD,IAAjBT,EAAKkB,SAAkC,IAAjBlB,EAAKkB,UACnEZ,EAAMM,WAASC,QAAQH,EAAgB,SAAU,CAACI,KAAM,cAAcC,QAAQC,SAE3EV,GA+BLa,EAAwB,SAACC,EAAYC,EAAMrB,EAAMsB,GAenD,OAdAA,EAAU,CACNC,UAAW,KACXC,WAAYJ,EACZK,WAAYJ,EACZK,UAAW1B,EAAKkB,QAChBS,UAAW,IAGX1B,EAAYG,SAASgB,GACrBE,EAAQK,UAAY1C,EAAemC,GAEnCE,EAAQK,UAAYhC,EAAgByB,GAGjCE,GAILM,EAA0B,SAACN,EAASF,EAAYC,EAAMQ,EAAS7B,EAAMM,EAAKG,EAAYc,GAoBxF,OAlBAD,EAAU,CACNE,WAAYJ,EACZK,WAAYJ,EACZQ,QAASA,EACTH,UAAW1B,EAAKkB,QAChBY,mBAAoBxB,GAIL,WAAfG,EACAa,EAAO,2BACAA,GAAYS,EAAWC,KAAKT,IAEb,gBAAfd,GAA+C,gBAAfA,IACnCa,EAAO,2BACJA,GAAYW,EAAaD,KAAKT,KAGlCD,GAoGIY,EA9FY,SAACC,EAAW3B,EAAYC,GAC/C,IACIH,EADAN,EAAOY,WAASwB,WAAWD,EAAW,cAE1C7B,EAAMD,EAAiBC,EAAK,SAAUE,EAAYC,EAAYT,GAC9D,IAIIqC,EACAC,EALAC,EAAW3B,WAASwB,WAAWD,EAAW,cAC1CK,EAAkB,EAClBnB,EAAO,EACPQ,EAAU,EAIVN,EAAY,EAUG,WAAfd,EACA6B,EAAiB,GACK,gBAAf7B,GAA+C,gBAAfA,IACvC6B,EAAiB,KAMrB,IAHA,IAAMG,GATNJ,EA1F2B,SAAC5B,EAAYiC,GACpC,GAAmB,WAAfjC,EACAiC,EAAc,aACVC,WAAYZ,EAAWY,WACvBC,iBAAkBb,EAAWa,iBAC7BC,gBAAiBd,EAAWc,iBACzBH,QAEJ,GAAmB,gBAAfjC,GAA+C,gBAAfA,EAA8B,CACrE,IAAIqC,EAEAA,EADe,gBAAfrC,EACewB,EAAaU,WAAWI,SAExBd,EAAaU,WAAWK,SAE3CN,EAAc,aACVC,WAAYG,EACZF,iBAAkBX,EAAaW,iBAC/BC,gBAAiBZ,EAAaY,iBAC3BH,GAIX,OAAOA,EAmEJO,CAAuBxC,EALT,CACbA,WAAYA,EACZuB,KAAM,MAYQW,WAClBO,EAAWb,EAAKO,iBAEbN,EAAiB,GAAG,CACvB,IAAMlB,EAAapB,EAAKW,SAAS,cAIjC,GAAIY,EAAY,IAAMc,EAAKQ,gBAAiB,CAExC,IAAMM,EAAcvC,WAASwB,WAAWD,EAAW,cAC7CiB,EAAW,UAAMD,EAAYxC,SAAS,cAA3B,YAA4CS,EAA5C,iBAA+DZ,GAChF6B,EAAK7B,WAAa4C,EAGtB,IAAI9B,OAAO,EAEPrB,EAAYG,SAASgB,IAAetB,EAAYM,SAASgB,GACzDE,EAAUH,EAAuBC,EAAYC,EAAMrB,EAAMsB,IAIzDA,EAAUM,EAAyBN,EAASF,EAAYC,EAAMQ,EAAS7B,EAAMM,EAAKG,EAAYc,GAI9Fe,GAAkB,EAClBf,GAAa,GAEjBc,EAAKL,KAAKZ,GAAcE,EAGpBkB,IAAoBH,EAAKQ,iBAAkC,WAAfpC,GAC5CT,EAAOA,EAAKqD,KAAK,CAAErB,KAAM,IACzB1B,EAAMD,EAAkBC,EAAK,SAAUE,EAAYC,EAAYT,GAC/D6B,GAAW,EACXR,GAAQ,GAIH6B,IAAaT,EAASa,OAAQ,GAC/BzB,EAAU,EACVR,GAAQ,EACRkB,EAAWA,EAASc,KAAK,CAAEE,MAAO,IAElCL,EAAW,EACXlD,EAAOA,EAAKqD,KAAK,CAAEE,MAAO,IAAKC,IAAI,CAAEtC,QAASuB,EAASS,KACvD5C,EAAMD,EAAkBC,EAAK,SAAUE,EAAYC,EAAYT,KAI/DkD,GAAY,EACZlD,EAAOA,EAAKwD,IAAI,CAAEtC,QAASuB,EAASS,KACpC5C,EAAMD,EAAkBC,EAAK,SAAUE,EAAYC,EAAYT,GAE1DC,EAAYG,SAASgB,KACtBS,GAAW,IAKvBW,GAAmB,EAGvB,OAAOH,G,sBCnIIoB,EA3EI,WACf,MAAkCC,mBAAS,IAA3C,mBAAOvB,EAAP,KAAkBwB,EAAlB,KACA,EAAoCD,mBAAS,IAA7C,mBAAOlD,EAAP,KAAmBoD,EAAnB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOjD,EAAP,KAAmBoD,EAAnB,KAEMC,EAAW,SAACzB,GAEd,IAAI0B,EAAU,gCAAkCC,mBAAmBC,KAAKC,UAAU7B,IAC9E8B,EAAeC,SAASC,cAAc,KAC1CF,EAAaG,aAAa,OAAYP,GACtCI,EAAaG,aAAa,WAA1B,UAAyCjC,EAAK7B,WAA9C,UACA2D,EAAaI,SAGXC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACjBD,EAAEE,iBADe,kBAGEzC,EAAmBC,EAAW3B,EAAYC,GAH5C,OAGX4B,EAHW,OAIjBuC,QAAQC,IAAI,OAAQxC,GAEpByB,EAASzB,GANQ,gDASbuC,QAAQC,IAAR,MATa,yDAAH,sDAgBlB,OAHAD,QAAQC,IAAI1C,GACZyC,QAAQC,IAAIrE,GACZoE,QAAQC,IAAIpE,GAER,mCACA,sBAAMqE,UAAU,cAAhB,UACI,8BACI,4DAEJ,sBAAKA,UAAU,uBAAf,UACI,eAACC,EAAA,EAAD,CAAMD,UAAU,aAAhB,UACA,eAACC,EAAA,EAAKC,MAAN,CAAYF,UAAU,aAAaG,UAAU,WAA7C,UACI,cAACF,EAAA,EAAKG,MAAN,yBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,MAAOlD,EAAWmD,SAAU,SAACb,GAAD,OAAOd,EAAac,EAAEc,OAAOF,aAGvF,eAACN,EAAA,EAAKC,MAAN,CAAYF,UAAU,aAAaG,UAAU,kBAA7C,UACI,cAACF,EAAA,EAAKG,MAAN,2BACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,SAASC,MAAO7E,EAAY8E,SAAU,SAACb,GAAD,OAAOb,EAAca,EAAEc,OAAOF,aAG3F,eAACN,EAAA,EAAKC,MAAN,CAAYF,UAAU,aAAaG,UAAU,kBAA7C,UACA,cAACF,EAAA,EAAKG,MAAN,0BACA,eAACH,EAAA,EAAKS,OAAN,CAAa,aAAW,yBAAyBF,SAAU,SAACb,GAAD,OAAOZ,EAAcY,EAAEc,OAAOF,QAAzF,UACI,wDACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,cAAd,yBACA,wBAAQA,MAAM,cAAd,+BAGJ,uBACA,qBAAKP,UAAU,0BAAf,SACI,cAACW,EAAA,EAAD,CAAQC,QAAQ,UAAUN,KAAK,SAASO,QAAS,SAAClB,GAAOD,EAAaC,IAAtE,gCAKJ,uBACA,uBACA,8BACI,mBAAGmB,KAAK,6CAAR,4C,MC3DLC,MARf,WACE,OACE,qBAAKf,UAAU,MAAf,SACE,cAAC,EAAD,OCISgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrC,SAASsC,eAAe,SAM1BZ,M","file":"static/js/main.adf9eeb7.chunk.js","sourcesContent":["import { DateTime } from 'luxon';\nimport holidayData from './data/2021-sg-stat-holidays.json';\nimport basicsData from './data/basics-course-days.json';\nimport bootcampData from './data/bootcamp-course-days.json';\n\nconst publicHolidays = holidayData.PH;\nconst publicHolidayArray = [];\n// get array of all public holiday dates\nObject.keys(publicHolidays).map((key, index) => {\n    publicHolidayArray.push(key);\n});\n\nconst companyHolidays = holidayData.company;\nconst companyHolidayArray = [];\nconst winterBreak = [];\n// get array of all company holiday dates\nObject.keys(companyHolidays).map((key, index) => {\n    companyHolidayArray.push(key);\n    // get array of winter break dates\n    if(companyHolidays[key].name === 'winter break') {\n        winterBreak.push(companyHolidays[key].date);\n    }\n});\n\nconst phWithoutCh = [];\n// get array of public holidays not including those included in winter break\npublicHolidayArray.forEach((holiday) => {\n    if(!companyHolidayArray.includes(holiday)) {\n        phWithoutCh.push(holiday);\n    }\n});\n\n// helper function for getting utc date/time\nconst getLocalDateTime = (utc, timeString, courseName, courseType, date) => {\n    const changedFormat = date.toFormat(\"yyyy-MM-dd\");\n    if (courseType === 'Basics') {\n        utc = DateTime.fromISO(changedFormat + timeString, {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp FT' && Number(courseName) % 2 === 0) {\n        utc = DateTime.fromISO(changedFormat + 'T13:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if ((courseType === 'Bootcamp FT' && Number(courseName) % 2 !== 0) || (courseType === 'Bootcamp PT' && (date.weekday === 6))) {\n        utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp PT' && (date.weekday === 1 || date.weekday === 3)) {\n        utc = DateTime.fromISO(changedFormat + 'T19:30', {zone: 'Singapore'}).toUTC().toISO();\n    }\n    return utc;\n}\n\n// helper function for deciding what goes in topLevelObject based on course type\nconst generateTopLevelObject = (courseType, topLevelObject) => {\n        if (courseType === 'Basics') {\n            topLevelObject = {\n                daysOfWeek: basicsData.daysOfWeek,\n                courseStartIndex: basicsData.courseStartIndex,\n                totalCourseDays: basicsData.totalCourseDays,\n                ...topLevelObject\n            };\n        } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            let bootcampDays;\n            if (courseType === 'Bootcamp FT') {\n                bootcampDays = bootcampData.daysOfWeek.fullTime;\n            } else {\n                bootcampDays = bootcampData.daysOfWeek.partTime;\n            }\n            topLevelObject = {\n                daysOfWeek: bootcampDays,\n                courseStartIndex: bootcampData.courseStartIndex,\n                totalCourseDays: bootcampData.totalCourseDays,\n                ...topLevelObject\n            }\n        }\n\n        return topLevelObject;\n    }\n\n// helper function that generates dateObj if the course date falls on a public holiday\nconst generateHolidayObject = (dateString, week, date, dateObj) => {\n    dateObj = {\n        courseDay: null,\n        courseDate: dateString,\n        courseWeek: week,\n        dayNumber: date.weekday,\n        dateTypes: {}\n    }\n\n    if (phWithoutCh.includes(dateString)) {\n        dateObj.dateTypes = publicHolidays[dateString];\n    } else {\n        dateObj.dateTypes = companyHolidays[dateString];\n    }\n\n    return dateObj;\n}\n\n// helper function that generates dateObj for a normal courseday\nconst generateCourseDayObject = (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay) => {\n    // get whatever index of basicsData that is specified by courseDayCount\n    dateObj = {\n        courseDate: dateString,\n        courseWeek: week,\n        weekDay: weekDay,\n        dayNumber: date.weekday,\n        meetingDateTimeUTC: utc,\n        };\n\n    // data is different for basics and bootcamp\n    if (courseType === 'Basics') {\n        dateObj = {\n            ...dateObj, ...basicsData.days[courseDay]\n        }\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            dateObj = {\n            ...dateObj, ...bootcampData.days[courseDay]\n        }\n    }\n    return dateObj;\n}\n\n// ##################################################################\n// ##################################################################\n\nconst generateDataObject = (startDate, courseName, courseType) => {\n    let date = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let utc;\n    utc = getLocalDateTime(utc, 'T16:00', courseName, courseType, date);\n    let dateWeek = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let classDatesCount = 1;\n    let week = 1;\n    let weekDay = 1;\n    let data;\n    let courseDayCount;\n    // starts from 0 because it's tracking the index of the json data file\n    let courseDay = 0;\n\n    let topLevelObject = {\n            courseType: courseType,\n            days: {}\n        };\n\n    data = generateTopLevelObject(courseType, topLevelObject);\n\n    // set the number of course days based on course type\n    if (courseType === 'Basics') {\n        courseDayCount = 13;\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n        courseDayCount = 115;\n    }\n\n    const dayArray = data.daysOfWeek;\n    let dayIndex = data.courseStartIndex;\n\n    while (courseDayCount > 0) {\n        const dateString = date.toFormat('dd-MM-yyyy');\n\n        // setting filename from start date, end date, courseName of course \n        // if this consition is met, dateString will be the end date of course\n        if (courseDay + 1 === data.totalCourseDays) {\n            // start date\n            const displayDate = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n            const displayName = `${displayDate.toFormat('dd-MM-yyyy')}_${dateString}_BATCH${courseName}`;\n            data.courseName = displayName;\n        }\n\n        let dateObj;\n        // if date is a public holiday\n        if (phWithoutCh.includes(dateString) || winterBreak.includes(dateString)) {\n            dateObj = generateHolidayObject (dateString, week, date, dateObj);\n\n        // if date is not a holiday\n        } else {\n            dateObj = generateCourseDayObject (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay);\n\n            // increase course days on days that classes are held,\n            // DO NOT increase course days on holidays\n            courseDayCount -= 1;\n            courseDay += 1;\n        }\n        data.days[dateString] = dateObj;\n\n        \n        if (classDatesCount === data.totalCourseDays && courseType === 'Basics') {\n            date = date.plus({ days: 2 }); \n            utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n            weekDay += 1;\n            week += 1;\n\n        } else {\n            // this is the end of the dayArray (last day of the week)\n            if ( dayIndex === dayArray.length -1) {\n                weekDay = 1;\n                week += 1;\n                dateWeek = dateWeek.plus({ weeks: 1 });\n                // return to beginning of array (return to beginning of week)\n                dayIndex = 0;\n                date = date.plus({ weeks: 1 }).set({ weekday: dayArray[dayIndex] })\n                utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n\n            } else {\n                // day with the week\n                dayIndex += 1;\n                date = date.set({ weekday: dayArray[dayIndex] })\n                utc = getLocalDateTime (utc, 'T13:00', courseName, courseType, date);\n\n                if (!phWithoutCh.includes(dateString)) {\n                    weekDay += 1;\n                }\n            }\n        }\n        // increase classDatesCount regardless of whether it is a public holiday\n        classDatesCount += 1;\n    }\n\n    return data;\n}\n\nexport default generateDataObject;","import React , { useState } from 'react';\nimport generateDataObject from '../generateCourseDates.js';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nconst DatePicker = () => {\n    const [startDate, setStartDate] = useState('');\n    const [courseName, setCourseName] = useState('');\n    const [courseType, setCourseType] = useState('');\n    \n    const download = (data) => {\n        // from: https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\n        var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data));\n        var dlAnchorElem = document.createElement('a');\n        dlAnchorElem.setAttribute(\"href\",     dataStr     );\n        dlAnchorElem.setAttribute(\"download\", `${data.courseName}.json`);\n        dlAnchorElem.click();\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n        const data = await generateDataObject(startDate, courseName, courseType);\n        console.log('data', data);\n            \n        download(data);\n        }\n        catch (error) {\n            console.log(error)\n        }\n    }\n\n    console.log(startDate);\n    console.log(courseName);\n    console.log(courseType);\n    return (\n        <>\n        <div  className=\"date-picker\">\n            <div>\n                <h2>Course Schedule Markdown</h2>\n            </div>\n            <div className=\"input-form-container\">\n                <Form className=\"input-form\">\n                <Form.Group className=\"mb-3 input\" controlId=\"formDate\">\n                    <Form.Label>Start Date</Form.Label>\n                    <Form.Control type=\"date\" value={startDate} onChange={(e) => setStartDate(e.target.value)}/>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                    <Form.Label>Batch Number</Form.Label>\n                    <Form.Control type=\"number\" value={courseName} onChange={(e) => setCourseName(e.target.value)}/>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                <Form.Label>Course Type</Form.Label>\n                <Form.Select aria-label=\"Default select example\" onChange={(e) => setCourseType(e.target.value)}>\n                    <option>Select course type</option>\n                    <option value=\"Basics\">Basics</option>\n                    <option value=\"Bootcamp FT\">Bootcamp FT</option>\n                    <option value=\"Bootcamp PT\">Bootcamp PT</option>\n                </Form.Select>\n                </Form.Group>\n                <br></br>\n                <div className=\"submit-button-container\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={(e) => {handleSubmit(e)}}>\n                        Download File\n                    </Button>\n                </div>\n                </Form>\n                <br></br>\n                <br></br>\n                <div>\n                    <a href=\"https://github.com/rocketacademy/scheduler\">link to GitHub repo</a>\n                </div>\n            </div>\n        </div>\n        </>\n    )\n}\n\nexport default DatePicker;\n","import React from 'react';\nimport './App.css';\nimport DatePicker from './components/DatePicker.jsx';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DatePicker />      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}