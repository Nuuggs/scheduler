{"version":3,"sources":["components/admin/main-accordion/AddItemModal.jsx","components/admin/main-accordion/inner-accordion/ShiftItemModal.jsx","components/admin/main-accordion/inner-accordion/ClassItem.jsx","components/admin/main-accordion/inner-accordion/SectionClass.jsx","components/admin/main-accordion/inner-accordion/Section.jsx","components/admin/main-accordion/MainAccordion.jsx","download.js","components/admin/GenerateDataShiftContent.jsx","components/admin/data-shift/ActiveCourses.jsx","generateCourseDates.js","components/schedules/GenerateCourseDayHeader.jsx","components/admin/data-shift/DatePicker.jsx","components/admin/data-shift/DataShift.jsx","components/admin/Tabs.jsx","assets/4-MILK.png","components/schedules/DisplaySection.jsx","components/schedules/GenerateNotifications.jsx","generateSectionArray.js","components/schedules/GenerateDatetypeSections.jsx","components/schedules/GenerateCourseDayContent.jsx","components/schedules/schedule-table/TableSectionContent.jsx","components/schedules/schedule-table/TableClass.jsx","components/schedules/schedule-table/TableProjects.jsx","components/schedules/schedule-table/ScheduleTable.jsx","generateTableData.js","components/schedules/schedule-table/ContentTable.jsx","components/schedules/current-day/CurrentDaySection.jsx","components/schedules/ScheduleContent.jsx","components/schedules/sidebar/ModuleSection.jsx","components/schedules/sidebar/Modules.jsx","components/schedules/sidebar/CourseWeeks.jsx","components/schedules/sidebar/SideBar.jsx","components/schedules/BatchSchedule.jsx","components/schedules/ScheduleContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddItemModal","show","onHide","bootcampdata","coursedate","setDaysInBatchFile","setDaysInMainFile","useState","title","setTitle","url","setUrl","section","setSection","sectionClass","setSectionClass","Modal","size","centered","Header","closeButton","Title","id","Body","Form","Group","className","controlId","Label","Control","type","placeholder","value","onChange","e","target","Select","Button","variant","onClick","preventDefault","newItem","name","dateTypes","items","push","constructor","Array","handleAddItem","Footer","ShiftItemModal","shiftitem","sectiontype","setbootcampdata","classtype","classindex","selectedDate","setSelectedDate","dates","map","date","courseDay","selectedItem","splice","length","targetDay","handleSubmitDate","shiftOneDay","direction","bootcampData","dayIndex","sectionType","classType","classIndex","bootcampDataArray","console","log","Object","keys","courseDate","ClassItem","setBootcampData","item","modalShow","setModalShow","shiftItem","setShiftItem","handleShift","datesArray","includes","addDates","indexOf","addIndex","SectionClass","day","sectionclass","sectionIndex","handleClassShift","sectionArray","i","selectedSection","startDay","forEach","element","index","shiftSection","Section","classExists","preClass","inClass","postClass","projectDue","projectStart","cpDue","Accordion","Item","eventKey","filter","MainAccordion","setShowInputModal","setCourseDate","accordionKey","handleCloseAll","setAccordionKey","module","handlePlusClick","courseWeek","download","data","filename","dataStr","encodeURIComponent","JSON","stringify","dlAnchorElem","document","createElement","setAttribute","click","GenerateDataShiftContent","mainFile","batchFile","showInputModal","handleDownloadMainClick","a","handleEditInGithub","gitbookUrl","selBox","style","position","left","top","opacity","undefined","body","appendChild","focus","select","execCommand","removeChild","repoUrls","edit","courseName","window","open","ActiveCourses","batchArray","setBatchFile","Nav","batch","Link","parse","content","days","handleSelectClick","publicHolidays","holidayData","PH","publicHolidayArray","key","companyHolidays","company","companyHolidayArray","winterBreak","phWithoutCh","holiday","localDate","formattedDate","meetingTime","timeZone","timeOffset","getLocalDateTime","utc","timeString","courseType","changedFormat","toFormat","DateTime","fromISO","zone","toUTC","toISO","Number","weekday","generateHolidayObject","dateString","week","dateObj","dayNumber","generateCourseDayObject","weekDay","meetingDateTimeUTC","basicsData","generateDataObject","startDate","fromFormat","courseDayCount","dateWeek","classDatesCount","dayArray","topLevelObject","daysOfWeek","courseStartIndex","totalCourseDays","bootcampDays","fullTime","partTime","generateTopLevelObject","displayDate","displayName","plus","weeks","set","DatePicker","setStartDate","setCourseName","setCourseType","handleDownload","handleRender","addToGitbook","href","DataShift","TabsContainer","setKey","batchDays","setBatchDays","mainDataFile","setMainFile","mainDays","setMainDays","class","Tabs","activeKey","onSelect","k","Tab","NormalCourseDay","todaySectionHeader","timeZoneSet","HolidayCourseDay","holidayType","location","GenerateCourseDayHeader","coursetype","DisplaySection","heading","GenerateNotifications","status","projectdue","cpdue","projectstart","generateSectionArray","datetype","classTypeSection","x","GenerateDatetypeSections","GenerateCourseDayContent","projects","cp","TableSectionContent","TableClass","classArray","TableProjects","ScheduleTable","weekNumbers","tableData","today","now","num","Table","bordered","hover","scroller","scrollTo","smooth","offset","duration","generateTableData","scheduleData","setWeekNumbers","setTableData","firstDay","moveDate","lastDay","firstDayMonth","lastDayMonth","moveDateMonth","startOf","endOf","weekDatesArray","monthDatesArray","currentWeekData","currentMonthData","ContentTable","useEffect","findPreviousDay","dayBefore","findNextDay","firstDayOfCourse","nextDay","CurrentDaySection","previousDayId","previousDay","currentDayId","ScheduleContent","nextToday","months","defaultActiveKey","ModuleSection","sectionNames","info","Modules","moduleNameArray","scheduleUrls","scheduleObjs","itemUrlArray","split","generatingDataArrays","accessingRequiredItems","sort","moduleName","general","poce","ice","urlObj","splitName","dataObj","sortScheduleObjs","CourseWeeks","currentWeekRef","current","scrollIntoView","block","CurrentWeekDiv","ref","firstDayOfWeek","lastDayOfWeek","weeksDates","weekNumber","useRef","navbarScroll","navId","sidebarId","SideBar","BatchSchedule","courseDatesArray","b","ScheduleContainer","useRouteMatch","path","Navbar","bg","Brand","src","logo","alt","as","to","toUpperCase","exact","App","ptbc1","ptbc2","ftbc3","ftbc4","ftbc5","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7969faa1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nfunction AddItemModal({\n  show,\n  onHide,\n  bootcampdata,\n  coursedate,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  // input fields for a entry of a new item into the main data file\n  const [title, setTitle] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [section, setSection] = useState(\"\");\n  const [sectionClass, setSectionClass] = useState(\"\");\n\n  // function that adds new item to main data file\n  const handleAddItem = (e) => {\n    e.preventDefault();\n\n    // new item that will be added to main data file\n    const newItem = {\n      name: title,\n      url: url,\n    };\n\n    // if the section that the new item is to be added to is empty, an empty array called items is added to it\n    if (!bootcampdata[coursedate].dateTypes[section][sectionClass].items) {\n      bootcampdata[coursedate].dateTypes[section][sectionClass].items = [];\n    }\n\n    // the new item is then pushed into items array\n    bootcampdata[coursedate].dateTypes[section][sectionClass].items.push(\n      newItem\n    );\n\n    // the new content is saved in state\n     bootcampdata.constructor === Array\n      ? setDaysInMainFile([...bootcampdata])\n      : setDaysInBatchFile({ ...bootcampdata });\n  };\n\n  return (\n    // modal that takes in user input for the creation of a new item\n    <Modal\n      show={show}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"add-input-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"add-input-modal\">Add an item</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Group className=\"mb-3\" controlId=\"title\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\" controlId=\"url\">\n            <Form.Label>URL</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter URL\"\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Label>Section</Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSection(e.target.value)}\n          >\n            <option>choose section</option>\n            <option value=\"general\">general</option>\n            <option value=\"css\">css</option>\n            <option value=\"ux\">ux</option>\n            <option value=\"projects\">projects</option>\n            <option value=\"cp\">cp</option>\n            <option value=\"dsa\">dsa</option>\n          </Form.Select>\n\n          <Form.Label>Class </Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSectionClass(e.target.value)}\n          >\n            <option>choose class type</option>\n            <option value=\"preClass\">preClass</option>\n            <option value=\"postClass\">postClass</option>\n            <option value=\"inClass\">inClass</option>\n            {section === \"projects\" && (\n              <>\n                <option value=\"projectDue\">projectDue</option>\n                <option value=\"projectStart\">projectStart</option>\n              </>\n            )}\n            {section === \"cp\" && <option value=\"cpDue\">cpDue</option>}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleAddItem(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default AddItemModal;\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\n// moves items to a specific date in the schedule\nfunction ShiftItemModal({\n  show,\n  onHide,\n  shiftitem,\n  bootcampdata,\n  setbootcampdata,\n  sectiontype,\n  classtype,\n  classindex,\n  section,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  const [selectedDate, setSelectedDate] = useState(\"\");\n\n  const handleSubmitDate = (e) => {\n    e.preventDefault();\n    // finding the selected item in the data file\n    let selectedItem = sectiontype[classtype].items[classindex];\n    // removing it from it's original position\n    sectiontype[classtype].items.splice(classindex, 1);\n\n    // if items array is empty after removing selected item, remove empty items array\n    if (sectiontype[classtype].items.length === 0) {\n      delete sectiontype[classtype].items;\n    }\n    // this is where we want to move the item to\n    const targetDay = bootcampdata[selectedDate].dateTypes[section];\n\n    // checking to see if items array exists at destination, if not, an empty array called items is added\n    if (!targetDay[classtype].items) {\n      targetDay[classtype].items = [];\n    }\n\n    // selected item is push into items array at destination\n    targetDay[classtype].items.push(selectedItem);\n\n    // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n    bootcampdata.constructor === Array\n      ? setDaysInMainFile([...bootcampdata])\n      : setDaysInBatchFile({...bootcampdata})\n  };\n\n  return (\n    <Modal\n      show={show}\n      shiftitem={shiftitem}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"item-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"item-modal\">Moving item ...</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"days\"\n            onChange={(e) => setSelectedDate(e.target.value)}\n          >\n            <option>--</option>\n            {shiftitem.dates.map((date) => {\n              if (typeof date === \"number\") {\n                return (\n                  <>\n                    <option value={date}>\n                      Day {bootcampdata[date].courseDay}\n                    </option>\n                    ;\n                  </>\n                );\n              } else {\n                return (\n                  <>\n                    <option value={date}>{date}</option>;\n                  </>\n                );\n              }\n            })}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleSubmitDate(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default ShiftItemModal;\n","import React, { useState } from \"react\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport ShiftItemModal from \"./ShiftItemModal\";\nimport DragIndicatorIcon from '@material-ui/icons/DragIndicator';\n\n// helper functions that populates dateArray\n// ##########################################################\nconst addDates = (datesArray, date) => {\n  if (!datesArray.includes(date)) {\n    datesArray.push(date);\n  }\n  return datesArray;\n};\n\nconst addIndex = (bootcampData, datesArray, date) => {\n  if (!datesArray.includes(bootcampData.indexOf(date))) {\n    datesArray.push(bootcampData.indexOf(date));\n  }\n  return datesArray;\n};\n\n// helper function that shifts items 1 day\nconst shiftOneDay = (\n  direction, \n  bootcampData, \n  dayIndex, \n  sectionType, \n  classType, \n  classIndex, \n  section,\n  setDaysInMainFile,\n  setDaysInBatchFile\n  ) => {\n    console.log('inside shift function');\n      let bootcampDataArray;\n      let target; \n       if(bootcampData.constructor === Object) {\n         bootcampDataArray = Object.keys(bootcampData);\n         console.log('bootcamp data array', bootcampDataArray);\n         if(direction === 'up') {\n           target = bootcampData[bootcampDataArray[dayIndex - 1]].courseDate;\n         } else {\n           target = bootcampData[bootcampDataArray[dayIndex + 1]].courseDate;\n           console.log('target', target);\n           \n         }\n      } else {\n        if (direction === 'up') {\n          target = dayIndex - 1\n        } else {\n          target = dayIndex + 1\n        }\n      }\n      // finding the selected item in the data file\n      let selectedItem = sectionType[classType].items[classIndex];\n      // removing it from it's original position\n      sectionType[classType].items.splice(classIndex, 1);\n\n      // if items array is empty after removing selected item, remove empty items array\n      if (sectionType[classType].items.length === 0) {\n        delete sectionType[classType].items;\n      }\n      // this is where we want to move the item to\n      const targetDay = bootcampData[target].dateTypes[section];\n\n      // checking to see if items array exists at destination, if not, an empty array called items is added\n      if (!targetDay[classType].items) {\n        targetDay[classType].items = [];\n      }\n\n      // selected item is push into items array at destination\n      targetDay[classType].items.push(selectedItem);\n\n      // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n      bootcampData.constructor === Array\n        ? setDaysInMainFile([...bootcampData])\n        : setDaysInBatchFile({...bootcampData})\n\n    }\n// ############################################################\n\nfunction ClassItem({\n  setBootcampData,\n  section,\n  bootcampData,\n  classType,\n  sectionType,\n  item,\n  dayIndex,\n  classIndex,\n  setDaysInMainFile,\n  setDaysInBatchFile\n}) {\n  // toggle visibility of buttons\n  const [modalShow, setModalShow] = useState(false);\n  // object shift item is initialised with keys direction and dates to store data that will be passed into the nect component\n  const [shiftItem, setShiftItem] = useState({\n    direction: null,\n    dates: [],\n  });\n\n  // function that handles moving data from one day to another\n  const handleShift = (direction, dayIndex, classIndex) => {\n    // array that contains all the dates either before or after a selected date depending on direction chosen by user\n    let datesArray = [];\n\n    \n\n    // item is being moved backwards in the schedule\n    if (direction === \"any\") {\n      // if bootcampData either an object or an array depending on wether the user is editing the main or individual schedule files, and needs to be processed accordingly\n      bootcampData.constructor === Object\n        ? Object.keys(bootcampData)\n            .map((date) => {\n              datesArray = addDates(datesArray, date);\n            })\n        : bootcampData\n            .map((date) => {\n              datesArray = addIndex(bootcampData, datesArray, date);\n            });\n\n      // data is put into object shift item\n      setShiftItem({\n        ...shiftItem,\n        dates: datesArray,\n      });\n      // modal that takes user input to move item is shown\n      setModalShow(true);\n      // item is being moved forward in the schedule\n    } else if (direction === \"down\") {\n     shiftOneDay(\n        'down', \n        bootcampData, \n        dayIndex, \n        sectionType, \n        classType, \n        classIndex, \n        section,\n        setDaysInMainFile,\n        setDaysInBatchFile\n     )\n\n    } else if (direction === \"up\") {\n      shiftOneDay(\n        'up', \n        bootcampData, \n        dayIndex, \n        sectionType, \n        classType, \n        classIndex, \n        section,\n        setDaysInMainFile,\n        setDaysInBatchFile\n     )\n    } else {\n      // here the item is being deleted from the schedule\n      sectionType[classType].items.splice(classIndex, 1);\n      if (sectionType[classType].items.length === 0) {\n        delete sectionType[classType].items;\n      }\n      setBootcampData([...bootcampData]);\n    }\n  };\n\n  return (\n    <div>\n      <div\n        className=\"class-item\"\n      >\n        {item.name}\n        \n          <div>\n            {/* remove item  */}\n            <button className=\"trash-can\" onClick={() => handleShift(\"delete\", dayIndex, classIndex)}>\n              <DeleteOutlinedIcon />\n            </button>\n            {/* move item backwards in the schedule  */}\n            <button onClick={() => handleShift(\"up\", dayIndex, classIndex)}>\n              <ExpandLessIcon />\n            </button>\n            {/* move item forward in the schedule  */}\n            <button onClick={() => handleShift(\"down\", dayIndex, classIndex)}>\n              <ExpandMoreIcon />\n            </button>\n            <button className=\"select\" onClick={() => handleShift('any', dayIndex, classIndex)}>\n              <DragIndicatorIcon />\n            </button>\n          </div>\n        \n        {modalShow && (\n          // modal that is shown when the user clicks either of the above buttons\n          <ShiftItemModal\n            show={modalShow}\n            onHide={() => setModalShow(false)}\n            shiftitem={shiftItem}\n            bootcampdata={bootcampData}\n            setbootcampdata={setBootcampData}\n            sectiontype={sectionType}\n            classtype={classType}\n            classindex={classIndex}\n            section={section}\n            setDaysInMainFile={setDaysInMainFile}\n            setDaysInBatchFile={setDaysInBatchFile}\n            />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ClassItem;\n","import React from \"react\";\nimport ClassItem from \"./ClassItem\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nfunction SectionClass({\n  day,\n  sectionIndex,\n  sectionclass,\n  sectionType,\n  bootcampData,\n  setBootcampData,\n  section,\n  dayIndex,\n  setDaysInBatchFile,\n  setDaysInMainFile,\n}) {\n\n  // helper function that maps each element in section array to a new course day\n  const shiftSection = (sectionArray, startDay, bootcampData) => {\n    sectionArray.forEach((element, index) => {\n      if (element !== null && bootcampData.constructor === Object) {\n        if (bootcampData[bootcampDataArray[startDay + index]].dateTypes[section] &&\n          bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][sectionclass]) {\n          if (bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][sectionclass]\n              .items) {\n            sectionArray[index].forEach((item) => {\n              console.log.log('item', item);\n              bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][\n                sectionclass\n              ].items.push(item);\n            });\n          } else {\n            bootcampData[bootcampDataArray[startDay + index]].dateTypes[section][\n              sectionclass\n            ].items = sectionArray[index];\n          }\n        }\n      } else if (element !== null && bootcampData.constructor === Array) {\n          if (bootcampData[startDay + index].dateTypes[section][sectionclass]\n            .items) {\n          sectionArray[index].forEach((item) => {\n            bootcampData[startDay + index].dateTypes[section][\n              sectionclass\n            ].items.push(item);\n          });\n          } else {\n            bootcampData[startDay + index].dateTypes[section][\n              sectionclass\n            ].items = sectionArray[index];\n          }\n        }\n      });\n    return bootcampData;\n  };\n\n  let bootcampDataArray;\n  const handleClassShift = (direction, dayIndex) => {\n    // puts all the items in selected class in an array and deletes them from their original position\n    const sectionArray = [];\n    \n    if (bootcampData.constructor === Object) {\n      bootcampDataArray = Object.keys(bootcampData);\n\n        for (let i = dayIndex; i < bootcampDataArray.length - 1; i += 1) {\n          if(bootcampData[bootcampDataArray[i]].dateTypes[section] && bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass]) {\n            if (bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items) {\n            const selectedSection =\n              bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items;\n              sectionArray.push(selectedSection);\n              delete bootcampData[bootcampDataArray[i]].dateTypes[section][sectionclass].items;\n            } else {\n              sectionArray.push(null);\n            }\n          }\n          \n        }\n      \n    } else {\n      for (let i = dayIndex; i < bootcampData.length - 1; i += 1) {\n        if (bootcampData[i].dateTypes[section][sectionclass].items) {\n          const selectedSection =\n            bootcampData[i].dateTypes[section][sectionclass].items;\n          sectionArray.push(selectedSection);\n          delete bootcampData[i].dateTypes[section][sectionclass].items;\n        } else {\n          sectionArray.push(null);\n        }\n      }\n    }\n    \n\n    let startDay;\n    // when user clicks the down button, items are put into section/class of the next day\n    if (direction === \"down\") {\n      startDay = dayIndex + 1;\n    } else {\n      // when user clicks the up button, items are put into section/class of the previous day\n      startDay = dayIndex - 1;\n    }\n\n    bootcampData = shiftSection(sectionArray, startDay, bootcampData);\n    \n     // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n    bootcampData.constructor === Array\n      ? setDaysInMainFile([...bootcampData])\n      : setDaysInBatchFile({...bootcampData})\n  };\n\n  return (\n    <div>\n      {sectionType[sectionclass].items && (\n        <div className=\"section-class\">\n          <div className=\"class-title\">{sectionclass}</div>\n          <div className=\"class-items\">\n            {sectionType[sectionclass].items.map((item, classIndex) => {\n              return (\n                <ClassItem\n                  day={day}\n                  sectionclass={sectionclass}\n                  bootcampData={bootcampData}\n                  setBootcampData={setBootcampData}\n                  section={section}\n                  classType={sectionclass}\n                  sectionType={sectionType}\n                  item={item}\n                  dayIndex={dayIndex}\n                  classIndex={classIndex}\n                  setDaysInBatchFile={setDaysInBatchFile}\n                  setDaysInMainFile={setDaysInMainFile}\n                />\n              );\n            })}\n          </div>\n          <div\n            className=\"section-class-header\"\n  \n          >\n              <div>\n                <button\n                  onClick={() => handleClassShift(\"up\", dayIndex, sectionIndex)}\n                >\n                  <ExpandLessIcon />\n                </button>\n                <button\n                  onClick={() =>\n                    handleClassShift(\"down\", dayIndex, sectionIndex)\n                  }\n                >\n                  <ExpandMoreIcon />\n                </button>\n              </div>\n          \n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SectionClass;\n","import React from \"react\";\nimport SectionClass from \"./SectionClass\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction Section({\n  day,\n  setBootcampData,\n  section,\n  sectionType,\n  dayIndex,\n  bootcampData,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  // variable classExists is created to track if any class of a section exists (it is initially set to false)\n  // if any class of a section exists, classExists is set to true\n  // if classExists is true, a header for this section will be created\n  let classExists = false;\n  if (sectionType.constructor === Object) {\n    if (\n      sectionType.preClass.items ||\n      sectionType.inClass.items ||\n      sectionType.postClass.items ||\n      (sectionType === \"projects\" &&\n        (sectionType.projectDue.items || sectionType.projectStart.items)) ||\n      (sectionType === \"cp\" && sectionType.cpDue.items)\n    ) {\n      classExists = true;\n    }\n  }\n\n  return (\n    <div>\n      {sectionType.constructor === Object && (\n        <>\n          <Accordion>\n            {classExists && (\n              <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>{sectionType.type}</Accordion.Header>\n                <Accordion.Body>\n                  {Object.keys(sectionType)\n                    .filter((sectionClass) => sectionType[sectionClass].items)\n                    .map((sectionclass, sectionIndex) => {\n                      return (\n                        <div className=\"all-classes\">\n                          <SectionClass\n                            day={day}\n                            sectionIndex={sectionIndex}\n                            sectionclass={sectionclass}\n                            sectionType={sectionType}\n                            bootcampData={bootcampData}\n                            setBootcampData={setBootcampData}\n                            section={section}\n                            dayIndex={dayIndex}\n                            setDaysInBatchFile={setDaysInBatchFile}\n                            setDaysInMainFile={setDaysInMainFile}\n                          />\n                        </div>\n                      );\n                    })}\n                </Accordion.Body>\n              </Accordion.Item>\n            )}\n          </Accordion>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Section;\n","import React from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Section from \"./inner-accordion/Section\";\n\nfunction MainAccordion({\n  dayIndex,\n  bootcampData,\n  setBootcampData,\n  day,\n  setShowInputModal,\n  setCourseDate,\n  handleCloseAll,\n  setAccordionKey,\n  accordionKey,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) {\n  \n\n  const handlePlusClick = (day) => {\n    console.log(day);\n    setCourseDate(day);\n    setShowInputModal(true);\n  };\n\n  return (\n    <div>\n      {bootcampData[day].dateTypes.module && (\n        <Accordion key={accordionKey}>\n          <Accordion.Item eventKey={dayIndex}>\n            <div\n                className=\"course-day-symbol\"\n                onClick={() => handlePlusClick(day)}\n              >\n                {\" \"}\n                <AddIcon />\n            </div>\n            <Accordion.Header>\n              <div className=\"course-day-header\">\n                {bootcampData.constructor === Object ? (\n                  <>\n                    {day}, Week: {bootcampData[day].courseWeek}, Course Day:{\" \"}\n                    {bootcampData[day].courseDay},{\" \"}\n                    {bootcampData[day].dateTypes.module}{\" \"}\n                  </>\n                ) : (\n                  <>\n                    Course Day: {bootcampData[day].courseDay},{\" \"}\n                    {bootcampData[day].dateTypes.module}{\" \"}\n                  </>\n                )}\n              </div>\n            </Accordion.Header>\n            <Accordion.Body>\n              <div className=\"course-day\">\n                <div>\n                  {Object.keys(bootcampData[day].dateTypes).map(\n                    (section) => (\n                      <Section\n                        day={day}\n                        setBootcampData={setBootcampData}\n                        section={section}\n                        sectionType={bootcampData[day].dateTypes[section]}\n                        dayIndex={dayIndex}\n                        bootcampData={bootcampData}\n                        setDaysInBatchFile={setDaysInBatchFile}\n                        setDaysInMainFile={setDaysInMainFile}\n                      />\n                    )\n                  )}\n                </div>\n              </div>\n            </Accordion.Body>\n          </Accordion.Item>\n        </Accordion>\n      )}\n    </div>\n  );\n}\n\nexport default MainAccordion;\n","const download = (data, filename) => {\n        // from: https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\n        var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data));\n        var dlAnchorElem = document.createElement('a');\n        dlAnchorElem.setAttribute(\"href\",     dataStr     );\n        dlAnchorElem.setAttribute(\"download\", filename);\n        dlAnchorElem.click();\n    };\n\nexport default download;","import React, { useState } from \"react\";\nimport AddItemModal from \"./main-accordion/AddItemModal\";\nimport MainAccordion from \"./main-accordion/MainAccordion\";\nimport Button from \"react-bootstrap/Button\";\nimport download from \"../../download\";\n\nconst GenerateDataShiftContent = ({\n  bootcampData,\n  setBootcampData,\n  mainFile,\n  batchFile,\n  setDaysInBatchFile,\n  setDaysInMainFile\n}) => {\n  const [showInputModal, setShowInputModal] = useState(false);\n  const [courseDate, setCourseDate] = useState(\"\");\n  // used in the close all functionality\n  const [accordionKey, setAccordionKey] = useState(1234);\n\n  // function that handles download of main data file after edits\n  const handleDownloadMainClick = async () => {\n    download(mainFile, \"modified-main-data-file.json\");\n  };\n\n  // function that handles download of individual batch data file after edits\n  const handleBatchDownloadClick = () => {\n    download(\n      batchFile,\n      `modified-${batchFile.courseName}-file.json`\n    );\n  };\n\n  // state set so that rerender occurs\n  const handleCloseAll = () => {\n    const newAccordionKeyValue = accordionKey + 1;\n    setAccordionKey(newAccordionKeyValue);\n  }\n\n  // copys json data file to clipboard\n  const handleEditInGithub = (data) => {\n    // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n      let selBox = document.createElement('textarea');\n      selBox.style.position = 'fixed';\n      selBox.style.left = '0';\n      selBox.style.top = '0';\n      selBox.style.opacity = '0';\n      // this copies the JSON data to clipboard with original formatting\n      selBox.value = JSON.stringify(data, undefined, 2);\n      document.body.appendChild(selBox);\n      selBox.focus();\n      selBox.select();\n      document.execCommand('copy');\n      document.body.removeChild(selBox);\n\n      let gitbookUrl;\n      if (data.repoUrls) {\n        gitbookUrl = mainFile.repoUrls.edit;\n      } else {\n        gitbookUrl = `https://github.com/rocketacademy/scheduler/edit/main/src/data/${batchFile.courseName}.json`;\n      }\n      // opens a new window in the browser at specified address(gitbook edit page)\n      window.open(gitbookUrl, \"_blank\")\n  }\n\n  return (\n    <>\n      {/* renders batch schedule data file  */}\n      {bootcampData.constructor === Object &&\n        Object.keys(bootcampData).length > 0 && (\n          <div>\n            <div className=\"download-button-container\">\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={() => handleEditInGithub(batchFile)}\n              >\n                  Edit in Gitbook\n              </Button>\n              {\" \"}\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={handleBatchDownloadClick}\n              >\n                Download Modified Batch File\n              </Button>\n            </div>\n            <div className=\"close-all-container\">\n              <Button onClick={handleCloseAll}>close all</Button>\n            </div>\n            {Object.keys(bootcampData).map((day, dayIndex) => {\n              return (\n                <>\n                <div>\n                  <MainAccordion\n                    dayIndex={dayIndex}\n                    bootcampData={bootcampData}\n                    setBootcampData={setBootcampData}\n                    day={day}\n                    setShowInputModal={setShowInputModal}\n                    setCourseDate={setCourseDate}\n                    handleCloseAll={handleCloseAll}\n                    accordionKey={accordionKey}\n                    setAccordionKey={setAccordionKey}\n                    setDaysInBatchFile={setDaysInBatchFile}\n                    setDaysInMainFile={setDaysInMainFile}\n                  />\n                </div>\n                </>\n              );\n            })}\n            {/* modal that takes in user input to create a new item in the schedule  */}\n            {showInputModal && courseDate && (\n              <AddItemModal\n                show={showInputModal}\n                onHide={() => setShowInputModal(false)}\n                bootcampdata={bootcampData}\n                setbootcampdata={setBootcampData}\n                setShowInputModal={setShowInputModal}\n                coursedate={courseDate}\n                setDaysInBatchFile={setDaysInBatchFile}\n                setDaysInMainFile={setDaysInMainFile}\n              />\n            )}\n          </div>\n        )}\n      {/* displays main data file  */}\n      {bootcampData.constructor === Array && (\n        <div className=\"accordion-container\">\n          <div className=\"download-button-container\">\n            <Button\n              className=\"btn btn-primary\"\n              onClick={() => handleEditInGithub(mainFile)}\n            >\n            Edit in Gitbook\n            </Button>\n            <Button\n              className=\"btn btn-primary\"\n              onClick={handleDownloadMainClick}\n            >\n              download modified file\n            </Button>\n          </div>\n          <div className=\"close-all-container\">\n            <Button onClick={handleCloseAll}>Close All</Button>\n          </div>\n          {bootcampData.map((day, dayIndex) => {\n            return (\n              <MainAccordion\n                dayIndex={dayIndex}\n                bootcampData={bootcampData}\n                setBootcampData={setBootcampData}\n                day={dayIndex}\n                setShowInputModal={setShowInputModal}\n                setCourseDate={setCourseDate}\n                handleCloseAll={handleCloseAll}\n                accordionKey={accordionKey}\n                setAccordionKey={setAccordionKey}\n                setDaysInMainFile={setDaysInMainFile}\n                setDaysInBatchFile={setDaysInBatchFile}\n              />\n            );\n          })}\n          {showInputModal && (\n            <AddItemModal\n              show={showInputModal}\n              onHide={() => setShowInputModal(false)}\n              bootcampdata={bootcampData}\n              setbootcampdata={setBootcampData}\n              setShowInputModal={setShowInputModal}\n              coursedate={courseDate}\n              setDaysInMainFile={setDaysInMainFile}\n              setDaysInBatchFile={setDaysInBatchFile}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateDataShiftContent;\n\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\n\n// side navbar that displays links to all batch schedules in batchArray\nfunction ActiveCourses({ batchArray, setBootcampData, setBatchFile }) {\n  const handleSelectClick = (batch) => {\n     setBootcampData(\n      JSON.parse(JSON.stringify(batch.content.days))\n    )\n    setBatchFile(\n      JSON.parse(JSON.stringify(batch.content))\n    )\n  };\n\n  return (\n    <div>\n      <h4>Batches</h4>\n      <Nav variant=\"pills\" className=\"flex-column \">\n        {/* a link is rendered for each element in batchArray */}\n        {batchArray.map((batch, index) => {\n          return (\n            <Nav.Link\n              // when a link is clicked , the content of the selected batch file is rendered\n              onClick={() =>\n                handleSelectClick(batch)\n              }\n              eventKey={index}\n            >\n              {batch.name}\n            </Nav.Link>\n          );\n        })}\n      </Nav>\n    </div>\n  );\n}\n\nexport default ActiveCourses;\n","import { DateTime } from 'luxon';\nimport holidayData from './data/2021-sg-stat-holidays.json';\nimport basicsData from './data/basics-course-days.json';\nimport bootcampData from './data/bootcamp-course-days.json';\n\nconst publicHolidays = holidayData.PH;\nconst publicHolidayArray = [];\n// get array of all public holiday dates\nObject.keys(publicHolidays).map((key, index) => {\n    publicHolidayArray.push(key);\n});\n\nconst companyHolidays = holidayData.company;\nconst companyHolidayArray = [];\nconst winterBreak = [];\n// get array of all company holiday dates\nObject.keys(companyHolidays).map((key, index) => {\n    companyHolidayArray.push(key);\n    // get array of winter break dates\n    if(companyHolidays[key].name === 'winter break') {\n        winterBreak.push(companyHolidays[key].date);\n    }\n});\n\nconst phWithoutCh = [];\n// get array of public holidays not including those included in winter break\npublicHolidayArray.forEach((holiday) => {\n    if(!companyHolidayArray.includes(holiday)) {\n        phWithoutCh.push(holiday);\n    }\n});\n\n// helper function for getting utc date/time\nconst getLocalDateTime = (utc, timeString, courseName, courseType, date) => {\n    const changedFormat = date.toFormat(\"yyyy-MM-dd\");\n    if (courseType === 'Basics') {\n        utc = DateTime.fromISO(changedFormat + timeString, {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp FT' && Number(courseName) % 2 === 0) {\n        utc = DateTime.fromISO(changedFormat + 'T13:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if ((courseType === 'Bootcamp FT' && Number(courseName) % 2 !== 0) || (courseType === 'Bootcamp PT' && (date.weekday === 6))) {\n        utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp PT' && (date.weekday === 1)) {\n        utc = DateTime.fromISO(changedFormat + 'T19:30', {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp PT' && (date.weekday === 6)) {\n        utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n    }\n    return utc;\n}\n\n// helper function for deciding what goes in topLevelObject based on course type\nconst generateTopLevelObject = (courseType, topLevelObject) => {\n        if (courseType === 'Basics') {\n            topLevelObject = {\n                daysOfWeek: basicsData.daysOfWeek,\n                courseStartIndex: basicsData.courseStartIndex,\n                totalCourseDays: basicsData.totalCourseDays,\n                ...topLevelObject\n            };\n        } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            let bootcampDays;\n            if (courseType === 'Bootcamp FT') {\n                bootcampDays = bootcampData.daysOfWeek.fullTime;\n            } else {\n                bootcampDays = bootcampData.daysOfWeek.partTime;\n            }\n            topLevelObject = {\n                daysOfWeek: bootcampDays,\n                courseStartIndex: bootcampData.courseStartIndex,\n                totalCourseDays: bootcampData.totalCourseDays,\n                ...topLevelObject\n            }\n        }\n\n        return topLevelObject;\n    }\n\n// helper function that generates dateObj if the course date falls on a public holiday\nconst generateHolidayObject = (dateString, week, date, dateObj) => {\n    dateObj = {\n        courseDay: null,\n        courseDate: dateString,\n        courseWeek: week,\n        dayNumber: date.weekday,\n        dateTypes: {}\n    }\n\n    if (phWithoutCh.includes(dateString)) {\n        dateObj.dateTypes = publicHolidays[dateString];\n    } else {\n        dateObj.dateTypes = companyHolidays[dateString];\n    }\n\n    return dateObj;\n}\n\n// helper function that generates dateObj for a normal courseday\nconst generateCourseDayObject = (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay) => {\n    // get whatever index of basicsData that is specified by courseDayCount\n    dateObj = {\n        courseDate: dateString,\n        courseWeek: week,\n        weekDay: weekDay,\n        dayNumber: date.weekday,\n        meetingDateTimeUTC: utc,\n        };\n\n    // data is different for basics and bootcamp\n    if (courseType === 'Basics') {\n        dateObj = {\n            ...dateObj, ...basicsData.days[courseDay]\n        }\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            dateObj = {\n            ...dateObj, ...bootcampData.days[courseDay]\n        }\n    }\n    return dateObj;\n}\n\n// ##################################################################\n// ##################################################################\n\nconst generateDataObject = (startDate, courseName, courseType) => {\n    let date = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let utc;\n    utc = getLocalDateTime(utc, 'T16:00', courseName, courseType, date);\n    let dateWeek = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let classDatesCount = 1;\n    let week = 1;\n    let weekDay = 1;\n    let data;\n    let courseDayCount;\n    // starts from 0 because it's tracking the index of the json data file\n    let courseDay = 0;\n\n    let topLevelObject = {\n            courseType: courseType,\n            days: {}\n        };\n\n    data = generateTopLevelObject(courseType, topLevelObject);\n\n    // set the number of course days based on course type\n    if (courseType === 'Basics') {\n        courseDayCount = 13;\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n        courseDayCount = 116;\n    }\n\n    const dayArray = data.daysOfWeek;\n    let dayIndex = data.courseStartIndex;\n\n    while (courseDayCount > 0) {\n        const dateString = date.toFormat('dd-MM-yyyy');\n\n        // setting filename from start date, end date, courseName of course \n        // if this consition is met, dateString will be the end date of course\n        if (courseDay + 1 === data.totalCourseDays) {\n            // start date\n            const displayDate = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n            const displayName = `${displayDate.toFormat('dd-MM-yyyy')}_${dateString}_BATCH${courseName}`;\n            data.courseName = displayName;\n        }\n\n        let dateObj;\n        // if date is a public holiday\n        if (phWithoutCh.includes(dateString) || winterBreak.includes(dateString)) {\n            dateObj = generateHolidayObject (dateString, week, date, dateObj);\n\n        // if date is not a holiday\n        } else {\n            dateObj = generateCourseDayObject (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay);\n\n            // increase course days on days that classes are held,\n            // DO NOT increase course days on holidays\n            courseDayCount -= 1;\n            courseDay += 1;\n        }\n        data.days[dateString] = dateObj;\n\n        \n        if (classDatesCount === data.totalCourseDays && courseType === 'Basics') {\n            date = date.plus({ days: 2 }); \n            utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n            weekDay += 1;\n            week += 1;\n\n        } else {\n            // this is the end of the dayArray (last day of the week)\n            if ( dayIndex === dayArray.length -1) {\n                weekDay = 1;\n                week += 1;\n                dateWeek = dateWeek.plus({ weeks: 1 });\n                // return to beginning of array (return to beginning of week)\n                dayIndex = 0;\n                date = date.plus({ weeks: 1 }).set({ weekday: dayArray[dayIndex] })\n                utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n\n            } else {\n                // day with the week\n                dayIndex += 1;\n                date = date.set({ weekday: dayArray[dayIndex] })\n                utc = getLocalDateTime (utc, 'T13:00', courseName, courseType, date);\n\n                if (!phWithoutCh.includes(dateString)) {\n                    weekDay += 1;\n                }\n            }\n        }\n        // increase classDatesCount regardless of whether it is a public holiday\n        classDatesCount += 1;\n    }\n\n    return data;\n}\n\nexport default generateDataObject;","import React from \"react\";\nimport { DateTime } from \"luxon\";\n\n// helper function that generates course day header for a normal course day\nconst NormalCourseDay = ({ todaySectionHeader, day, timeZoneSet, id }) => {\n  localDate = DateTime.fromISO(day.meetingDateTimeUTC, { zone: timeZoneSet });\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  meetingTime = localDate.toFormat(\"t\");\n  timeOffset = localDate.toFormat(\"ZZZZ\");\n  timeZone = localDate.toFormat(\"z\");\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header-div\">\n          <div className=\"main-header\">\n            {!todaySectionHeader ? (\n              <h3 className=\"day-header\">\n                {formattedDate}, Week {day.courseWeek}, Course Day{\" \"}\n                {day.courseDay}\n              </h3>\n            ) : (\n              <h3 className=\"day-header\">{formattedDate}</h3>\n            )}\n          </div>\n          <p>\n            Meeting Time: {meetingTime} SGT ({timeOffset})\n          </p>\n          {day.courseDay > 0 && (\n            <p>{day.dateTypes.module}</p>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\n// helper function that generates courseday header for a holiday\nconst HolidayCourseDay = ({ day, timeZoneSet, id }) => {\n  localDate = DateTime.fromFormat(day.courseDate, \"dd-MM-yyyy\");\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  timeZone = localDate.toFormat(\"z\");\n  // depending on if the holiday is a public/company holiday,\n  // a different output will be rendered\n  if (day.dateTypes.holidayType === \"public holiday\") {\n    holiday = `Public Holiday (${day.dateTypes.name})`;\n  } else {\n    holiday = `Company Holiday (${day.dateTypes.name})`;\n  }\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header\">\n          <h2>\n            {formattedDate}: {day.dateTypes.location} {holiday}\n          </h2>\n        </div>\n      )}\n    </>\n  );\n};\n\nlet localDate;\nlet formattedDate;\nlet meetingTime;\nlet timeZone;\nlet timeOffset;\nlet holiday;\n\n// ######################################################\n// ######################################################\n\n// function that generates the header for each course day\nconst GenerateCourseDayHeader = ({ todaySectionHeader, day, coursetype }) => {\n  // this is the timezone of the area we are in\n  const timeZoneSet = \"Asia/Singapore\";\n\n  if (day.meetingDateTimeUTC) {\n    return (\n      <NormalCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n      />\n    );\n  } else {\n    return (\n      <HolidayCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n      />\n    );\n  }\n};\n\nexport default GenerateCourseDayHeader;\n","import React, { useState } from \"react\";\nimport generateDataObject from \"../../../generateCourseDates.js\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport download from \"../../../download.js\";\n\nconst DatePicker = ({ setBootcampData }) => {\n  // inputs from user used to generate course data\n  const [startDate, setStartDate] = useState(\"\");\n  const [courseName, setCourseName] = useState(\"\");\n  const [courseType, setCourseType] = useState(\"\");\n\n  // function that generates and downloads schedule data when download button is clicked\n  const handleDownload = async (e) => {\n    e.preventDefault();\n    try {\n      const data = await generateDataObject(startDate, courseName, courseType);\n      download(data, `${data.courseName}.json`);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // function that generates and renders schedule data when button is clicked\n  const handleRender = async (e) => {\n    e.preventDefault();\n    try {\n      const data = await generateDataObject(startDate, courseName, courseType);\n      await setBootcampData(JSON.parse(JSON.stringify(data.days)));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const addToGitbook = async (e) => {\n    e.preventDefault();\n    try {\n      const data = await generateDataObject(startDate, courseName, courseType);\n      // from stackoverflow, https://stackoverflow.com/questions/58376758/how-to-copy-a-json-data-to-the-clipboard-with-the-button\n      let selBox = document.createElement('textarea');\n      selBox.style.position = 'fixed';\n      selBox.style.left = '0';\n      selBox.style.top = '0';\n      selBox.style.opacity = '0';\n      // this copies the JSON data to clipboard with original formatting\n      selBox.value = JSON.stringify(data, undefined, 2);\n      document.body.appendChild(selBox);\n      selBox.focus();\n      selBox.select();\n      document.execCommand('copy');\n      document.body.removeChild(selBox);\n\n      // opens a new window in the browser at specified address(gitbook create new page)\n      window.open('https://github.com/rocketacademy/scheduler/new/main/src/data', \"_blank\")\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <>\n      <div className=\"date-picker\">\n        <div>\n          <h2>Generate Schedule Data File</h2>\n        </div>\n        <div className=\"input-form-container\">\n          <Form className=\"input-form\">\n            <Form.Group className=\"mb-3 input\" controlId=\"formDate\">\n              <Form.Label>Start Date</Form.Label>\n              <Form.Control\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Batch Number</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={courseName}\n                onChange={(e) => setCourseName(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Course Type</Form.Label>\n              <Form.Select\n                aria-label=\"Default select example\"\n                onChange={(e) => setCourseType(e.target.value)}\n              >\n                <option>Select course type</option>\n                <option value=\"Basics\">Basics</option>\n                <option value=\"Bootcamp FT\">Bootcamp FT</option>\n                <option value=\"Bootcamp PT\">Bootcamp PT</option>\n              </Form.Select>\n            </Form.Group>\n          </Form>\n          <div className=\"submit-button-container\">\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={(e) => {\n                handleRender(e);\n              }}\n            >\n              Render Schedule\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={(e) => {\n                handleDownload(e);\n              }}\n            >\n              Download Schedule\n            </Button>\n            <Button\n              className=\"create-file\"\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={(e) => {\n                addToGitbook(e);\n              }}\n            >\n              Add to Gitbook\n            </Button>\n          </div>\n          <br></br>\n          <div>\n            <a href=\"https://github.com/rocketacademy/scheduler\">\n              link to GitHub repo\n            </a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DatePicker;\n","import React from \"react\";\nimport GenerateDataShiftContent from \"../GenerateDataShiftContent\";\nimport ActiveCourses from \"./ActiveCourses.jsx\";\nimport DatePicker from \"./DatePicker.jsx\";\n\nconst DataShift = ({ batchArray, bootcampData, setBootcampData, setBatchFile, batchFile, setDaysInBatchFile, setDaysInMainFile }) => {\n \n  return (\n    <>\n      <div className=\"datashift-container\">\n        <div className=\"all-courses-navbar\">\n          {/* this component contains links to indivudual batch schedules to be rendered and edited */}\n          <ActiveCourses\n            batchArray={batchArray}\n            setBootcampData={setBootcampData}\n            setBatchFile={setBatchFile}\n          />\n        </div>\n        <div className=\"data-shift\">\n          <div className=\"data-container\">\n            {/* this component generates a course schedule based on start date and course type from the main json data file */}\n            <DatePicker\n              bootcampData={bootcampData}\n              setBootcampData={setBootcampData}\n            />\n            {/* this component allows the user to edit the schedule rendered */}\n            <GenerateDataShiftContent\n              batchArray={batchArray}\n              bootcampData={bootcampData}\n              setBootcampData={setBootcampData}\n              batchFile={batchFile}\n              setDaysInBatchFile={setDaysInBatchFile}\n              setDaysInMainFile={setDaysInMainFile}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DataShift;\n","import React, { useState, useEffect } from \"react\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport DataShift from \"./data-shift/DataShift\";\nimport mainDataFile from \"../../data/bootcamp-course-days.json\";\nimport GenerateDataShiftContent from \"./GenerateDataShiftContent\";\n\nconst TabsContainer = ({ batchArray }) => {\n  const [key, setKey] = useState(\"datePicker\");\n  // remains empty until user picks/ generates schedule to edit. this is the days section of the batch data file\n  const [batchDays, setBatchDays] = useState({});\n  // this is the whole data file\n  const [batchFile, setBatchFile] = useState({});\n\n  // this is the main bootcamp data json file that has not been mapped onto any dates\n  const [mainFile, setMainFile] = useState(\n    JSON.parse(JSON.stringify(mainDataFile))\n  );\n  // this is the course days section of the bootcamp data json file  \n  const [mainDays, setMainDays] = useState(\n    JSON.parse(JSON.stringify(mainDataFile.days))\n  );\n  // helper function for setting state (mainFile)\n  const setDaysInMainFile = (mainDays) => {\n    setMainFile({...mainFile, days: mainDays})\n  }\n\n  // helper function for setting state (batchFile)\n  const setDaysInBatchFile = (batchDays) => {\n    setBatchFile({...batchFile, days: batchDays})\n  }\n\n  // // update main file every time days key changes\n  // useEffect(() => {\n  //   setMainFile({...mainFile, days: mainDays})\n  // }, [mainDays]);\n\n  // // update batch file everytime days key changes\n  // useEffect(() => {\n  //   setBatchFile({...batchFile, days: batchDays});\n  // }, [batchDays])\n\n  return (\n    <div class=\"container\">\n    <Tabs\n      id=\"controlled-tab-example\"\n      activeKey={key}\n      onSelect={(k) => setKey(k)}\n      className=\"\"\n    >\n      {/* this tab contains the component for editing the main data file */}\n      <Tab eventKey=\"datePicker\" title=\"Main\">\n        <GenerateDataShiftContent\n          bootcampData={mainDays}\n          setBootcampData={setMainDays}\n          mainFile={mainFile}\n          setMainFile={setMainFile}\n          setDaysInBatchFile={setDaysInBatchFile}\n          setDaysInMainFile={setDaysInMainFile}\n        />\n      </Tab>\n      {/* this tab contains the component for generating/ editing individual batch schedules */}\n      <Tab eventKey=\"dataShift\" title=\"Batch\">\n        <DataShift\n          batchArray={batchArray}\n          bootcampData={batchDays}\n          setBootcampData={setBatchDays}\n          setBatchFile={setBatchFile}\n          batchFile={batchFile}\n          setDaysInBatchFile={setDaysInBatchFile}\n          setDaysInMainFile={setDaysInMainFile}\n        />\n      </Tab>\n    </Tabs>\n    </div>\n  );\n};\n\nexport default TabsContainer;\n","export default __webpack_public_path__ + \"static/media/4-MILK.46ae71aa.png\";","import React from \"react\";\n\n// displays items in a section's classes\nfunction DisplaySection({ heading, sectionType, day }) {\n  return (\n    <div>\n      <h6 className=\"class-header\">{heading}</h6>\n      <ul>\n        {sectionType.map((item, index) => {\n          let id;\n          // id used for scrollTo function of sidebar modules\n          if (heading === \"Pre Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpc-${index}`;\n          } else if (heading === \"In Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gic-${index}`;\n          } else {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpostc-${index}`;\n          }\n\n          return (\n            <>\n              {item.url && (\n                <li id={id}>\n                  <a href={item.url}>{item.name}</a>\n                </li>\n              )}\n              {!item.url && <li>{item.name}</li>}\n            </>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default DisplaySection;\n","import React from \"react\";\nimport DisplaySection from \"./DisplaySection\";\n\n// if sections project due/ project start/ cp due exist in a course day,\n// this function will generate a header and content for these sections\nconst GenerateNotifications = ({\n  status,\n  projectdue,\n  cpdue,\n  projectstart,\n  day,\n}) => {\n  let heading;\n\n  // generates header for the section\n  if (status) {\n    if (status.items) {\n      if (status === projectdue) {\n        heading = \"Project Due\";\n      } else if (status === projectstart) {\n        heading = \"Project Start\";\n      } else if (status === cpdue) {\n        heading = \"Inteview Prep due\";\n      }\n    }\n  }\n\n  return (\n    <>\n      {status && status.items && (\n        <div className=\"notifications\">\n          <DisplaySection\n            heading={heading}\n            sectionType={status.items}\n            day={day}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateNotifications;\n","const generateSectionArray = (datetype, classType, sectionArray) => {\n    Object.keys(datetype).forEach((section) => {\n        let classTypeSection;\n    // classTypeSection is determined by what classType is\n        if (classType === 'preClass') {\n            classTypeSection = datetype[section].preClass;\n        } else if (classType === 'inClass') {\n            classTypeSection = datetype[section].inClass;\n        } else {\n            classTypeSection = datetype[section].postClass;\n        } \n\n        if (classTypeSection) {\n            // if there are items in classTypeSection, the items are pushed into sectionArray\n            if (classTypeSection.items) {\n                for (let x = 0; x < classTypeSection.items.length; x += 1) {\n                    sectionArray.push(classTypeSection.items[x]);\n                }\n            }\n        }\n    })\n    return sectionArray;\n}\n\nexport default generateSectionArray;","import React from 'react';\nimport DisplaySection from './DisplaySection';\nimport generateSectionArray from '../../generateSectionArray';\n\n\nfunction GenerateDatetypeSections ({ \n                                datetype, \n                                classType, \n                                day \n                                }) { \n    // stores items that are in a particular section of a datetype\n    const sectionArray = [];\n\n    generateSectionArray(datetype, classType, sectionArray);\n\n    // sets the heading depending on the classtype\n    let heading;\n    if (sectionArray.length > 0) {\n           // a header will be created \n        if (classType === 'preClass') {\n            heading ='Pre Class';\n        } else if (classType === 'inClass') {\n            heading = 'In Class';\n        } else {\n            heading = 'Post Class';\n        }\n    }\n\n    return (\n        <div>\n            <DisplaySection \n                        heading={heading} \n                        sectionType={sectionArray} \n                        day={day}\n                        />\n        </div>\n    )\n}\n\nexport default GenerateDatetypeSections\n","import React from \"react\";\nimport GenerateNotifications from \"./GenerateNotifications\";\nimport GenerateDatetypeSections from \"./GenerateDatetypeSections\";\n\n// generates the content and section headings for each course day\nconst GenerateCourseDayContent = ({ day }) => {\n  const projectdue = day.dateTypes.projects.projectDue;\n  const projectstart = day.dateTypes.projects.projectStart;\n  const cpdue = day.dateTypes.cp.cpDue;\n\n  return (\n    <>\n      {/* project due notification  */}\n      <GenerateNotifications\n        status={projectdue}\n        cpdue={cpdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      {/* career prep due notification  */}\n      <GenerateNotifications\n        status={cpdue}\n        cpdue={cpdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      {/* preclass section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"preClass\"\n        day={day}\n      />\n      {/* in class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"inClass\"\n        day={day}\n      />\n      {/* post class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"postClass\"\n        day={day}\n      />\n      {/* project start notification  */}\n      <GenerateNotifications\n        status={projectstart}\n        cpdue={cpdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n    </>\n  );\n};\n\nexport default GenerateCourseDayContent;\n","import React from 'react'\n\n// renders items in a section\nfunction TableSectionContent({ sectionArray }) {\n    return (\n        <ul>\n        {sectionArray.map((item) => {\n            \n            return (\n                <>\n                {item.url && (\n                    <li>\n                        <a href={item.url}>{item.name}</a>\n                    </li>\n                )}\n                {!item.url && (\n                    <li>\n                        {item.name}\n                    </li>\n                )}\n                </>\n            )\n        })}\n        </ul>\n    )\n}\n\nexport default TableSectionContent\n","import React from 'react';\nimport generateSectionArray from '../../../generateSectionArray';\nimport TableSectionContent from './TableSectionContent';\n\n// renders in class/ preclass section of table\nfunction TableClass({ day, \n                      sectionClass\n                     }) {\n\n    const classArray = [];\n    const datetype = day.dateTypes;\n\n    // gets all items in a particular section\n    generateSectionArray(datetype, sectionClass, classArray);\n\n    return (\n        <td>\n            <TableSectionContent sectionArray={classArray} />\n        </td>\n    )\n}\n\nexport default TableClass\n","import React from 'react';\nimport GenerateNotifications from '../GenerateNotifications';\n\n// renders projects section of table\nfunction TableProjects({ day }) {\n    const projectdue = day.dateTypes.projects.projectDue;\n    const projectstart = day.dateTypes.projects.projectStart;\n    const cpdue = day.dateTypes.cp.cpDue;\n\n    return (\n        <div className=\"table-projects\">\n            <GenerateNotifications status={projectdue} \n                               cpdue={cpdue} \n                               projectdue={projectdue} \n                               projectstart={projectstart} \n                               day={day}\n                               />\n            <GenerateNotifications status={projectstart} \n                               cpdue={cpdue} \n                               projectdue={projectdue} \n                               projectstart={projectstart} \n                               day={day}\n                               />\n        </div>\n    )\n}\n\nexport default TableProjects\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport Table from \"react-bootstrap/Table\";\nimport { DateTime } from \"luxon\";\nimport TableClass from \"./TableClass\";\nimport TableProjects from \"./TableProjects\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction ScheduleTable({ weekNumbers, tableData, coursetype, today }) {\n  return (\n    <>\n      <Accordion.Header>\n        <h5>\n          {/* header shows different info depending on date and coursetype  */}\n          {coursetype === \"ft\" &&\n            today.toFormat(\"dd-MM-yyyy\") ===\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>\n                Current Course Week:{\" \"}\n                {weekNumbers.map((num) => {\n                  return <span>{num}</span>;\n                })}\n              </>\n            )}\n          {coursetype === \"ft\" &&\n            today.toFormat(\"dd-MM-yyyy\") !==\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>\n                Next Course Week:{\" \"}\n                {weekNumbers.map((num) => {\n                  return <span>{num}</span>;\n                })}\n              </>\n            )}\n          {coursetype === \"pt\" && (\n              <>Current Month's Schedule</>\n            )}\n        </h5>\n      </Accordion.Header>\n      <Accordion.Body>\n        <Table bordered hover size=\"sm\">\n          <thead>\n            <tr>\n              <th></th>\n              <th>Projects</th>\n              <th>Pre Class</th>\n              <th>In Class</th>\n              <th>Post Class</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tableData.map((date, index) => {\n              // getting the formatted date that will be shown in the table\n              const formattedDate = DateTime.fromFormat(\n                date.courseDate,\n                \"dd-MM-yyyy\"\n              ).toFormat(\"EEE d MMM\");\n              // getting the id that links formattedDate to element in main content page\n              const id = `${coursetype}-week-${date.courseWeek}-day-${date.dayNumber}`;\n\n              return (\n                <tr\n                  className={\n                    today.toFormat(\"dd-MM-yyyy\") ===\n                      DateTime.now().toFormat(\"dd-MM-yyyy\") &&\n                    date.courseDate === today.toFormat(\"dd-MM-yyyy\")\n                      ? \"table-secondary\"\n                      : null\n                  }\n                >\n                  <td\n                    // library react-scroll used to scroll to an element with matching id on main page\n                    className=\"table-date\"\n                  >\n                    <h6\n                      onClick={() =>\n                        scroller.scrollTo(id, {\n                          smooth: true,\n                          offset: -70,\n                          duration: 100,\n                        })\n                      }\n                    >\n                      {formattedDate}\n                    </h6>\n                    <p>\n                      Week {date.courseWeek}\n                      <br></br>Course Day {date.courseDay}\n                    </p>\n                  </td>\n                  {/* getting data for projects section of table */}\n                  <td>\n                    <TableProjects day={tableData[index]} />\n                  </td>\n                  {/* getting data for preclass and inclass section of table */}\n                  <TableClass day={tableData[index]} sectionClass=\"preClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"inClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"postClass\" />\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Accordion.Body>\n    </>\n  );\n}\n\nexport default ScheduleTable;\n","// function that generates data required for rendering schedule table\nconst generateTableData = (scheduleData, coursetype, weekNumbers, tableData, setWeekNumbers, setTableData, today ) => {\n  let firstDay;\n  let moveDate;\n  let lastDay;\n  let firstDayMonth;\n  let lastDayMonth;\n  let moveDateMonth;\n  weekNumbers = [];\n  // shows current month for part time bootcamp\n  firstDayMonth = today.startOf(\"month\");\n  lastDayMonth = today.endOf(\"month\");\n\n  // shows current week for full time bootcamp\n  firstDay = today.startOf(\"week\");\n  lastDay = today.endOf(\"week\");\n\n  moveDate = firstDay;\n  const weekDatesArray = [];\n  // getting all the dates between first day and last day of week inclusive and storing them in an array\n  while (moveDate <= lastDay) {\n    weekDatesArray.push(moveDate.toFormat(\"dd-MM-yyyy\"));\n    moveDate = moveDate.plus({ days: 1 });\n  }\n\n  moveDateMonth = firstDayMonth;\n\n  const monthDatesArray = [];\n  if (coursetype === \"pt\") {\n    // getting all the dates between first day and last day of week inclusive and storing them in an array\n    while (moveDateMonth <= lastDayMonth) {\n      monthDatesArray.push(moveDateMonth.toFormat(\"dd-MM-yyyy\"));\n      moveDateMonth = moveDateMonth.plus({ days: 1 });\n    }\n  }\n\n  const currentWeekData = [];\n  const currentMonthData = [];\n\n  // getting the data (object) for each individual day of the month (used for pt schedule table)\n  if (coursetype === \"pt\") {\n    for (let i = 0; i < monthDatesArray.length; i += 1) {\n      Object.keys(scheduleData).map((day) => {\n        if (day === monthDatesArray[i]) {\n          currentMonthData.push(scheduleData[day]);\n        }\n      });\n    }\n    setTableData(currentMonthData);\n  } else {\n    // getting the data (object) for each individual day of the week\n  for (let i = 0; i < weekDatesArray.length; i += 1) {\n    Object.keys(scheduleData).map((day) => {\n      if (day === weekDatesArray[i]) {\n        currentWeekData.push(scheduleData[day]);\n      }\n    });\n  }\n    setTableData(currentWeekData);\n  }\n\n  \n  // getting the week's courseWeek that the indicator will point to\n  weekDatesArray.forEach((date) => {\n    if (\n      scheduleData[date] &&\n      !weekNumbers.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumbers.push(scheduleData[date].courseWeek);\n    }\n  });\n  setWeekNumbers(weekNumbers);\n}\n\nexport default generateTableData;","import React, { useEffect, useState } from \"react\";\nimport ScheduleTable from \"./ScheduleTable\";\nimport generateTableData from \"../../../generateTableData\";\n\nconst ContentTable = ({ scheduleData, coursetype, startDay }) => {\n  const [weekNumbers, setWeekNumbers] = useState();\n  const [tableData, setTableData] = useState();\n\n  useEffect(() => {\n    generateTableData(\n      scheduleData,\n      coursetype,\n      weekNumbers,\n      tableData,\n      setWeekNumbers,\n      setTableData,\n      startDay\n    );\n  }, [scheduleData]);\n\n  return (\n    <div className=\"schedule-table\">\n      {/* table which displays current week's/ month's content based on course type */}\n      {weekNumbers && tableData && (\n        <ScheduleTable\n          weekNumbers={weekNumbers}\n          tableData={tableData}\n          coursetype={coursetype}\n          today={startDay}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ContentTable;\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport GenerateCourseDayHeader from \"../GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"../GenerateCourseDayContent\";\nimport GenerateDatetypeSections from \"../GenerateDatetypeSections\";\nimport { DateTime } from \"luxon\";\n\n// helper function that finds previous course day\nconst findPreviousDay = (scheduleData, today, coursetype) => {\n  let dayBefore;\n\n  if (coursetype === \"ft\") {\n    if (today.weekday === 1) {\n      dayBefore = today.plus({ days: -3 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      dayBefore = today.plus({ days: -2 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.plus({ days: -1 }).toFormat('dd-MM-yyyy');\n    }\n  } else if (coursetype === \"pt\") {\n    if (today.weekday === 1) {\n      dayBefore = today\n        .plus({ weeks: -1 })\n        .set({ weekday: 6 })\n        .toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday > 1 && today.weekday <= 6) {\n      dayBefore = today.set({ weekday: 1 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    }\n  }\n\n  if (scheduleData[dayBefore].dateTypes.holidayType) {\n    dayBefore = findPreviousDay(scheduleData, dayBefore, coursetype);\n  }\n\n  return dayBefore;\n};\n\n//helper funcyion that finds next course day\nconst findNextDay = (scheduleData, today, coursetype, firstDayOfCourse) => {\n  let nextDay;\n\n  if (coursetype === \"ft\" && DateTime.now() > firstDayOfCourse) {\n    if (today.weekday === 6) {\n      nextDay = today.plus({ days: 2 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      nextDay = today.plus({ days: 1}).toFormat('dd-MM-yyyy');\n    } else {\n      nextDay = today.toFormat(\"dd-MM-yyyy\");\n    }\n  } else if (coursetype === \"pt\" && DateTime.now() > firstDayOfCourse) {\n    if (today.weekday === 1) {\n      nextDay = today.toFormat('dd-MM-yyyy');\n    } else if (today.weekday > 1 && today.weekday <= 6) {\n      nextDay = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      nextDay = today.plus({ days: 1 }).toFormat(\"dd-MM-yyyy\");\n    }\n  } else {\n    nextDay = today.toFormat('dd-MM-yyyy');\n  }\n\n  if (scheduleData[nextDay].dateTypes.holidayType) {\n    nextDay = findNextDay(scheduleData, nextDay, coursetype);\n  }\n\n  return nextDay;\n};\n// ##############################################################################\n\nfunction CurrentDaySection({ scheduleData, coursetype, today, firstDayOfCourse }) {\n  // indicates whether or not courseweek and course day is shown on the courseday header\n  const todaySectionHeader = true;\n  let previousDay = null;\n  let nextDay;\n  let previousDayId;\n  // finds previous course day, only applicable if course has already started\n  if (DateTime.now() > firstDayOfCourse) {\n    previousDay = findPreviousDay(scheduleData, today, coursetype);\n    previousDayId = `${coursetype}-week-${scheduleData[previousDay].courseWeek}-day-${scheduleData[previousDay].dayNumber}`;\n  }\n\n  // find the next day if current day is not a course day\n  nextDay = findNextDay(scheduleData, today, coursetype, firstDayOfCourse);\n\n  // creating ids for scrollTo function for top section\n  const currentDayId = `${coursetype}-week-${scheduleData[nextDay].courseWeek}-day-${scheduleData[nextDay].dayNumber}`;\n\n  return (\n    <div>\n      <div className=\"today-date\">\n        {nextDay && (\n          <>\n            <div>\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[nextDay]}\n                coursetype={coursetype}\n              />\n            </div>\n            <div className=\"main-header-course-day\">\n              <h5>\n                Current Course Day:{\" \"}\n                {/* shows either today's content or next course day's content depending on if today's content exists  */}\n                {scheduleData[today.toFormat(\"dd-MM-yyyy\")] ? (\n                  <span>\n                    {scheduleData[today.toFormat(\"dd-MM-yyyy\")].courseDay}\n                  </span>\n                ) : (\n                  <span> {scheduleData[nextDay].courseDay}</span>\n                )}\n              </h5>\n            </div>\n            <div className=\"top-content-container\">\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(currentDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Current Course Day:\n                  </h5>\n                  <br></br>\n                  <GenerateCourseDayContent day={scheduleData[nextDay]} />\n                </>\n              </div>\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(previousDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Previous Course Day:\n                  </h5>\n                  <br></br>\n                  {previousDay && (\n                    <GenerateDatetypeSections\n                    datetype={scheduleData[previousDay].dateTypes}\n                    classType=\"postClass\"\n                    day={scheduleData[previousDay]}\n                  />\n                  )}\n                </>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default CurrentDaySection;\n","import React from \"react\";\nimport GenerateCourseDayHeader from \"./GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"./GenerateCourseDayContent\";\nimport ContentTable from \"./schedule-table/ContentTable\";\nimport { scroller } from \"react-scroll\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport CurrentDaySection from \"./current-day/CurrentDaySection\";\nimport { DateTime } from \"luxon\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\n// generates schedule content for a particular course\nfunction ScheduleContent({ scheduleData, coursetype, title, today, firstDayOfCourse }) {\n  // used by scrollTo function to identify where to scroll to from the up arrow at the bottom of the screen\n  const id = `${coursetype}-top`;\n  const todaySectionHeader = false;\n  // let today = DateTime.now();\n\n  // // checking if first day of course is after today, if so today = first day of course, so that current day\n  // // section and tables and display first day/ weeks info\n  // const courseDatesArray = [];\n  // Object.keys(scheduleData).map((day) => {\n  //   courseDatesArray.push(day);\n  // });\n  // courseDatesArray.sort(function(a, b){return a-b});\n  // const firstDayOfCourse = DateTime.fromFormat(courseDatesArray[0], 'dd-MM-yyyy');\n\n  // if (today < firstDayOfCourse) {\n  //   today = firstDayOfCourse;\n  // }\n\n  let nextToday;\n  if (coursetype === \"ft\") {\n    nextToday = today.plus({ weeks: 1 });\n  } else {\n    nextToday = today.plus({ months: 1 });\n  }\n  \n  return (\n    <div className=\"content\">\n      {/* button that takes user back to the top of the page  */}\n      <div\n        className=\"up-arrow\"\n        onClick={() =>\n          scroller.scrollTo(id, {\n            smooth: true,\n            offset: -70,\n            duration: 100,\n          })\n        }\n      >\n        <ExpandLessIcon />\n      </div>\n      <h1 className=\"schedule-header\">{title}</h1>\n      <p id={id}></p>\n     \n      {/* generates table which shows schedule for current week/ month depending on course type */}\n      <CurrentDaySection\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        today={today}\n        firstDayOfCourse={firstDayOfCourse}\n      />\n      <div className=\"schedule-accordion-container\">\n        <Accordion className=\"current-week-accordion\" defaultActiveKey=\"0\">\n          <Accordion.Item eventKey=\"0\">\n            <ContentTable\n              scheduleData={scheduleData}\n              coursetype={coursetype}\n              startDay={today}\n            />\n          </Accordion.Item>\n        </Accordion>\n        <Accordion className=\"current-week-accordion\">\n          {coursetype === \"ft\" && (\n            <Accordion.Item eventKey=\"0\">\n              <ContentTable\n                scheduleData={scheduleData}\n                coursetype={coursetype}\n                startDay={nextToday}\n              />\n            </Accordion.Item>\n          )}\n        </Accordion>\n      </div>\n      <div className=\"schedule-list\">\n        <h1>Full Schedule</h1>\n        {/* generates individual day schedule content */}\n        {Object.keys(scheduleData).map((day) => {\n          const id = `${coursetype}-week-${scheduleData[day].courseWeek}-day-${scheduleData[day].dayNumber}`;\n\n          return (\n            <div className=\"day-class\" id={id}>\n              {/* generates schedule header for individual day */}\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[day]}\n                coursetype={coursetype}\n              />\n              {/* generates content if course day is not a holiday */}\n              {!scheduleData[day].dateTypes.holidayType && (\n                <GenerateCourseDayContent day={scheduleData[day]} />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default ScheduleContent;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { scroller } from 'react-scroll';\n\nfunction ModuleSection({ \n                    section, \n                    index, \n                    sectionNames, \n                    coursetype, \n                    scheduleData \n                }) {\n    return (\n        <>\n        {section.length > 1 && (\n        <Accordion.Item eventKey={index}>\n            <Accordion.Header>{sectionNames[index]}</Accordion.Header>\n            <Accordion.Body>\n            {section.map((info) => {\n            const id = `${coursetype}-week-${scheduleData[info.date].courseWeek}-day-${scheduleData[info.date].dayNumber}`;\n    \n                return (\n                <p onClick={() =>\n                scroller.scrollTo(id, {\n                    smooth: true,\n                    offset: -70,\n                    duration: 100,\n                })\n                }\n                >\n                {info.name}\n                </p>\n                )\n            })}\n            </Accordion.Body>\n        </Accordion.Item>\n        )}\n        </>\n    )\n}\n\nexport default ModuleSection\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Accordion from 'react-bootstrap/Accordion';\nimport ModuleSection from \"./ModuleSection\";\n\n// helper function for generating scheduleObjs array and moduleNameArray\nconst generatingDataArrays = (\n                              scheduleData, \n                              day, \n                              section, \n                              classtype, \n                              scheduleUrls, \n                              scheduleObjs, \n                              moduleNameArray\n                              ) => {\n  if (scheduleData[day].dateTypes[section][classtype].items) {\n    scheduleData[day].dateTypes[section][classtype].items.map((item) => {\n      // if the item has a url\n      if(item.url && !scheduleUrls.includes(item.url)) {\n        // push the url into scheduleUrls\n        scheduleUrls.push(item.url);\n        // push item name, url and date into scheduleObjs\n        scheduleObjs.push({name: item.name, url: item.url, date: day});\n      }\n      if (item.url) {\n        const itemUrlArray = item.url.split('/');\n        // itemUrlArray[3] is used as the heading of each module section\n        // we're filtering out everythign that does not come from the gitbook \n        if (!moduleNameArray.includes(itemUrlArray[3]) && itemUrlArray[2] === 'bootcamp.rocketacademy.co') {\n          moduleNameArray.push(itemUrlArray[3]);\n        }\n      }\n    })\n  }\n}\n\n// helper finction for accessing required items (items in each class of each section of each day)\nconst accessingRequiredItems = (\n                              scheduleData, \n                              day, \n                              scheduleUrls, \n                              scheduleObjs, \n                              moduleNameArray\n                              ) => {\n  if (scheduleData[day].dateTypes.module) {\n    Object.keys(scheduleData[day].dateTypes)\n    // filtering out module key\n    .filter(section => section !== 'module')\n    .map((section) => {\n      Object.keys(scheduleData[day].dateTypes[section])\n      // filtering out type key\n      .filter(classtype => classtype !== 'type')\n      .map((classtype) => {\n        // if there item array exists in a section, call the function that gets the required data\n        generatingDataArrays(scheduleData, \n                            day, \n                            section, \n                            classtype, \n                            scheduleUrls, \n                            scheduleObjs, \n                            moduleNameArray);\n        \n      })\n    })\n  }\n}\n\nconst sortScheduleObjs = (urlObj, moduleName, general, ice, poce) => {\n  const urlModule = urlObj.url.split('/');\n  // this is the part of the url which we used to get the moduleName\n  const urlModuleName = urlModule[3];\n  // if the module name in the url is the current moduleName\n  if (urlModuleName === moduleName) {\n    const splitName = urlObj.name.split('.');\n    const dataObj = { name: urlObj.name, date: urlObj.date }\n    // push the object into the relevant array\n    if (splitName[1] === 'ICE') {\n      ice.push(dataObj);\n    } else if (splitName[1] === 'POCE') {\n      poce.push(dataObj);\n    } else {\n      general.push(dataObj);\n    }\n  }\n}\n \n// ###################################################################\n// ###################################################################\n\nfunction Modules({ scheduleData, coursetype }) {\n  const moduleNameArray = [];\n  const scheduleUrls = [];\n  const scheduleObjs = [];\n\n  // looking through entire data file \n  Object.keys(scheduleData).map((day) => {\n    accessingRequiredItems (\n                            scheduleData, \n                            day, \n                            scheduleUrls, \n                            scheduleObjs, \n                            moduleNameArray\n                            );\n  })\n\n  moduleNameArray.sort();\n\n  return (\n    <div className=\"sidebar-modules\">\n      <h4>Modules</h4>\n      <Nav className=\"flex-column\">\n        {moduleNameArray.map((moduleName) => {\n          // creating array to store items of each section\n          const general = [];\n          const poce = [];\n          const ice = [];\n\n          // sort each object in scheduleObjs into one of 3 arrays, general, ice, poce\n          scheduleObjs.forEach((urlObj) => {\n            sortScheduleObjs(urlObj, moduleName, general, ice, poce);\n          })\n\n          const sectionArray = [];\n          sectionArray.push(general);\n          sectionArray.push(ice);\n          sectionArray.push(poce);\n\n          // names of each section \n          const sectionNames = ['General', 'In Class', 'Post Class'];\n\n          return (\n            <>\n            <h6 className=\"sidebar-subheading\">{moduleName}</h6>\n            <Accordion className=\"modules-accordion\">\n            {sectionArray.map((section, index) => {\n              return (\n              <ModuleSection\n                        section={section} \n                        index={index} \n                        sectionNames={sectionNames} \n                        coursetype={coursetype} \n                        scheduleData={scheduleData} \n                        />\n              )\n            })}\n            </Accordion>\n            </>\n            )\n          }\n        )}\n      </Nav>\n    </div>\n  );\n}\n\nexport default Modules;\n\n\n","import React, { useEffect, useRef } from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { scroller } from \"react-scroll\";\nimport { DateTime } from \"luxon\";\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\nimport Modules from './Modules';\n\n// one of the components in Sidebar\nfunction CourseWeeks({ scheduleData, coursetype, firstDayOfCourse }) {\n  const weeks = [];\n  // used to scroll to current week on page load \n  const executeScroll = () => currentWeekRef.current.scrollIntoView({ block: \"center\" });\n\n  useEffect(() => {\n    if (DateTime.now() > firstDayOfCourse) {\n      executeScroll();\n    }\n  }, []);\n\n  const CurrentWeekDiv = () => {\n    return (\n      <>\n        <div ref={currentWeekRef}></div>\n      </>\n    );\n  };\n\n  // getting all the week numbers\n  Object.keys(scheduleData).forEach((day) => {\n    if (!weeks.includes(scheduleData[day].courseWeek)) {\n      weeks.push(scheduleData[day].courseWeek);\n    }\n  });\n\n  // getting first and last days of week\n  const firstDayOfWeek = DateTime.now().startOf(\"week\");\n  const lastDayOfWeek = DateTime.now().endOf(\"week\");\n  let target = firstDayOfWeek;\n  // array where all course dates in current week will be stored\n  const weeksDates = [];\n\n  // storing week's dates in the array\n  while (target <= lastDayOfWeek) {\n    weeksDates.push(target.toFormat(\"dd-MM-yyyy\"));\n    target = target.plus({ days: 1 });\n  }\n\n  // getting the week's courseWeek that the indicator will point to\n  const weekNumber = [];\n  const currentWeekRef = useRef(null);\n\n  weeksDates.forEach((date) => {\n    if (\n      scheduleData[date] &&\n      !weekNumber.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumber.push(scheduleData[date].courseWeek);\n    }\n  });\n\n  return (\n    <div className=\"sidebar-courseweeks\">\n      <h4>Course Weeks</h4>\n      <Nav\n        variant=\"pills\"\n        defaultActiveKey=\"0\"\n        className=\"flex-column\"\n        navbarScroll=\"true\"\n      >\n        <Nav.Item>\n          <Nav.Link\n            eventKey=\"0\"\n            // uses react-scroll library for scroll function\n            onClick={() =>\n              scroller.scrollTo(`${coursetype}-top`, {\n                smooth: true,\n                offset: -70,\n                duration: 100,\n              })\n            }\n          >\n            Current Day\n          </Nav.Link>\n        </Nav.Item>\n        {weeks.map((week, index) => {\n          // generating id that is linked to id of an element in main content of page\n          // on click, page will scroll to where the element is\n          const navId = `${index + 1}`;\n          const id = `${coursetype}-week-${week}-day-1`;\n          const sidebarId = `${coursetype}-sidebar-week-${week}`;\n          return (\n            <Nav.Item>\n              <Nav.Link\n                eventKey={navId}\n                // uses react-scroll library for scroll function\n                onClick={() =>\n                  scroller.scrollTo(id, {\n                    smooth: true,\n                    offset: -70,\n                    duration: 100,\n                  })\n                }\n              >\n                {week === weekNumber[0] && DateTime.now() > firstDayOfCourse && <CurrentWeekDiv />}\n                <div>\n                  Week {week}\n                  {/* week indicator that indicates that a certain week is the current week  */}\n                  {weeks[index] === weekNumber[0] && (\n                    <span id={sidebarId} className=\"current-wk-indicator\">\n                      <KeyboardBackspaceIcon />\n                      {\"  \"}\n                      this week\n                    </span>\n                  )}\n                </div>\n              </Nav.Link>\n            </Nav.Item>\n          );\n        })}\n      </Nav>\n      <Modules scheduleData={scheduleData} coursetype={coursetype} />\n    </div>\n  );\n}\n\nexport default CourseWeeks;\n","import React from \"react\";\nimport CourseWeeks from \"./CourseWeeks\";\n\n// side navbar , displays a list of course weeks\nfunction SideBar({ scheduleData, coursetype, firstDayOfCourse }) {\n  return (\n    <div className=\"sidebar\">\n      <CourseWeeks \n        scheduleData={scheduleData} \n        coursetype={coursetype} \n        firstDayOfCourse={firstDayOfCourse}  />\n    </div>\n  );\n}\n\nexport default SideBar;\n","import React from \"react\";\nimport ScheduleContent from \"./ScheduleContent\";\nimport SideBar from \"./sidebar/SideBar\";\nimport { DateTime } from 'luxon';\n\nfunction BatchSchedule({ data, title }) {\n  const scheduleData = JSON.parse(JSON.stringify(data.days));\n\n  // needed to generate id for use with react-scroll library, also indicates if course is full time/ part time\n  let coursetype;\n  if (data.courseType === \"Bootcamp PT\") {\n    coursetype = \"pt\";\n  } else {\n    coursetype = \"ft\";\n  }\n\n  let today = DateTime.now();\n\n  // checking if first day of course is after today, if so today = first day of course, so that current day\n  // section and tables and display first day/ weeks info\n  const courseDatesArray = [];\n  Object.keys(scheduleData).map((day) => {\n    courseDatesArray.push(day);\n  });\n  courseDatesArray.sort(function(a, b){return a-b});\n  const firstDayOfCourse = DateTime.fromFormat(courseDatesArray[0], 'dd-MM-yyyy');\n\n  if (today < firstDayOfCourse) {\n    today = firstDayOfCourse;\n  }\n\n  return (\n    <div className=\"course-schedule\">\n      {/* contains links to main part of schedule page */}\n\n      <SideBar \n        scheduleData={scheduleData} \n        coursetype={coursetype}  \n        firstDayOfCourse={firstDayOfCourse} \n        />\n      {/* contains current schedule table and main content of page */}\n      <ScheduleContent\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        title={title}\n        today={today}\n        firstDayOfCourse={firstDayOfCourse}\n      />\n    </div>\n  );\n}\n\nexport default BatchSchedule;\n","import React from \"react\";\nimport { Route, Switch, Link, useRouteMatch, Redirect } from \"react-router-dom\";\nimport logo from \"../../assets/4-MILK.png\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport BatchSchedule from \"./BatchSchedule\";\n\nfunction ScheduleContainer({ batchArray }) {\n  let { path, url } = useRouteMatch();\n \n  // pass individual batch json files into BatchSchedule to generate schedules\n  return (\n    <>\n      <Navbar variant=\"dark\" bg=\"secondary\">\n        <Navbar.Brand href=\"#home\">\n          <img src={logo} alt=\"company logo\"></img>\n        </Navbar.Brand>\n        <Nav className=\"me-auto\">\n          {batchArray.map((batch) => {\n            return (\n              <>\n              <Nav.Link as={Link} to={`${url}/${batch.name}`}>\n                {batch.name.toUpperCase()}\n              </Nav.Link>\n              </>\n            );\n          })}\n        </Nav>\n      </Navbar>\n      <Switch>\n        <Route exact path={path}>\n          <Redirect to={`${path}/${batchArray[0].name}`} />\n        </Route>\n        {batchArray.map((batch) => {\n          return (\n            <Route path={`${path}/${batch.name}`}>\n              <BatchSchedule\n                data={batch.content}\n                title={batch.name.toUpperCase()}\n              />\n            </Route>\n          );\n        })}\n      </Switch>\n    </>\n  );\n}\n\nexport default ScheduleContainer;\n","import React from 'react';\nimport TabsContainer from './components/admin/Tabs';\nimport ptbc1 from '../src/data/16-08-2021_15-10-2022_BATCH1.json';\nimport ftbc3 from '../src/data/12-04-2021_23-09-2021_BATCH3.json';\nimport ftbc4 from '../src/data/12-07-2021_22-12-2021_BATCH4.json';\nimport ptbc2 from '../src/data/15-11-2021_21-01-2023_BATCH2.json';\nimport ftbc5 from '../src/data/04-10-2021_24-03-2022_BATCH5.json';\n\nimport {\n  HashRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport ScheduleContainer from './components/schedules/ScheduleContainer';\n\nfunction App() {\n\n  // put all batch data files in an array to be passed into separate components for /shedule and /admin\n  const batchArray = [{name:\"ptbc1\", content: ptbc1}, {name:\"ptbc2\", content: ptbc2}, {name: \"ftbc3\", content: ftbc3}, {name: \"ftbc4\", content: ftbc4}, {name:\"ftbc5\", content: ftbc5}];\n\n  return (\n    <div className=\"App\">\n        <HashRouter>\n          <Switch>\n            {/* route that takes user to part of app that edits course schedules */}\n            <Route path=\"/admin\">\n              <TabsContainer batchArray={batchArray} />\n            </Route>\n            {/* route that takes user to part of app that displays batch schedules for student use */}\n            <Route path=\"/schedules\">\n              <ScheduleContainer batchArray={batchArray} />\n            </Route>\n          </Switch>\n        </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}