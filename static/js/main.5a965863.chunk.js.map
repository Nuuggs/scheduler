{"version":3,"sources":["generateCourseDates.js","download.js","components/DatePicker.jsx","components/ClassItem.jsx","components/SectionClass.jsx","components/Section.jsx","components/DataShift.jsx","components/Tabs.jsx","App.js","reportWebVitals.js","index.js"],"names":["publicHolidays","holidayData","PH","publicHolidayArray","Object","keys","map","key","index","push","companyHolidays","company","companyHolidayArray","winterBreak","name","date","phWithoutCh","forEach","holiday","includes","getLocalDateTime","utc","timeString","courseName","courseType","changedFormat","toFormat","DateTime","fromISO","zone","toUTC","toISO","Number","weekday","generateHolidayObject","dateString","week","dateObj","courseDay","courseDate","courseWeek","dayNumber","dateTypes","generateCourseDayObject","weekDay","meetingDateTimeUTC","basicsData","days","bootcampData","generateDataObject","startDate","fromFormat","data","courseDayCount","dateWeek","classDatesCount","dayArray","topLevelObject","daysOfWeek","courseStartIndex","totalCourseDays","bootcampDays","fullTime","partTime","generateTopLevelObject","dayIndex","displayDate","displayName","plus","length","weeks","set","download","filename","dataStr","encodeURIComponent","JSON","stringify","dlAnchorElem","document","createElement","setAttribute","click","DatePicker","useState","setStartDate","setCourseName","setCourseType","handleSubmit","e","a","preventDefault","console","log","className","Form","Group","controlId","Label","Control","type","value","onChange","target","Select","Button","variant","onClick","href","ClassItem","setBootcampDataCopy","section","bootcampDataCopy","classType","sectionType","item","classIndex","buttonsVisible","setButtonsVisible","handleShift","direction","nextDay","previousDay","selectedItem","items","splice","shiftItem","dayType","onMouseEnter","onMouseLeave","SectionClass","sectionIndex","sectionclass","classButtonsVisible","setClassButtonsVisible","shiftSection","sectionArray","startDay","element","handleClassShift","i","selectedSection","Section","classExists","constructor","preClass","inClass","postClass","projectDue","projectStart","cpDue","filter","sectionClass","DataShift","parse","day","module","TabsContainer","setKey","Tabs","id","activeKey","onSelect","k","Tab","eventKey","title","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5a965863.chunk.js","sourcesContent":["import { DateTime } from 'luxon';\nimport holidayData from './data/2021-sg-stat-holidays.json';\nimport basicsData from './data/basics-course-days.json';\nimport bootcampData from './data/bootcamp-course-days.json';\n\nconst publicHolidays = holidayData.PH;\nconst publicHolidayArray = [];\n// get array of all public holiday dates\nObject.keys(publicHolidays).map((key, index) => {\n    publicHolidayArray.push(key);\n});\n\nconst companyHolidays = holidayData.company;\nconst companyHolidayArray = [];\nconst winterBreak = [];\n// get array of all company holiday dates\nObject.keys(companyHolidays).map((key, index) => {\n    companyHolidayArray.push(key);\n    // get array of winter break dates\n    if(companyHolidays[key].name === 'winter break') {\n        winterBreak.push(companyHolidays[key].date);\n    }\n});\n\nconst phWithoutCh = [];\n// get array of public holidays not including those included in winter break\npublicHolidayArray.forEach((holiday) => {\n    if(!companyHolidayArray.includes(holiday)) {\n        phWithoutCh.push(holiday);\n    }\n});\n\n// helper function for getting utc date/time\nconst getLocalDateTime = (utc, timeString, courseName, courseType, date) => {\n    const changedFormat = date.toFormat(\"yyyy-MM-dd\");\n    if (courseType === 'Basics') {\n        utc = DateTime.fromISO(changedFormat + timeString, {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp FT' && Number(courseName) % 2 === 0) {\n        utc = DateTime.fromISO(changedFormat + 'T13:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if ((courseType === 'Bootcamp FT' && Number(courseName) % 2 !== 0) || (courseType === 'Bootcamp PT' && (date.weekday === 6))) {\n        utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp PT' && (date.weekday === 1 || date.weekday === 3)) {\n        utc = DateTime.fromISO(changedFormat + 'T19:30', {zone: 'Singapore'}).toUTC().toISO();\n    }\n    return utc;\n}\n\n// helper function for deciding what goes in topLevelObject based on course type\nconst generateTopLevelObject = (courseType, topLevelObject) => {\n        if (courseType === 'Basics') {\n            topLevelObject = {\n                daysOfWeek: basicsData.daysOfWeek,\n                courseStartIndex: basicsData.courseStartIndex,\n                totalCourseDays: basicsData.totalCourseDays,\n                ...topLevelObject\n            };\n        } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            let bootcampDays;\n            if (courseType === 'Bootcamp FT') {\n                bootcampDays = bootcampData.daysOfWeek.fullTime;\n            } else {\n                bootcampDays = bootcampData.daysOfWeek.partTime;\n            }\n            topLevelObject = {\n                daysOfWeek: bootcampDays,\n                courseStartIndex: bootcampData.courseStartIndex,\n                totalCourseDays: bootcampData.totalCourseDays,\n                ...topLevelObject\n            }\n        }\n\n        return topLevelObject;\n    }\n\n// helper function that generates dateObj if the course date falls on a public holiday\nconst generateHolidayObject = (dateString, week, date, dateObj) => {\n    dateObj = {\n        courseDay: null,\n        courseDate: dateString,\n        courseWeek: week,\n        dayNumber: date.weekday,\n        dateTypes: {}\n    }\n\n    if (phWithoutCh.includes(dateString)) {\n        dateObj.dateTypes = publicHolidays[dateString];\n    } else {\n        dateObj.dateTypes = companyHolidays[dateString];\n    }\n\n    return dateObj;\n}\n\n// helper function that generates dateObj for a normal courseday\nconst generateCourseDayObject = (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay) => {\n    // get whatever index of basicsData that is specified by courseDayCount\n    dateObj = {\n        courseDate: dateString,\n        courseWeek: week,\n        weekDay: weekDay,\n        dayNumber: date.weekday,\n        meetingDateTimeUTC: utc,\n        };\n\n    // data is different for basics and bootcamp\n    if (courseType === 'Basics') {\n        dateObj = {\n            ...dateObj, ...basicsData.days[courseDay]\n        }\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            dateObj = {\n            ...dateObj, ...bootcampData.days[courseDay]\n        }\n    }\n    return dateObj;\n}\n\n// ##################################################################\n// ##################################################################\n\nconst generateDataObject = (startDate, courseName, courseType) => {\n    let date = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let utc;\n    utc = getLocalDateTime(utc, 'T16:00', courseName, courseType, date);\n    let dateWeek = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let classDatesCount = 1;\n    let week = 1;\n    let weekDay = 1;\n    let data;\n    let courseDayCount;\n    // starts from 0 because it's tracking the index of the json data file\n    let courseDay = 0;\n\n    let topLevelObject = {\n            courseType: courseType,\n            days: {}\n        };\n\n    data = generateTopLevelObject(courseType, topLevelObject);\n\n    // set the number of course days based on course type\n    if (courseType === 'Basics') {\n        courseDayCount = 13;\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n        courseDayCount = 115;\n    }\n\n    const dayArray = data.daysOfWeek;\n    let dayIndex = data.courseStartIndex;\n\n    while (courseDayCount > 0) {\n        const dateString = date.toFormat('dd-MM-yyyy');\n\n        // setting filename from start date, end date, courseName of course \n        // if this consition is met, dateString will be the end date of course\n        if (courseDay + 1 === data.totalCourseDays) {\n            // start date\n            const displayDate = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n            const displayName = `${displayDate.toFormat('dd-MM-yyyy')}_${dateString}_BATCH${courseName}`;\n            data.courseName = displayName;\n        }\n\n        let dateObj;\n        // if date is a public holiday\n        if (phWithoutCh.includes(dateString) || winterBreak.includes(dateString)) {\n            dateObj = generateHolidayObject (dateString, week, date, dateObj);\n\n        // if date is not a holiday\n        } else {\n            dateObj = generateCourseDayObject (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay);\n\n            // increase course days on days that classes are held,\n            // DO NOT increase course days on holidays\n            courseDayCount -= 1;\n            courseDay += 1;\n        }\n        data.days[dateString] = dateObj;\n\n        \n        if (classDatesCount === data.totalCourseDays && courseType === 'Basics') {\n            date = date.plus({ days: 2 }); \n            utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n            weekDay += 1;\n            week += 1;\n\n        } else {\n            // this is the end of the dayArray (last day of the week)\n            if ( dayIndex === dayArray.length -1) {\n                weekDay = 1;\n                week += 1;\n                dateWeek = dateWeek.plus({ weeks: 1 });\n                // return to beginning of array (return to beginning of week)\n                dayIndex = 0;\n                date = date.plus({ weeks: 1 }).set({ weekday: dayArray[dayIndex] })\n                utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n\n            } else {\n                // day with the week\n                dayIndex += 1;\n                date = date.set({ weekday: dayArray[dayIndex] })\n                utc = getLocalDateTime (utc, 'T13:00', courseName, courseType, date);\n\n                if (!phWithoutCh.includes(dateString)) {\n                    weekDay += 1;\n                }\n            }\n        }\n        // increase classDatesCount regardless of whether it is a public holiday\n        classDatesCount += 1;\n    }\n\n    return data;\n}\n\nexport default generateDataObject;","const download = (data, filename) => {\n        // from: https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\n        var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data));\n        var dlAnchorElem = document.createElement('a');\n        dlAnchorElem.setAttribute(\"href\",     dataStr     );\n        dlAnchorElem.setAttribute(\"download\", filename);\n        dlAnchorElem.click();\n    };\n\nexport default download;","import React , { useState } from 'react';\nimport generateDataObject from '../generateCourseDates.js';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport download from '../download.js';\n\nconst DatePicker = () => {\n    const [startDate, setStartDate] = useState('');\n    const [courseName, setCourseName] = useState('');\n    const [courseType, setCourseType] = useState('');\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n        const data = await generateDataObject(startDate, courseName, courseType);\n        console.log('data', data);\n            \n        download(data, `${data.courseName}.json`);\n        }\n        catch (error) {\n            console.log(error)\n        }\n    }\n\n    return (\n        <>\n        <div  className=\"date-picker\">\n            <div>\n                <h2>Course Schedule Markdown</h2>\n            </div>\n            <div className=\"input-form-container\">\n                <Form className=\"input-form\">\n                <Form.Group className=\"mb-3 input\" controlId=\"formDate\">\n                    <Form.Label>Start Date</Form.Label>\n                    <Form.Control type=\"date\" value={startDate} onChange={(e) => setStartDate(e.target.value)}/>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                    <Form.Label>Batch Number</Form.Label>\n                    <Form.Control type=\"number\" value={courseName} onChange={(e) => setCourseName(e.target.value)}/>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n                <Form.Label>Course Type</Form.Label>\n                <Form.Select aria-label=\"Default select example\" onChange={(e) => setCourseType(e.target.value)}>\n                    <option>Select course type</option>\n                    <option value=\"Basics\">Basics</option>\n                    <option value=\"Bootcamp FT\">Bootcamp FT</option>\n                    <option value=\"Bootcamp PT\">Bootcamp PT</option>\n                </Form.Select>\n                </Form.Group>\n                <br></br>\n                <div className=\"submit-button-container\">\n                    <Button variant=\"primary\" type=\"submit\" onClick={(e) => {handleSubmit(e)}}>\n                        Download File\n                    </Button>\n                </div>\n                </Form>\n                <br></br>\n                <br></br>\n                <div>\n                    <a href=\"https://github.com/rocketacademy/scheduler\">link to GitHub repo</a>\n                </div>\n            </div>\n        </div>\n        </>\n    )\n}\n\nexport default DatePicker;\n","import React, { useState } from 'react';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nfunction ClassItem({\n    setBootcampDataCopy, \n    section, \n    bootcampDataCopy, \n    classType, \n    sectionType, \n    item, \n    dayIndex, \n    classIndex\n}) {\n    // toggle visibility of buttons\n    const [buttonsVisible, setButtonsVisible] = useState(false);\n    \n    const handleShift = (direction, dayIndex, classIndex) => {\n        \n        // set selectedItem to item chosen\n        let selectedItem = sectionType[classType].items[classIndex];\n        let nextDay;\n        let previousDay;\n        // remove selected item from original position\n        sectionType[classType].items.splice(classIndex, 1);\n\n        // if items array is empty after removing selected item, remove empty items array\n        if (sectionType[classType].items.length === 0) {\n            delete sectionType[classType].items;\n        }\n\n        // where item will be shifted when user clicks down button (same section/class of next day )\n        if (bootcampDataCopy[dayIndex + 1]) {\n            nextDay = bootcampDataCopy[dayIndex + 1].dateTypes[section];\n        }\n\n        // where item will be shifted when user clicks down button (same section/class of previous day )\n        if (bootcampDataCopy[dayIndex - 1]) {\n            previousDay = bootcampDataCopy[dayIndex - 1].dateTypes[section];\n        }\n\n        // helper function that adds selected item to new position \n        const shiftItem = (dayType) => {\n            if (!dayType[classType].items) {\n                dayType[classType].items = [];\n            } \n            dayType[classType].items.push(selectedItem);\n            setBootcampDataCopy([...bootcampDataCopy]);\n        }\n\n        if (direction === 'down') {\n            shiftItem(nextDay);\n        } else {\n            shiftItem(previousDay);\n        }\n    }\n\n    \n    return (\n        <div>\n            <div className=\"class-item\" onMouseEnter={() => setButtonsVisible(true)} onMouseLeave={() => setButtonsVisible(false)}>\n                {item.name}\n            {buttonsVisible && (\n            <div>\n                <button onClick={() => handleShift('up', dayIndex, classIndex)}><ExpandLessIcon /></button>\n                <button onClick={() => handleShift('down', dayIndex, classIndex)}><ExpandMoreIcon /></button>\n            </div>\n            )}\n            </div>\n            \n        </div>\n    )\n}\n\nexport default ClassItem\n","import React, { useState } from 'react';\nimport ClassItem from './ClassItem';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\n\nfunction SectionClass({\n    sectionIndex,\n    sectionclass,\n    sectionType, \n    bootcampDataCopy, \n    setBootcampDataCopy, \n    section, \n    dayIndex\n}) {\n    const [classButtonsVisible, setClassButtonsVisible] = useState(false);\n\n    // helper function that maps each element in section array to a new course day\n    const shiftSection = (sectionArray, startDay, bootcampDataCopy) => {\n        sectionArray.forEach((element, index) => {\n            console.log('day index', dayIndex);\n            if ( element !== null) {\n                if (bootcampDataCopy[startDay + index].dateTypes[section][sectionclass].items) {\n                    sectionArray[index].forEach((item) => {\n                        bootcampDataCopy[startDay + index].dateTypes[section][sectionclass].items.push(item);\n                    })\n                } else {\n                    bootcampDataCopy[startDay + index].dateTypes[section][sectionclass].items = sectionArray[index];\n                }\n            }\n        })\n        return bootcampDataCopy;\n    }\n\n    const handleClassShift = (direction, dayIndex) => {\n        // puts all the items in selected class in an array and deletes them from their original position \n        const sectionArray = [];\n        for (let i = dayIndex; i < bootcampDataCopy.length -1; i += 1) {\n            if (bootcampDataCopy[i].dateTypes[section][sectionclass].items) {\n                const selectedSection = bootcampDataCopy[i].dateTypes[section][sectionclass].items;\n                sectionArray.push(selectedSection);\n                delete bootcampDataCopy[i].dateTypes[section][sectionclass].items;\n            } else {\n                sectionArray.push(null);\n            }\n        };\n        \n        let startDay;\n        // when user clicks the down button, items are put into section/class of the next day \n        if (direction === 'down') {\n            startDay = dayIndex + 1;\n            bootcampDataCopy = shiftSection(sectionArray, startDay, bootcampDataCopy);\n        } else {\n            // when user clicks the up button, items are put into section/class of the previous day\n            startDay = dayIndex - 1;\n            bootcampDataCopy = shiftSection(sectionArray, startDay, bootcampDataCopy);\n        }\n        \n        \n        console.log('boot camp data copy', bootcampDataCopy);\n        setBootcampDataCopy([...bootcampDataCopy]);\n    }\n\n    return (\n            <div>\n                {sectionType[sectionclass].items && (\n                    <div className=\"section-class\">\n                        <div className=\"section-class-header\" onMouseEnter={() => setClassButtonsVisible(true)} onMouseLeave={() => setClassButtonsVisible(false)}>\n                            {sectionclass}\n                            {classButtonsVisible && (\n                            <div >\n                                <button onClick={() => handleClassShift('up', dayIndex, sectionIndex)}><ExpandLessIcon /></button>\n                                <button onClick={() => handleClassShift('down', dayIndex, sectionIndex)}><ExpandMoreIcon /></button>\n                            </div>\n                            )}\n                        </div>\n                        {sectionType[sectionclass].items.map((item, classIndex) =>\n                            <ClassItem\n                                sectionclass={sectionclass} \n                                bootcampDataCopy={bootcampDataCopy} \n                                setBootcampDataCopy={setBootcampDataCopy} \n                                section={section} classType={sectionclass} \n                                sectionType={sectionType} \n                                item={item} \n                                dayIndex={dayIndex} \n                                classIndex={classIndex} \n                                />                \n                        )}\n                    </div>\n                )}\n            </div>\n\n                \n    )\n}\n\nexport default SectionClass;\n","import React from 'react';\nimport SectionClass from './SectionClass';\n\nfunction Section({\n    setBootcampDataCopy, \n    section, \n    sectionType, \n    dayIndex, \n    bootcampDataCopy\n}) {\n    // variable classExists is created to track if any class of a section exists (it is initially set to false)\n    // if any class of a section exists, classExists is set to true\n    // if classExists is true, a header for this section will be created\n    let classExists = false;\n    if (sectionType.constructor === Object) {\n        if ((sectionType.preClass.items || sectionType.inClass.items ||sectionType.postClass.items) ||\n           (sectionType === 'projects' && (sectionType.projectDue.items || sectionType.projectStart.items)) ||\n           (sectionType === 'cp' && sectionType.cpDue.items)) {\n            classExists = true;\n        }\n    }\n    \n\n    return (\n        <div>\n            {sectionType.constructor === Object && (\n            <>\n                {classExists && (\n                   <>\n                   {sectionType.type}\n                   </>\n                )}\n                {Object.keys(sectionType).filter(sectionClass => sectionType[sectionClass].items).map((sectionclass, sectionIndex) => {\n                    return (\n                        <>\n                            <SectionClass\n                                sectionIndex={sectionIndex} \n                                sectionclass={sectionclass} \n                                sectionType={sectionType} \n                                bootcampDataCopy={bootcampDataCopy} \n                                setBootcampDataCopy={setBootcampDataCopy} \n                                section={section} \n                                dayIndex={dayIndex} \n                                />\n                        </>\n                    )\n                })}\n            </>\n            )}\n        </div>\n    )\n}\n\nexport default Section\n","import React, { useState } from 'react';\nimport bootcampData from '../data/bootcamp-course-days.json';\nimport Section from './Section';\nimport Button from 'react-bootstrap/Button';\nimport download from '../download.js';\n\nconst DataShift = () => {\n    const [bootcampDataCopy, setBootcampDataCopy] = useState(JSON.parse(JSON.stringify(bootcampData.days)));\n\n    const handleDownloadClick = () => {\n        bootcampData.days = bootcampDataCopy;\n        console.log('bootcamp data', bootcampData);\n        download(bootcampData, 'modified-bootcamp-data.json');\n    }\n\n    return (\n        <>\n            <div className=\"datashift-button-container\">\n                <Button variant=\"primary\" type=\"submit\" onClick={handleDownloadClick}>\n                    Download Modified File\n                </Button>\n            </div>\n            <div className=\"data-shift\">\n                {bootcampDataCopy.map((day, dayIndex) => {\n                    return (\n                        <div className=\"course-day\">\n                            <div className=\"course-day-header\" key={day.courseDay}>Course Day: {day.courseDay}</div>\n                            <div key={day.dateTypes.module}>{day.dateTypes.module}</div>\n                            <br></br>\n                            <div>\n                                {Object.keys(day.dateTypes).map(section =>                                    \n                                    <Section \n                                        setBootcampDataCopy={setBootcampDataCopy} \n                                        section={section} \n                                        sectionType={day.dateTypes[section]} \n                                        dayIndex={dayIndex} \n                                        bootcampDataCopy={bootcampDataCopy} \n                                        />\n                                )} \n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n        </>\n    )\n}\n\nexport default DataShift;\n","import React, { useState } from 'react';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport DatePicker from './DatePicker';\nimport DataShift from './DataShift';\n\nconst TabsContainer = () => {\n  const [key, setKey] = useState('datePicker');\n\n  return (\n    <Tabs\n      id=\"controlled-tab-example\"\n      activeKey={key}\n      onSelect={(k) => setKey(k)}\n      className=\"mb-3\"\n    >\n      <Tab eventKey=\"datePicker\" title=\"Generate schedule\">\n        <DatePicker />\n      </Tab>\n      <Tab eventKey=\"dataShift\" title=\"Edit schedule\">\n        <DataShift />\n      </Tab>\n    </Tabs>\n  );\n}\n\nexport default TabsContainer;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport TabsContainer from './components/Tabs';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TabsContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}