{"version":3,"sources":["components/admin/main-accordion/AddItemModal.jsx","components/admin/main-accordion/inner-accordion/ShiftItemModal.jsx","components/admin/main-accordion/inner-accordion/ClassItem.jsx","components/admin/main-accordion/inner-accordion/SectionClass.jsx","components/admin/main-accordion/inner-accordion/Section.jsx","components/admin/main-accordion/MainAccordion.jsx","download.js","components/admin/GenerateDataShiftContent.jsx","components/admin/data-shift/ActiveCourses.jsx","generateCourseDates.js","components/schedules/GenerateCourseDayHeader.jsx","components/admin/data-shift/DatePicker.jsx","components/admin/data-shift/DataShift.jsx","components/admin/Tabs.jsx","assets/4-MILK.png","components/schedules/DisplaySection.jsx","components/schedules/GenerateNotifications.jsx","generateSectionArray.js","components/schedules/GenerateDatetypeSections.jsx","components/schedules/GenerateCourseDayContent.jsx","components/schedules/schedule-table/TableSectionContent.jsx","components/schedules/schedule-table/TableClass.jsx","components/schedules/schedule-table/TableProjects.jsx","components/schedules/schedule-table/ScheduleTable.jsx","generateTableData.js","components/schedules/schedule-table/ContentTable.jsx","components/schedules/current-day/CurrentDaySection.jsx","components/schedules/ScheduleContent.jsx","components/schedules/sidebar/CourseWeeks.jsx","components/schedules/sidebar/SideBar.jsx","components/schedules/BatchSchedule.jsx","components/schedules/ScheduleContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddItemModal","show","onHide","bootcampdatacopy","setbootcampdatacopy","coursedate","useState","title","setTitle","url","setUrl","section","setSection","sectionClass","setSectionClass","Modal","size","centered","Header","closeButton","Title","id","Body","Form","Group","className","controlId","Label","Control","type","placeholder","value","onChange","e","target","Select","Button","variant","onClick","preventDefault","newItem","name","dateTypes","items","push","handleAddItem","Footer","ShiftItemModal","heading","shiftitem","sectiontype","classtype","classindex","selectedDate","setSelectedDate","direction","dates","map","date","courseDay","selectedItem","splice","length","targetDay","constructor","Array","handleSubmitDate","addDates","datesArray","includes","addIndex","bootcampDataCopy","indexOf","ClassItem","setBootcampDataCopy","classType","sectionType","item","dayIndex","classIndex","modalShow","setModalShow","shiftItem","setShiftItem","handleShift","Object","keys","filter","SectionClass","day","sectionclass","sectionIndex","handleClassShift","sectionArray","i","selectedSection","startDay","forEach","element","index","shiftSection","Section","classExists","preClass","inClass","postClass","projectDue","projectStart","cpDue","Accordion","Item","eventKey","MainAccordion","setShowInputModal","setCourseDate","module","console","log","handlePlusClick","courseWeek","download","data","filename","dataStr","encodeURIComponent","JSON","stringify","dlAnchorElem","document","createElement","setAttribute","click","GenerateDataShiftContent","showInputModal","courseDate","courseName","ActiveCourses","batchArray","Nav","batch","Link","parse","content","days","publicHolidays","holidayData","PH","publicHolidayArray","key","companyHolidays","company","companyHolidayArray","winterBreak","phWithoutCh","holiday","localDate","formattedDate","meetingTime","timeZone","timeOffset","getLocalDateTime","utc","timeString","courseType","changedFormat","toFormat","DateTime","fromISO","zone","toUTC","toISO","Number","weekday","generateHolidayObject","dateString","week","dateObj","dayNumber","generateCourseDayObject","weekDay","meetingDateTimeUTC","basicsData","bootcampData","generateDataObject","startDate","fromFormat","courseDayCount","dateWeek","classDatesCount","dayArray","topLevelObject","daysOfWeek","courseStartIndex","totalCourseDays","bootcampDays","startIndex","fullTime","partTime","generateTopLevelObject","displayDate","displayName","plus","weeks","set","DatePicker","setStartDate","setCourseName","setCourseType","handleDownload","a","handleRender","href","DataShift","TabsContainer","setKey","batchDataCopy","setBatchDataCopy","mainDataFile","mainDataCopy","setMainDataCopy","Tabs","activeKey","onSelect","k","Tab","NormalCourseDay","todaySectionHeader","timeZoneSet","HolidayCourseDay","holidayType","location","GenerateCourseDayHeader","coursetype","DisplaySection","GenerateNotifications","status","projectdue","cpdue","projectstart","generateSectionArray","datetype","classTypeSection","x","GenerateDatetypeSections","GenerateCourseDayContent","projects","cp","TableSectionContent","TableClass","classArray","TableProjects","ScheduleTable","weekNumbers","tableData","today","now","num","Table","bordered","hover","scroller","scrollTo","smooth","offset","duration","generateTableData","scheduleData","setWeekNumbers","setTableData","firstDay","moveDate","lastDay","firstDayMonth","lastDayMonth","moveDateMonth","startOf","endOf","weekDatesArray","monthDatesArray","currentWeekData","currentMonthData","ContentTable","useEffect","findPreviousDay","dayBefore","findNextDay","nextDay","CurrentDaySection","previousDay","currentDayId","previousDayId","ScheduleContent","nextToday","months","defaultActiveKey","CourseWeeks","myRef","current","scrollIntoView","block","CurrentWeekDiv","ref","firstDayOfWeek","lastDayOfWeek","weeksDates","weekNumber","useRef","navbarScroll","navId","sidebarId","SideBar","BatchSchedule","ScheduleContainer","useRouteMatch","path","Navbar","bg","Brand","src","logo","alt","as","to","toUpperCase","exact","App","ptbc1","ftbc3","ftbc4","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"+OA6HeA,MAxHf,YAMI,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,OACAC,EAGC,EAHDA,iBACAC,EAEC,EAFDA,oBACAC,EACC,EADDA,WAGA,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsBF,mBAAS,IAA/B,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,IAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KA0BA,OAEE,cADA,CACCC,EAAA,EAAD,CACEd,KAAMA,EACNC,OAAQA,EACRc,KAAK,KACL,kBAAgB,kBAChBC,UAAQ,EALV,UAOE,cAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,CAAaC,GAAG,kBAAhB,2BAEF,cAACN,EAAA,EAAMO,KAAP,UACE,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,OAAOC,UAAU,QAAvC,UACE,cAACH,EAAA,EAAKI,MAAN,oBACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLC,YAAY,cACZC,MAAOxB,EACPyB,SAAU,SAACC,GAAD,OAAOzB,EAASyB,EAAEC,OAAOH,aAIvC,eAACR,EAAA,EAAKC,MAAN,CAAYC,UAAU,OAAOC,UAAU,MAAvC,UACE,cAACH,EAAA,EAAKI,MAAN,kBACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLC,YAAY,YACZC,MAAOtB,EACPuB,SAAU,SAACC,GAAD,OAAOvB,EAAOuB,EAAEC,OAAOH,aAIrC,cAACR,EAAA,EAAKI,MAAN,sBACA,eAACJ,EAAA,EAAKY,OAAN,CACEV,UAAU,OACV,aAAW,WACXO,SAAU,SAACC,GAAD,OAAOrB,EAAWqB,EAAEC,OAAOH,QAHvC,UAKE,oDACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,MAAd,oBAGF,cAACR,EAAA,EAAKI,MAAN,qBACA,eAACJ,EAAA,EAAKY,OAAN,CACEV,UAAU,OACV,aAAW,WACXO,SAAU,SAACC,GAAD,OAAOnB,EAAgBmB,EAAEC,OAAOH,QAH5C,UAKE,uDACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,UAAd,qBACa,aAAZpB,GACC,qCACE,wBAAQoB,MAAM,aAAd,wBACA,wBAAQA,MAAM,eAAd,6BAGS,OAAZpB,GAAoB,wBAAQoB,MAAM,QAAd,sBAEvB,cAACK,EAAA,EAAD,CACEC,QAAQ,UACRR,KAAK,SACLS,QAAS,SAACL,GAAD,OA7FG,SAACA,GACrBA,EAAEM,iBAGF,IAAMC,EAAU,CACdC,KAAMlC,EACNE,IAAKA,GAIFN,EAAiBE,GAAYqC,UAAU/B,GAASE,GAAc8B,QACjExC,EAAiBE,GAAYqC,UAAU/B,GAASE,GAAc8B,MAAQ,IAIxExC,EAAiBE,GAAYqC,UAAU/B,GAASE,GAAc8B,MAAMC,KAClEJ,GAIFpC,EAAoB,eAAKD,IAyED0C,CAAcZ,IAHhC,yBASJ,cAAClB,EAAA,EAAM+B,OAAP,UACE,cAACV,EAAA,EAAD,CAAQE,QAASpC,EAAjB,yB,oFCVO6C,MAvGf,YAUI,IAGEC,EAZJ/C,EASC,EATDA,KACAC,EAQC,EARDA,OACA+C,EAOC,EAPDA,UACA9C,EAMC,EANDA,iBACAC,EAKC,EALDA,oBACA8C,EAIC,EAJDA,YACAC,EAGC,EAHDA,UACAC,EAEC,EAFDA,WACAzC,EACC,EADDA,QAEA,EAAwCL,mBAAS,IAAjD,mBAAO+C,EAAP,KAAqBC,EAArB,KAqCA,OAjCEN,EAD0B,OAAxBC,EAAUM,UACF,mBAEA,sBAgCV,eAACxC,EAAA,EAAD,CACEd,KAAMA,EACNgD,UAAWA,EACX/C,OAAQA,EACRc,KAAK,KACL,kBAAgB,aAChBC,UAAQ,EANV,UAQE,cAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,CAAaC,GAAG,aAAhB,SAA8B2B,MAEhC,cAACjC,EAAA,EAAMO,KAAP,UACE,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKY,OAAN,CACEV,UAAU,OACV,aAAW,OACXO,SAAU,SAACC,GAAD,OAAOqB,EAAgBrB,EAAEC,OAAOH,QAH5C,UAKE,wCACCkB,EAAUO,MAAMC,KAAI,SAACC,GACpB,MAAoB,kBAATA,EAEP,qCACE,yBAAQ3B,MAAO2B,EAAf,iBACOvD,EAAiBuD,GAAMC,aAFhC,OASA,qCACE,wBAAQ5B,MAAO2B,EAAf,SAAsBA,IADxB,aAOR,cAACtB,EAAA,EAAD,CACEC,QAAQ,UACRR,KAAK,SACLS,QAAS,SAACL,GAAD,OAtEM,SAACA,GACxBA,EAAEM,iBAEF,IAAIqB,EAAeV,EAAYC,GAAWR,MAAMS,GAEhDF,EAAYC,GAAWR,MAAMkB,OAAOT,EAAY,GAGJ,IAAxCF,EAAYC,GAAWR,MAAMmB,eACxBZ,EAAYC,GAAWR,MAGhC,IAAMoB,EAAY5D,EAAiBkD,GAAcX,UAAU/B,GAGtDoD,EAAUZ,GAAWR,QACxBoB,EAAUZ,GAAWR,MAAQ,IAI/BoB,EAAUZ,GAAWR,MAAMC,KAAKgB,GAGhCzD,EAAiB6D,cAAgBC,MAC7B7D,EAAoB,YAAID,IACxBC,EAAoB,eAAKD,IA6CL+D,CAAiBjC,IAHnC,yBASJ,cAAClB,EAAA,EAAM+B,OAAP,UACE,cAACV,EAAA,EAAD,CAAQE,QAASpC,EAAjB,yBC/FFiE,EAAW,SAACC,EAAYV,GAI5B,OAHKU,EAAWC,SAASX,IACvBU,EAAWxB,KAAKc,GAEXU,GAGHE,EAAW,SAACC,EAAkBH,EAAYV,GAI9C,OAHKU,EAAWC,SAASE,EAAiBC,QAAQd,KAChDU,EAAWxB,KAAK2B,EAAiBC,QAAQd,IAEpCU,GA+HMK,MA3Hf,YASI,IARFC,EAQC,EARDA,oBACA/D,EAOC,EAPDA,QACA4D,EAMC,EANDA,iBACAI,EAKC,EALDA,UACAC,EAIC,EAJDA,YACAC,EAGC,EAHDA,KACAC,EAEC,EAFDA,SACAC,EACC,EADDA,WAGA,EAAkCzE,oBAAS,GAA3C,mBAAO0E,EAAP,KAAkBC,EAAlB,KAEA,EAAkC3E,mBAAS,CACzCiD,UAAW,KACXC,MAAO,KAFT,mBAAO0B,EAAP,KAAkBC,EAAlB,KAMMC,EAAc,SAAC7B,EAAWuB,EAAUC,GAExC,IAAIX,EAAa,GAGC,OAAdb,GAEFgB,EAAiBP,cAAgBqB,OAC7BA,OAAOC,KAAKf,GACTgB,QACC,SAAC7B,GAAD,OACEa,EAAiBb,GAAMC,UAAYmB,EAAW,GACT,OAArCP,EAAiBb,GAAMC,aAE1BF,KAAI,SAACC,GACJU,EAAaD,EAASC,EAAYV,MAEtCa,EACGgB,QAAO,SAAC7B,GAAD,OAAUa,EAAiBC,QAAQd,GAAQoB,KAClDrB,KAAI,SAACC,GACJU,EAAaE,EAASC,EAAkBH,EAAYV,MAI5DyB,EAAa,2BACRD,GADO,IAEV3B,UAAW,KACXC,MAAOY,KAGTa,GAAa,IAEU,SAAd1B,GACTgB,EAAiBP,cAAgBqB,OAC7BA,OAAOC,KAAKf,GACTgB,QACC,SAAC7B,GAAD,OACEa,EAAiBb,GAAMC,UAAYmB,EAAW,GACT,OAArCP,EAAiBb,GAAMC,aAE1BF,KAAI,SAACC,GACJU,EAAaD,EAASC,EAAYV,MAEtCa,EACGgB,QAAO,SAAC7B,GAAD,OAAUa,EAAiBC,QAAQd,GAAQoB,KAClDrB,KAAI,SAACC,GACJU,EAAaE,EAASC,EAAkBH,EAAYV,MAG5DyB,EAAa,2BACRD,GADO,IAEV3B,UAAW,OACXC,MAAOY,KAGTa,GAAa,KAGbL,EAAYD,GAAWhC,MAAMkB,OAAOkB,EAAY,GAChDL,EAAoB,eAAKH,MAI7B,OACE,8BACE,sBACE9C,UAAU,aADZ,UAGGoD,EAAKpC,KAEJ,gCAEE,wBAAQhB,UAAU,YAAYa,QAAS,kBAAM8C,EAAY,SAAUN,EAAUC,IAA7E,SACE,cAAC,IAAD,MAGF,wBAAQzC,QAAS,kBAAM8C,EAAY,KAAMN,EAAUC,IAAnD,SACE,cAAC,IAAD,MAGF,wBAAQzC,QAAS,kBAAM8C,EAAY,OAAQN,EAAUC,IAArD,SACE,cAAC,IAAD,SAILC,GAEC,cAAC,EAAD,CACE/E,KAAM+E,EACN9E,OAAQ,kBAAM+E,GAAa,IAC3BhC,UAAWiC,EACX/E,iBAAkBoE,EAClBnE,oBAAqBsE,EACrBxB,YAAa0B,EACbzB,UAAWwB,EACXvB,WAAY2B,EACZpE,QAASA,UCvBN6E,MA9Gf,YASI,IARFC,EAQC,EARDA,IAEAC,GAMC,EAPDC,aAOC,EANDD,cACAd,EAKC,EALDA,YACAL,EAIC,EAJDA,iBACAG,EAGC,EAHDA,oBACA/D,EAEC,EAFDA,QACAmE,EACC,EADDA,SA0BMc,EAAmB,SAACrC,EAAWuB,GAGnC,IADA,IAAMe,EAAe,GACZC,EAAIhB,EAAUgB,EAAIvB,EAAiBT,OAAS,EAAGgC,GAAK,EAC3D,GAAIvB,EAAiBuB,GAAGpD,UAAU/B,GAAS+E,GAAc/C,MAAO,CAC9D,IAAMoD,EACJxB,EAAiBuB,GAAGpD,UAAU/B,GAAS+E,GAAc/C,MACvDkD,EAAajD,KAAKmD,UACXxB,EAAiBuB,GAAGpD,UAAU/B,GAAS+E,GAAc/C,WAE5DkD,EAAajD,KAAK,MAatB2B,EA7CmB,SAACsB,EAAcG,EAAUzB,GAmB5C,OAlBAsB,EAAaI,SAAQ,SAACC,EAASC,GACb,OAAZD,IAEA3B,EAAiByB,EAAWG,GAAOzD,UAAU/B,GAAS+E,GACnD/C,MAEHkD,EAAaM,GAAOF,SAAQ,SAACpB,GAC3BN,EAAiByB,EAAWG,GAAOzD,UAAU/B,GAC3C+E,GACA/C,MAAMC,KAAKiC,MAGfN,EAAiByB,EAAWG,GAAOzD,UAAU/B,GAC3C+E,GACA/C,MAAQkD,EAAaM,OAItB5B,EA0BY6B,CAAaP,EAPd,SAAdtC,EACSuB,EAAW,EAGXA,EAAW,EAGgCP,GACxDG,EAAoB,YAAIH,KAG1B,OACE,8BACGK,EAAYc,GAAc/C,OACzB,sBAAKlB,UAAU,gBAAf,UACE,qBAAKA,UAAU,cAAf,SAA8BiE,IAC9B,qBAAKjE,UAAU,cAAf,SACGmD,EAAYc,GAAc/C,MAAMc,KAAI,SAACoB,EAAME,GAC1C,OACE,cAAC,EAAD,CACEU,IAAKA,EACLC,aAAcA,EACdnB,iBAAkBA,EAClBG,oBAAqBA,EACrB/D,QAASA,EACTgE,UAAWe,EACXd,YAAaA,EACbC,KAAMA,EACNC,SAAUA,EACVC,WAAYA,SAKpB,qBACEtD,UAAU,uBADZ,SAII,gCACE,wBACEa,QAAS,kBAAMsD,EAAiB,KAAMd,IADxC,SAGE,cAAC,IAAD,MAEF,wBACExC,QAAS,kBACPsD,EAAiB,OAAQd,IAF7B,SAKE,cAAC,IAAD,iBCtCHuB,MA9Df,YAOI,IANFZ,EAMC,EANDA,IACAf,EAKC,EALDA,oBACA/D,EAIC,EAJDA,QACAiE,EAGC,EAHDA,YACAE,EAEC,EAFDA,SACAP,EACC,EADDA,iBAKI+B,GAAc,EAclB,OAbI1B,EAAYZ,cAAgBqB,SAE5BT,EAAY2B,SAAS5D,OACrBiC,EAAY4B,QAAQ7D,OACpBiC,EAAY6B,UAAU9D,OACL,aAAhBiC,IACEA,EAAY8B,WAAW/D,OAASiC,EAAY+B,aAAahE,QAC3C,OAAhBiC,GAAwBA,EAAYgC,MAAMjE,SAE3C2D,GAAc,GAKhB,8BACG1B,EAAYZ,cAAgBqB,QAC3B,mCACE,cAACwB,EAAA,EAAD,UACGP,GACC,eAACO,EAAA,EAAUC,KAAX,CAAgBC,SAAS,IAAzB,UACE,cAACF,EAAA,EAAU3F,OAAX,UAAmB0D,EAAY/C,OAC/B,cAACgF,EAAA,EAAUvF,KAAX,UACG+D,OAAOC,KAAKV,GACVW,QAAO,SAAC1E,GAAD,OAAkB+D,EAAY/D,GAAc8B,SACnDc,KAAI,SAACiC,EAAcC,GAClB,OACE,qBAAKlE,UAAU,cAAf,SACE,cAAC,EAAD,CACEgE,IAAKA,EACLE,aAAcA,EACdD,aAAcA,EACdd,YAAaA,EACbL,iBAAkBA,EAClBG,oBAAqBA,EACrB/D,QAASA,EACTmE,SAAUA,qBCuBvBkC,MArEf,YASI,IARFlC,EAQC,EARDA,SACAP,EAOC,EAPDA,iBACAG,EAMC,EANDA,oBACAe,EAKC,EALDA,IACAwB,EAIC,EAJDA,kBACAC,EAGC,EAHDA,cAUA,OACE,8BACG3C,EAAiBkB,GAAK/C,UAAUyE,QAC/B,cAACN,EAAA,EAAD,UACE,eAACA,EAAA,EAAUC,KAAX,CAAgBC,SAAUjC,EAA1B,UACE,eAAC+B,EAAA,EAAU3F,OAAX,WACE,sBACEO,UAAU,oBACVa,QAAS,kBAdC,SAACmD,GACvB2B,QAAQC,IAAI5B,GACZyB,EAAczB,GACdwB,GAAkB,GAWSK,CAAgB7B,IAFjC,UAIG,IACD,cAAC,IAAD,OAEF,qBAAKhE,UAAU,oBAAf,SACG8C,EAAiBP,cAAgBqB,OAChC,qCACGI,EADH,WACgBlB,EAAiBkB,GAAK8B,WADtC,gBAC+D,IAC5DhD,EAAiBkB,GAAK9B,UAFzB,IAEqC,IAClCY,EAAiBkB,GAAK/C,UAAUyE,OAAQ,OAG3C,oDACe5C,EAAiBkB,GAAK9B,UADrC,IACiD,IAC9CY,EAAiBkB,GAAK/C,UAAUyE,OAAQ,YAKjD,cAACN,EAAA,EAAUvF,KAAX,UACE,qBAAKG,UAAU,aAAf,SACE,8BACG4D,OAAOC,KAAKf,EAAiBkB,GAAK/C,WAAWe,KAC5C,SAAC9C,GAAD,OACE,cAAC,EAAD,CACE8E,IAAKA,EACLf,oBAAqBA,EACrB/D,QAASA,EACTiE,YAAaL,EAAiBkB,GAAK/C,UAAU/B,GAC7CmE,SAAUA,EACVP,iBAAkBA,qBCnD3BiD,EATE,SAACC,EAAMC,GAEhB,IAAIC,EAAU,gCAAkCC,mBAAmBC,KAAKC,UAAUL,IAC9EM,EAAeC,SAASC,cAAc,KAC1CF,EAAaG,aAAa,OAAYP,GACtCI,EAAaG,aAAa,WAAYR,GACtCK,EAAaI,SCwGNC,EAxGkB,SAAC,GAG3B,IAFL7D,EAEI,EAFJA,iBACAG,EACI,EADJA,oBAEA,EAA4CpE,oBAAS,GAArD,mBAAO+H,EAAP,KAAuBpB,EAAvB,KACA,EAAoC3G,mBAAS,IAA7C,mBAAOgI,EAAP,KAAmBpB,EAAnB,KAeA,OACE,qCAGG3C,EAAiBP,cAAgBqB,QAChCA,OAAOC,KAAKf,GAAkBT,OAAS,GACrC,gCACE,qBAAKrC,UAAU,4BAAf,SACE,cAACW,EAAA,EAAD,CACEC,QAAQ,UACRR,KAAK,SACLS,QAlBmB,WAC/BkF,EACEjD,EADM,mBAEMA,EAAiBgE,WAFvB,gBAcE,6BAQDlD,OAAOC,KAAKf,GAAkBd,KAAI,SAACgC,EAAKX,GACvC,OACE,mCACA,8BACE,cAAC,EAAD,CACEA,SAAUA,EACVP,iBAAkBA,EAClBG,oBAAqBA,EACrBe,IAAKA,EACLwB,kBAAmBA,EACnBC,cAAeA,WAOtBmB,GAAkBC,GACjB,cAAC,EAAD,CACErI,KAAMoI,EACNnI,OAAQ,kBAAM+G,GAAkB,IAChC9G,iBAAkBoE,EAClBnE,oBAAqBsE,EACrBuC,kBAAmBA,EACnB5G,WAAYiI,OAMrB/D,EAAiBP,cAAgBC,OAChC,sBAAKxC,UAAU,sBAAf,UACE,qBAAKA,UAAU,4BAAf,SACE,wBACEA,UAAU,kBACVa,QA/DoB,WAC9BkF,EAASjD,EAAkB,iCA4DnB,sCAODA,EAAiBd,KAAI,SAACgC,EAAKX,GAC1B,OACE,cAAC,EAAD,CACEA,SAAUA,EACVP,iBAAkBA,EAClBG,oBAAqBA,EACrBe,IAAKX,EACLmC,kBAAmBA,EACnBC,cAAeA,OAIpBmB,GAAkBC,GACjB,cAAC,EAAD,CACErI,KAAMoI,EACNnI,OAAQ,kBAAM+G,GAAkB,IAChC9G,iBAAkBoE,EAClBnE,oBAAqBsE,EACrBuC,kBAAmBA,EACnB5G,WAAYiI,W,QCvEXE,MA1Bf,YAA6D,IAApCC,EAAmC,EAAnCA,WAAY/D,EAAuB,EAAvBA,oBACnC,OACE,gCACE,yCACA,cAACgE,EAAA,EAAD,CAAKrG,QAAQ,QAAQZ,UAAU,eAA/B,SAEGgH,EAAWhF,KAAI,SAACkF,EAAOxC,GACtB,OACE,cAACuC,EAAA,EAAIE,KAAL,CAEEtG,QAAS,kBACPoC,EACEmD,KAAKgB,MAAMhB,KAAKC,UAAUa,EAAMG,QAAQC,SAG5ChC,SAAUZ,EAPZ,SASGwC,EAAMlG,gB,yDChBfuG,EAAiBC,EAAYC,GAC7BC,EAAqB,GAE3B9D,OAAOC,KAAK0D,GAAgBvF,KAAI,SAAC2F,EAAKjD,GAClCgD,EAAmBvG,KAAKwG,MAG5B,IAAMC,EAAkBJ,EAAYK,QAC9BC,EAAsB,GACtBC,EAAc,GAEpBnE,OAAOC,KAAK+D,GAAiB5F,KAAI,SAAC2F,EAAKjD,GACnCoD,EAAoB3G,KAAKwG,GAEQ,iBAA9BC,EAAgBD,GAAK3G,MACpB+G,EAAY5G,KAAKyG,EAAgBD,GAAK1F,SAI9C,IAAM+F,EAAc,GAEpBN,EAAmBlD,SAAQ,SAACyD,GACpBH,EAAoBlF,SAASqF,IAC7BD,EAAY7G,KAAK8G,MAKzB,IC4BIC,EACAC,EACAC,EACAC,EACAC,GACAL,GDjCEM,GAAmB,SAACC,EAAKC,EAAY3B,EAAY4B,EAAYzG,GAC/D,IAAM0G,EAAgB1G,EAAK2G,SAAS,cAYpC,MAXmB,WAAfF,EACAF,EAAMK,WAASC,QAAQH,EAAgBF,EAAY,CAACM,KAAM,cAAcC,QAAQC,QAC1D,gBAAfP,GAAgCQ,OAAOpC,GAAc,IAAM,EAClE0B,EAAMK,WAASC,QAAQH,EAAgB,SAAU,CAACI,KAAM,cAAcC,QAAQC,QACvD,gBAAfP,GAAgCQ,OAAOpC,GAAc,IAAM,GAAsB,gBAAf4B,GAAkD,IAAjBzG,EAAKkH,QAChHX,EAAMK,WAASC,QAAQH,EAAgB,SAAU,CAACI,KAAM,cAAcC,QAAQC,QACxD,gBAAfP,GAAkD,IAAjBzG,EAAKkH,QAC7CX,EAAMK,WAASC,QAAQH,EAAgB,SAAU,CAACI,KAAM,cAAcC,QAAQC,QACxD,gBAAfP,GAAkD,IAAjBzG,EAAKkH,UAC7CX,EAAMK,WAASC,QAAQH,EAAgB,SAAU,CAACI,KAAM,cAAcC,QAAQC,SAE3ET,GAkCLY,GAAwB,SAACC,EAAYC,EAAMrH,EAAMsH,GAenD,OAdAA,EAAU,CACNrH,UAAW,KACX2E,WAAYwC,EACZvD,WAAYwD,EACZE,UAAWvH,EAAKkH,QAChBlI,UAAW,IAGX+G,EAAYpF,SAASyG,GACrBE,EAAQtI,UAAYsG,EAAe8B,GAEnCE,EAAQtI,UAAY2G,EAAgByB,GAGjCE,GAILE,GAA0B,SAACF,EAASF,EAAYC,EAAMI,EAASzH,EAAMuG,EAAKE,EAAYxG,GAoBxF,OAlBAqH,EAAU,CACN1C,WAAYwC,EACZvD,WAAYwD,EACZI,QAASA,EACTF,UAAWvH,EAAKkH,QAChBQ,mBAAoBnB,GAIL,WAAfE,EACAa,EAAO,2BACAA,GAAYK,EAAWtC,KAAKpF,IAEb,gBAAfwG,GAA+C,gBAAfA,IACnCa,EAAO,2BACJA,GAAYM,EAAavC,KAAKpF,KAGlCqH,GAoGIO,GA9FY,SAACC,EAAWjD,EAAY4B,GAC/C,IACIF,EADAvG,EAAO4G,WAASmB,WAAWD,EAAW,cAE1CvB,EAAMD,GAAiBC,EAAK,SAAU1B,EAAY4B,EAAYzG,GAC9D,IAII+D,EACAiE,EALAC,EAAWrB,WAASmB,WAAWD,EAAW,cAC1CI,EAAkB,EAClBb,EAAO,EACPI,EAAU,EAIVxH,EAAY,EAUG,WAAfwG,EACAuB,EAAiB,GACK,gBAAfvB,GAA+C,gBAAfA,IACvCuB,EAAiB,KAMrB,IAHA,IAAMG,GATNpE,EA7F2B,SAAC0C,EAAY2B,GACpC,GAAmB,WAAf3B,EACA2B,EAAc,aACVC,WAAYV,EAAWU,WACvBC,iBAAkBX,EAAWW,iBAC7BC,gBAAiBZ,EAAWY,iBACzBH,QAEJ,GAAmB,gBAAf3B,GAA+C,gBAAfA,EAA8B,CACrE,IAAI+B,EACAC,EACe,gBAAfhC,GACA+B,EAAeZ,EAAaS,WAAWK,SACvCD,EAAab,EAAaU,iBAAiBI,WAE3CF,EAAeZ,EAAaS,WAAWM,SACvCF,EAAab,EAAaU,iBAAiBK,UAE/CP,EAAc,aACVC,WAAYG,EACZF,iBAAkBG,EAClBF,gBAAiBX,EAAaW,iBAC3BH,GAIX,OAAOA,EAmEJQ,CAAuBnC,EALT,CACbA,WAAYA,EACZpB,KAAM,MAYQgD,WAClBjH,EAAW2C,EAAKuE,iBAEbN,EAAiB,GAAG,CACvB,IAAMZ,EAAapH,EAAK2G,SAAS,cAIjC,GAAI1G,EAAY,IAAM8D,EAAKwE,gBAAiB,CAExC,IAAMM,EAAcjC,WAASmB,WAAWD,EAAW,cAC7CgB,EAAW,UAAMD,EAAYlC,SAAS,cAA3B,YAA4CS,EAA5C,iBAA+DvC,GAChFd,EAAKc,WAAaiE,EAGtB,IAAIxB,OAAO,EAEPvB,EAAYpF,SAASyG,IAAetB,EAAYnF,SAASyG,GACzDE,EAAUH,GAAuBC,EAAYC,EAAMrH,EAAMsH,IAIzDA,EAAUE,GAAyBF,EAASF,EAAYC,EAAMI,EAASzH,EAAMuG,EAAKE,EAAYxG,GAI9F+H,GAAkB,EAClB/H,GAAa,GAEjB8D,EAAKsB,KAAK+B,GAAcE,EAGpBY,IAAoBnE,EAAKwE,iBAAkC,WAAf9B,GAC5CzG,EAAOA,EAAK+I,KAAK,CAAE1D,KAAM,IACzBkB,EAAMD,GAAkBC,EAAK,SAAU1B,EAAY4B,EAAYzG,GAC/DyH,GAAW,EACXJ,GAAQ,GAIHjG,IAAa+G,EAAS/H,OAAQ,GAC/BqH,EAAU,EACVJ,GAAQ,EACRY,EAAWA,EAASc,KAAK,CAAEC,MAAO,IAElC5H,EAAW,EACXpB,EAAOA,EAAK+I,KAAK,CAAEC,MAAO,IAAKC,IAAI,CAAE/B,QAASiB,EAAS/G,KACvDmF,EAAMD,GAAkBC,EAAK,SAAU1B,EAAY4B,EAAYzG,KAI/DoB,GAAY,EACZpB,EAAOA,EAAKiJ,IAAI,CAAE/B,QAASiB,EAAS/G,KACpCmF,EAAMD,GAAkBC,EAAK,SAAU1B,EAAY4B,EAAYzG,GAE1D+F,EAAYpF,SAASyG,KACtBK,GAAW,IAKvBS,GAAmB,EAGvB,OAAOnE,GEjHImF,GAjGI,SAAC,GAA6B,IAA3BlI,EAA0B,EAA1BA,oBAEpB,EAAkCpE,mBAAS,IAA3C,mBAAOkL,EAAP,KAAkBqB,EAAlB,KACA,EAAoCvM,mBAAS,IAA7C,mBAAOiI,EAAP,KAAmBuE,EAAnB,KACA,EAAoCxM,mBAAS,IAA7C,mBAAO6J,EAAP,KAAmB4C,EAAnB,KAGMC,EAAc,uCAAG,WAAO/K,GAAP,eAAAgL,EAAA,+EAEA1B,GAAmBC,EAAWjD,EAAY4B,GAF1C,OAEb1C,EAFa,OAGnBD,EAASC,EAAD,UAAUA,EAAKc,WAAf,UAHW,gDAKnBnB,QAAQC,IAAR,MALmB,yDAAH,sDAUd6F,EAAY,uCAAG,WAAOjL,GAAP,eAAAgL,EAAA,+EAEE1B,GAAmBC,EAAWjD,EAAY4B,GAF5C,cAEX1C,EAFW,gBAGX/C,EAAoBmD,KAAKgB,MAAMhB,KAAKC,UAAUL,EAAKsB,QAHxC,uDAKjB3B,QAAQC,IAAR,MALiB,yDAAH,sDASlB,OACE,mCACE,sBAAK5F,UAAU,cAAf,UACE,8BACE,+DAEF,sBAAKA,UAAU,uBAAf,UACE,eAACF,EAAA,EAAD,CAAME,UAAU,aAAhB,UACE,eAACF,EAAA,EAAKC,MAAN,CAAYC,UAAU,aAAaC,UAAU,WAA7C,UACE,cAACH,EAAA,EAAKI,MAAN,yBACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLE,MAAOyJ,EACPxJ,SAAU,SAACC,GAAD,OAAO4K,EAAa5K,EAAEC,OAAOH,aAI3C,eAACR,EAAA,EAAKC,MAAN,CAAYC,UAAU,aAAaC,UAAU,kBAA7C,UACE,cAACH,EAAA,EAAKI,MAAN,2BACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,SACLE,MAAOwG,EACPvG,SAAU,SAACC,GAAD,OAAO6K,EAAc7K,EAAEC,OAAOH,aAI5C,eAACR,EAAA,EAAKC,MAAN,CAAYC,UAAU,aAAaC,UAAU,kBAA7C,UACE,cAACH,EAAA,EAAKI,MAAN,0BACA,eAACJ,EAAA,EAAKY,OAAN,CACE,aAAW,yBACXH,SAAU,SAACC,GAAD,OAAO8K,EAAc9K,EAAEC,OAAOH,QAF1C,UAIE,wDACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,cAAd,yBACA,wBAAQA,MAAM,cAAd,kCAIN,sBAAKN,UAAU,0BAAf,UACE,cAACW,EAAA,EAAD,CACEC,QAAQ,UACRR,KAAK,SACLS,QAAS,SAACL,GACRiL,EAAajL,IAJjB,6BASA,cAACG,EAAA,EAAD,CACEC,QAAQ,UACRR,KAAK,SACLS,QAAS,SAACL,GACR+K,EAAe/K,IAJnB,kCAUF,uBACA,8BACE,mBAAGkL,KAAK,6CAAR,4CCzDGC,GA/BG,SAAC,GAA2D,IAAzD3E,EAAwD,EAAxDA,WAAYlE,EAA4C,EAA5CA,iBAAkBG,EAA0B,EAA1BA,oBACjD,OACE,mCACE,sBAAKjD,UAAU,sBAAf,UACE,qBAAKA,UAAU,qBAAf,SAEE,cAAC,EAAD,CACEgH,WAAYA,EACZ/D,oBAAqBA,MAGzB,qBAAKjD,UAAU,aAAf,SACE,sBAAKA,UAAU,iBAAf,UAEE,cAAC,GAAD,CACE8C,iBAAkBA,EAClBG,oBAAqBA,IAGvB,cAAC,EAAD,CACE+D,WAAYA,EACZlE,iBAAkBA,EAClBG,oBAAqBA,eCepB2I,GAnCO,SAAC,GAAoB,IAAlB5E,EAAiB,EAAjBA,WACvB,EAAsBnI,mBAAS,cAA/B,mBAAO8I,EAAP,KAAYkE,EAAZ,KAEA,EAA0ChN,mBAAS,IAAnD,mBAAOiN,EAAP,KAAsBC,EAAtB,KAEA,EAAwClN,mBACtCuH,KAAKgB,MAAMhB,KAAKC,UAAU2F,EAAa1E,QADzC,mBAAO2E,EAAP,KAAqBC,EAArB,KAIA,OACE,eAACC,EAAA,EAAD,CACEvM,GAAG,yBACHwM,UAAWzE,EACX0E,SAAU,SAACC,GAAD,OAAOT,EAAOS,IACxBtM,UAAU,OAJZ,UAOE,cAACuM,EAAA,EAAD,CAAKjH,SAAS,aAAaxG,MAAM,OAAjC,SACE,cAAC,EAAD,CACEgE,iBAAkBmJ,EAClBhJ,oBAAqBiJ,MAIzB,cAACK,EAAA,EAAD,CAAKjH,SAAS,YAAYxG,MAAM,QAAhC,SACE,cAAC,GAAD,CACEkI,WAAYA,EACZlE,iBAAkBgJ,EAClB7I,oBAAqB8I,U,6CCnChB,OAA0B,mC,SJInCS,GAAkB,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,mBAAoBzI,EAA2B,EAA3BA,IAAK0I,EAAsB,EAAtBA,YAAsB,EAAT9M,GAO/D,OANAsI,EAAYW,WAASC,QAAQ9E,EAAI2F,mBAAoB,CAAEZ,KAAM2D,IAC7DvE,EAAgBD,EAAUU,SAAS,aACnCR,EAAcF,EAAUU,SAAS,KACjCN,GAAaJ,EAAUU,SAAS,QAChCP,EAAWH,EAAUU,SAAS,KAG5B,mCACGP,IAAaqE,GACZ,sBAAK1M,UAAU,kBAAf,UACE,qBAAKA,UAAU,cAAf,SACIyM,EAMA,oBAAIzM,UAAU,aAAd,SAA4BmI,IAL5B,qBAAInI,UAAU,aAAd,UACGmI,EADH,UACyBnE,EAAI8B,WAD7B,eACqD,IAClD9B,EAAI9B,eAMX,+CACiBkG,EADjB,SACoCE,GADpC,OAGA,4BAAItE,EAAI/C,UAAUyE,eAQtBiH,GAAmB,SAAC,GAAiD,EAA/CF,mBAAgD,IAA5BzI,EAA2B,EAA3BA,IAAK0I,EAAsB,EAAtBA,YAAsB,EAAT9M,GAYhE,OAXAsI,EAAYW,WAASmB,WAAWhG,EAAI6C,WAAY,cAChDsB,EAAgBD,EAAUU,SAAS,aACnCP,EAAWH,EAAUU,SAAS,KAI5BX,GADgC,mBAA9BjE,EAAI/C,UAAU2L,YACT,0BAAsB5I,EAAI/C,UAAUD,KAApC,KAEA,2BAAuBgD,EAAI/C,UAAUD,KAArC,KAIP,mCACGqH,IAAaqE,GACZ,qBAAK1M,UAAU,cAAf,SACE,+BACGmI,EADH,KACoBnE,EAAI/C,UAAU4L,SADlC,IAC6C5E,WA0CxC6E,GAvBiB,SAAC,GAA6C,IAA3CL,EAA0C,EAA1CA,mBAAoBzI,EAAsB,EAAtBA,IAE/C0I,GAFqE,EAAjBK,WAEtC,kBAEpB,OAAI/I,EAAI2F,mBAEJ,cAAC,GAAD,CACE8C,mBAAoBA,EACpBzI,IAAKA,EACL0I,YAAaA,IAKf,cAAC,GAAD,CACED,mBAAoBA,EACpBzI,IAAKA,EACL0I,YAAaA,KK1DNM,OA5Bf,YAAwD,IAA9BzL,EAA6B,EAA7BA,QAAS4B,EAAoB,EAApBA,YAAaa,EAAO,EAAPA,IAC9C,OACE,gCACE,6BAAKzC,IACL,6BACG4B,EAAYnB,KAAI,SAACoB,EAAMsB,GACtB,IAAI9E,EAMJ,MAJgB,cAAZ2B,IACF3B,EAAE,eAAWoE,EAAI8B,WAAf,gBAAiC9B,EAAIwF,UAArC,gBAAsD9E,IAIxD,qCACGtB,EAAKpE,KACJ,oBAAIY,GAAIA,EAAR,SACE,mBAAG8L,KAAMtI,EAAKpE,IAAd,SAAoBoE,EAAKpC,UAG3BoC,EAAKpE,KAAO,6BAAKoE,EAAKpC,mBCoBvBiM,GArCe,SAAC,GAMxB,IACD1L,EANJ2L,EAKI,EALJA,OACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,aACArJ,EACI,EADJA,IAiBA,OAZIkJ,GACEA,EAAOhM,QACLgM,IAAWC,EACb5L,EAAU,cACD2L,IAAWG,EACpB9L,EAAU,gBACD2L,IAAWE,IACpB7L,EAAU,sBAMd,mCACG2L,GAAUA,EAAOhM,OAChB,qBAAKlB,UAAU,gBAAf,SACE,cAAC,GAAD,CACEuB,QAASA,EACT4B,YAAa+J,EAAOhM,MACpB8C,IAAKA,SCVFsJ,GAxBc,SAACC,EAAUrK,EAAWkB,GAqB/C,OApBAR,OAAOC,KAAK0J,GAAU/I,SAAQ,SAACtF,GAC3B,IAAIsO,EAUJ,IAPIA,EADc,aAAdtK,EACmBqK,EAASrO,GAAS4F,SAChB,YAAd5B,EACYqK,EAASrO,GAAS6F,QAElBwI,EAASrO,GAAS8F,YAKjCwI,EAAiBtM,MACjB,IAAK,IAAIuM,EAAI,EAAGA,EAAID,EAAiBtM,MAAMmB,OAAQoL,GAAK,EACpDrJ,EAAajD,KAAKqM,EAAiBtM,MAAMuM,OAKlDrJ,GCkBIsJ,OAlCf,YAIoC,IAO5BnM,EAVwBgM,EAGG,EAHHA,SACArK,EAEG,EAFHA,UACAc,EACG,EADHA,IAGtBI,EAAe,GAiBrB,OAfAkJ,GAAqBC,EAAUrK,EAAWkB,GAItCA,EAAa/B,OAAS,IAGlBd,EADc,aAAd2B,EACS,YACY,YAAdA,EACG,WAEA,cAKd,8BACI,cAAC,GAAD,CACY3B,QAASA,EACT4B,YAAaiB,EACbJ,IAAKA,OCyBd2J,GArDkB,SAAC,GAAa,IAAX3J,EAAU,EAAVA,IAC5BmJ,EAAanJ,EAAI/C,UAAU2M,SAAS3I,WACpCoI,EAAerJ,EAAI/C,UAAU2M,SAAS1I,aACtCkI,EAAQpJ,EAAI/C,UAAU4M,GAAG1I,MAE/B,OACE,qCAEE,cAAC,GAAD,CACE+H,OAAQC,EACRC,MAAOA,EACPD,WAAYA,EACZE,aAAcA,EACdrJ,IAAKA,IAGP,cAAC,GAAD,CACEkJ,OAAQE,EACRA,MAAOA,EACPD,WAAYA,EACZE,aAAcA,EACdrJ,IAAKA,IAGP,cAAC,GAAD,CACEuJ,SAAUvJ,EAAI/C,UACdiC,UAAU,WACVc,IAAKA,IAGP,cAAC,GAAD,CACEuJ,SAAUvJ,EAAI/C,UACdiC,UAAU,UACVc,IAAKA,IAGP,cAAC,GAAD,CACEuJ,SAAUvJ,EAAI/C,UACdiC,UAAU,YACVc,IAAKA,IAGP,cAAC,GAAD,CACEkJ,OAAQG,EACRD,MAAOA,EACPD,WAAYA,EACZE,aAAcA,EACdrJ,IAAKA,Q,kBCzBE8J,OAxBf,YAAgD,IAAjB1J,EAAgB,EAAhBA,aAC3B,OACI,6BACCA,EAAapC,KAAI,SAACoB,GAEf,OACI,qCACCA,EAAKpE,KACF,6BACI,mBAAG0M,KAAMtI,EAAKpE,IAAd,SAAoBoE,EAAKpC,UAG/BoC,EAAKpE,KACH,6BACKoE,EAAKpC,gBCKf+M,OAjBf,YAEyB,IAFH/J,EAEE,EAFFA,IACA5E,EACE,EADFA,aAGZ4O,EAAa,GACbT,EAAWvJ,EAAI/C,UAKrB,OAFAqM,GAAqBC,EAAUnO,EAAc4O,GAGzC,6BACI,cAAC,GAAD,CAAqB5J,aAAc4J,OCUhCC,OAvBf,YAAiC,IAARjK,EAAO,EAAPA,IACfmJ,EAAanJ,EAAI/C,UAAU2M,SAAS3I,WACpCoI,EAAerJ,EAAI/C,UAAU2M,SAAS1I,aACtCkI,EAAQpJ,EAAI/C,UAAU4M,GAAG1I,MAE/B,OACI,sBAAKnF,UAAU,iBAAf,UACI,cAAC,GAAD,CAAuBkN,OAAQC,EACZC,MAAOA,EACPD,WAAYA,EACZE,aAAcA,EACdrJ,IAAKA,IAExB,cAAC,GAAD,CAAuBkJ,OAAQG,EACZD,MAAOA,EACPD,WAAYA,EACZE,aAAcA,EACdrJ,IAAKA,QCuFrBkK,OApGf,YAAuE,IAA9CC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,UAAWrB,EAAqB,EAArBA,WAAYsB,EAAS,EAATA,MAC3D,OACE,qCACE,cAACjJ,EAAA,EAAU3F,OAAX,UACE,+BAEkB,OAAfsN,GACCsB,EAAMzF,SAAS,gBACbC,WAASyF,MAAM1F,SAAS,eACxB,4DACuB,IACpBuF,EAAYnM,KAAI,SAACuM,GAChB,OAAO,+BAAOA,UAIN,OAAfxB,GACCsB,EAAMzF,SAAS,gBACbC,WAASyF,MAAM1F,SAAS,eACxB,yDACoB,IACjBuF,EAAYnM,KAAI,SAACuM,GAChB,OAAO,+BAAOA,UAIN,OAAfxB,GACCsB,EAAMzF,SAAS,gBACbC,WAASyF,MAAM1F,SAAS,eACxB,qEAIR,cAACxD,EAAA,EAAUvF,KAAX,UACE,eAAC2O,GAAA,EAAD,CAAOC,UAAQ,EAACC,OAAK,EAACnP,KAAK,KAA3B,UACE,gCACE,+BACE,uBACA,0CACA,2CACA,+CAGJ,gCACG6O,EAAUpM,KAAI,SAACC,EAAMyC,GAEpB,IAAMyD,EAAgBU,WAASmB,WAC7B/H,EAAK4E,WACL,cACA+B,SAAS,aAELhJ,EAAE,UAAMmN,EAAN,iBAAyB9K,EAAK6D,WAA9B,gBAAgD7D,EAAKuH,WAE7D,OACE,qBACExJ,UACEqO,EAAMzF,SAAS,gBACbC,WAASyF,MAAM1F,SAAS,eAC1B3G,EAAK4E,aAAewH,EAAMzF,SAAS,cAC/B,kBACA,KANR,UASE,qBAEE5I,UAAU,aAFZ,UAIE,oBACEa,QAAS,kBACP8N,YAASC,SAAShP,EAAI,CACpBiP,QAAQ,EACRC,QAAS,GACTC,SAAU,OALhB,SASG5G,IAEH,sCACQlG,EAAK6D,WACX,uBAFF,cAEuB7D,EAAKC,gBAI9B,6BACE,cAAC,GAAD,CAAe8B,IAAKoK,EAAU1J,OAGhC,cAAC,GAAD,CAAYV,IAAKoK,EAAU1J,GAAQtF,aAAa,aAChD,cAAC,GAAD,CAAY4E,IAAKoK,EAAU1J,GAAQtF,aAAa,6BCZnD4P,GApFW,SAACC,EAAclC,EAAYoB,EAAaC,EAAWc,EAAgBC,EAAcd,GACzG,IAAIe,EACAC,EACAC,EACAC,EACAC,EACAC,EACJtB,EAAc,GAEdoB,EAAgBlB,EAAMqB,QAAQ,SAC9BF,EAAenB,EAAMsB,MAAM,SAG3BP,EAAWf,EAAMqB,QAAQ,QACzBJ,EAAUjB,EAAMsB,MAAM,QAEtBN,EAAWD,EAGX,IAFA,IAAMQ,EAAiB,GAEhBP,GAAYC,GACjBM,EAAezO,KAAKkO,EAASzG,SAAS,eACtCyG,EAAWA,EAASrE,KAAK,CAAE1D,KAAM,IAGnCmI,EAAgBF,EAEhB,IAAMM,EAAkB,GACxB,GAAmB,OAAf9C,EAEF,KAAO0C,GAAiBD,GACtBK,EAAgB1O,KAAKsO,EAAc7G,SAAS,eAC5C6G,EAAgBA,EAAczE,KAAK,CAAE1D,KAAM,IAI/C,IAAMwI,EAAkB,GAClBC,EAAmB,GAGzB,GAAmB,OAAfhD,EAAqB,CACvB,IADwB,IAAD,WACd1I,GACPT,OAAOC,KAAKoL,GAAcjN,KAAI,SAACgC,GACzBA,IAAQ6L,EAAgBxL,IAC1B0L,EAAiB5O,KAAK8N,EAAajL,QAHhCK,EAAI,EAAGA,EAAIwL,EAAgBxN,OAAQgC,GAAK,EAAI,EAA5CA,GAOT8K,EAAaY,OACR,CAEP,IAFQ,IAAD,WAEE1L,GACPT,OAAOC,KAAKoL,GAAcjN,KAAI,SAACgC,GACzBA,IAAQ4L,EAAevL,IACzByL,EAAgB3O,KAAK8N,EAAajL,QAH/BK,EAAI,EAAGA,EAAIuL,EAAevN,OAAQgC,GAAK,EAAI,EAA3CA,GAOP8K,EAAaW,GAKfF,EAAepL,SAAQ,SAACvC,GAEpBgN,EAAahN,KACZkM,EAAYvL,SAASqM,EAAahN,GAAM6D,aAEzCqI,EAAYhN,KAAK8N,EAAahN,GAAM6D,eAGxCoJ,EAAef,GAEfxI,QAAQC,IAAI,eAAgBuI,GAC5BxI,QAAQC,IAAI,aAAcwI,ICvCb4B,GA/BM,SAAC,GAA4C,IAA1Cf,EAAyC,EAAzCA,aAAclC,EAA2B,EAA3BA,WAAYxI,EAAe,EAAfA,SAChD,EAAsC1F,qBAAtC,mBAAOsP,EAAP,KAAoBe,EAApB,KACA,EAAkCrQ,qBAAlC,mBAAOuP,EAAP,KAAkBe,EAAlB,KAcA,OAZAc,qBAAU,WACRjB,GACEC,EACAlC,EACAoB,EACAC,EACAc,EACAC,EACA5K,KAED,CAAC0K,IAGF,qBAAKjP,UAAU,iBAAf,SAEGmO,GAAeC,GACd,cAAC,GAAD,CACED,YAAaA,EACbC,UAAWA,EACXrB,WAAYA,EACZsB,MAAO9J,OCrBX2L,GAAkB,SAAlBA,EAAmBjB,EAAcZ,EAAOtB,GAC5C,IAAIoD,EA2BJ,MAzBmB,OAAfpD,EAEAoD,EADoB,IAAlB9B,EAAMlF,QACIkF,EAAMrD,KAAK,CAAE1D,MAAO,IAAKsB,SAAS,cACnB,IAAlByF,EAAMlF,QACHkF,EAAMrD,KAAK,CAAE1D,MAAO,IAAKsB,SAAS,cAElCyF,EAAMrD,KAAK,CAAE1D,MAAO,IAAKsB,SAAS,cAExB,OAAfmE,IAEPoD,EADoB,IAAlB9B,EAAMlF,QACIkF,EACTrD,KAAK,CAAEC,OAAQ,IACfC,IAAI,CAAE/B,QAAS,IACfP,SAAS,cACHyF,EAAMlF,QAAU,GAAKkF,EAAMlF,SAAW,EACnCkF,EAAMnD,IAAI,CAAE/B,QAAS,IAAKP,SAAS,cAEnCyF,EAAMnD,IAAI,CAAE/B,QAAS,IAAKP,SAAS,eAI/CqG,EAAakB,GAAWlP,UAAU2L,cACpCuD,EAAYD,EAAgBjB,EAAckB,EAAWpD,IAGhDoD,GAIHC,GAAc,SAAdA,EAAenB,EAAcZ,EAAOtB,GACxC,IAAIsD,EA2BJ,MAzBmB,OAAftD,GACFpH,QAAQC,IAAIyI,EAAMlF,SAEhBkH,EADoB,IAAlBhC,EAAMlF,QACEkF,EAAMrD,KAAK,CAAE1D,KAAM,IAAKsB,SAAS,cAChB,IAAlByF,EAAMlF,QACLkF,EAAMrD,KAAK,CAAE1D,KAAM,IAAIsB,SAAS,cAEhCyF,EAAMzF,SAAS,eAEH,OAAfmE,IAEPsD,EADoB,IAAlBhC,EAAMlF,QACEkF,EAAMzF,SAAS,cAChByF,EAAMlF,QAAU,GAAKkF,EAAMlF,SAAW,EACrCkF,EAAMnD,IAAI,CAAE/B,QAAS,IAAKP,SAAS,cAEnCyF,EAAMrD,KAAK,CAAE1D,KAAM,IAAKsB,SAAS,eAI/CjD,QAAQC,IAAI,WAAYyK,GACxB1K,QAAQC,IAAIqJ,EAAaoB,IACrBpB,EAAaoB,GAASpP,UAAU2L,cAClCyD,EAAUD,EAAYnB,EAAcoB,EAAStD,IAGxCsD,GA8FMC,OA1Ff,YAAiE,IAG3DC,EACAF,EAJuBpB,EAAmC,EAAnCA,aAAclC,EAAqB,EAArBA,WAAYsB,EAAS,EAATA,MAOrDkC,EAAcL,GAAgBjB,EAAcZ,EAAOtB,GAGnDsD,EAAUD,GAAYnB,EAAcZ,EAAOtB,GAG3C,IAAMyD,EAAY,UAAMzD,EAAN,iBAAyBkC,EAAaoB,GAASvK,WAA/C,gBAAiEmJ,EAAaoB,GAAS7G,WACnGiH,EAAa,UAAM1D,EAAN,iBAAyBkC,EAAasB,GAAazK,WAAnD,gBAAqEmJ,EAAasB,GAAa/G,WAElH,OACE,8BACE,qBAAKxJ,UAAU,aAAf,SACGqQ,GAAWE,GACV,qCACE,8BACE,cAAC,GAAD,CACE9D,oBArBa,EAsBbzI,IAAKiL,EAAaoB,GAClBtD,WAAYA,MAGhB,qBAAK/M,UAAU,yBAAf,SACE,qDACsB,IAEnBiP,EAAaZ,EAAMzF,SAAS,eAC3B,+BACGqG,EAAaZ,EAAMzF,SAAS,eAAe1G,YAG9C,qCAAQ+M,EAAaoB,GAASnO,kBAIpC,sBAAKlC,UAAU,wBAAf,UACE,qBAAKA,UAAU,sBAAf,SACE,qCACE,oBACEA,UAAU,kBACVa,QAAS,kBACP8N,YAASC,SAAS4B,EAAc,CAC9B3B,QAAQ,EACRC,QAAS,GACTC,SAAU,OANhB,iCAYA,uBACA,cAAC,GAAD,CAA0B/K,IAAKiL,EAAaoB,UAGhD,qBAAKrQ,UAAU,sBAAf,SACE,qCACE,oBACEA,UAAU,kBACVa,QAAS,kBACP8N,YAASC,SAAS6B,EAAe,CAC/B5B,QAAQ,EACRC,QAAS,GACTC,SAAU,OANhB,kCAYA,uBACA,cAAC,GAAD,CACExB,SAAU0B,EAAasB,GAAatP,UACpCiC,UAAU,YACVc,IAAKiL,EAAasB,qBCvDvBG,OAnFf,YAA+D,IAKzDC,EALqB1B,EAAmC,EAAnCA,aAAclC,EAAqB,EAArBA,WAAYjO,EAAS,EAATA,MAE7Cc,EAAE,UAAMmN,EAAN,QAEFsB,EAAQxF,WAASyF,MAQvB,OALEqC,EADiB,OAAf5D,EACUlE,WAASyF,MAAMtD,KAAK,CAAEC,MAAO,IAE7BpC,WAASyF,MAAMtD,KAAK,CAAE4F,OAAQ,IAI1C,sBAAK5Q,UAAU,UAAf,UAEE,qBACEA,UAAU,WACVa,QAAS,kBACP8N,YAASC,SAAShP,EAAI,CACpBiP,QAAQ,EACRC,QAAS,GACTC,SAAU,OANhB,SAUE,cAAC,IAAD,MAEF,oBAAI/O,UAAU,kBAAd,SAAiClB,IACjC,mBAAGc,GAAIA,IAEP,cAAC,GAAD,CACEqP,aAAcA,EACdlC,WAAYA,EACZsB,MAAOA,IAET,sBAAKrO,UAAU,+BAAf,UACE,cAACoF,EAAA,EAAD,CAAWpF,UAAU,yBAAyB6Q,iBAAiB,IAA/D,SACE,cAACzL,EAAA,EAAUC,KAAX,CAAgBC,SAAS,IAAzB,SACE,cAAC,GAAD,CACE2J,aAAcA,EACdlC,WAAYA,EACZxI,SAAU8J,QAIhB,cAACjJ,EAAA,EAAD,CAAWpF,UAAU,yBAArB,SACkB,OAAf+M,GACC,cAAC3H,EAAA,EAAUC,KAAX,CAAgBC,SAAS,IAAzB,SACE,cAAC,GAAD,CACE2J,aAAcA,EACdlC,WAAYA,EACZxI,SAAUoM,WAMpB,sBAAK3Q,UAAU,gBAAf,UACE,+CAEC4D,OAAOC,KAAKoL,GAAcjN,KAAI,SAACgC,GAC9B,IAAMpE,EAAE,UAAMmN,EAAN,iBAAyBkC,EAAajL,GAAK8B,WAA3C,gBAA6DmJ,EAAajL,GAAKwF,WAEvF,OACE,sBAAKxJ,UAAU,YAAYJ,GAAIA,EAA/B,UAEE,cAAC,GAAD,CACE6M,mBAhEa,MAiEbzI,IAAKiL,EAAajL,GAClB+I,WAAYA,KAGZkC,EAAajL,GAAK/C,UAAU2L,aAC5B,cAAC,GAAD,CAA0B5I,IAAKiL,EAAajL,kB,oBC4C7C8M,OAzHf,YAAoD,IAA7B7B,EAA4B,EAA5BA,aAAclC,EAAc,EAAdA,WAC7B9B,EAAQ,GAIdgF,qBAAU,WAFkBc,EAAMC,QAAQC,eAAe,CAAEC,MAAO,aAI/D,IAEH,IAAMC,EAAiB,WACrB,OACE,mCACE,qBAAKC,IAAKL,OAMhBnN,OAAOC,KAAKoL,GAAczK,SAAQ,SAACR,GAC5BiH,EAAMrI,SAASqM,EAAajL,GAAK8B,aACpCmF,EAAM9J,KAAK8N,EAAajL,GAAK8B,eAYjC,IAPA,IAAMuL,EAAiBxI,WAASyF,MAAMoB,QAAQ,QACxC4B,EAAgBzI,WAASyF,MAAMqB,MAAM,QACvClP,EAAS4Q,EAEPE,EAAa,GAGZ9Q,GAAU6Q,GACfC,EAAWpQ,KAAKV,EAAOmI,SAAS,eAChCnI,EAASA,EAAOuK,KAAK,CAAE1D,KAAM,IAI/B,IAAMkK,EAAa,GACbT,EAAQU,iBAAO,MAWrB,OATAF,EAAW/M,SAAQ,SAACvC,GAEhBgN,EAAahN,KACZuP,EAAW5O,SAASqM,EAAahN,GAAM6D,aAExC0L,EAAWrQ,KAAK8N,EAAahN,GAAM6D,eAKrC,sBAAK9F,UAAU,sBAAf,UACE,8CACA,eAACiH,EAAA,EAAD,CACErG,QAAQ,QACRiQ,iBAAiB,IACjB7Q,UAAU,cACV0R,aAAa,OAJf,UAME,cAACzK,EAAA,EAAI5B,KAAL,UACE,cAAC4B,EAAA,EAAIE,KAAL,CACE7B,SAAS,IAETzE,QAAS,kBACP8N,YAASC,SAAT,UAAqB7B,EAArB,QAAuC,CACrC8B,QAAQ,EACRC,QAAS,GACTC,SAAU,OAPhB,qBAcD9D,EAAMjJ,KAAI,SAACsH,EAAM5E,GAGhB,IACI9E,EADE+R,EAAK,UAAMjN,EAAQ,GAIvB9E,EADiB,OAAfmN,EACA,UAAMA,EAAN,iBAAyBzD,EAAzB,UAEA,UAAMyD,EAAN,iBAAyBzD,EAAzB,UAGJ,IAAMsI,EAAS,UAAM7E,EAAN,yBAAiCzD,GAChD,OACE,cAACrC,EAAA,EAAI5B,KAAL,UACE,eAAC4B,EAAA,EAAIE,KAAL,CACE7B,SAAUqM,EAEV9Q,QAAS,kBACP8N,YAASC,SAAShP,EAAI,CACpBiP,QAAQ,EACRC,QAAS,GACTC,SAAU,OAPhB,UAWGzF,IAASkI,EAAW,IAAM,cAACL,EAAD,IAC3B,wCACQ7H,EAEL2B,EAAMvG,KAAW8M,EAAW,IAC3B,uBAAM5R,GAAIgS,EAAW5R,UAAU,uBAA/B,UACE,cAAC,KAAD,IACC,KAFH,iCClGL6R,OATf,YAAgD,IAA7B5C,EAA4B,EAA5BA,aAAclC,EAAc,EAAdA,WAC/B,OACE,qBAAK/M,UAAU,UAAf,SACE,cAAC,GAAD,CAAaiP,aAAcA,EAAclC,WAAYA,OCsB5C+E,OA1Bf,YAAyC,IAInC/E,EAJmB/G,EAAe,EAAfA,KAAMlH,EAAS,EAATA,MACvBmQ,EAAe7I,KAAKgB,MAAMhB,KAAKC,UAAUL,EAAKsB,OAUpD,OALEyF,EADsB,gBAApB/G,EAAK0C,WACM,KAEA,KAIb,sBAAK1I,UAAU,kBAAf,UAGE,cAAC,GAAD,CAASiP,aAAcA,EAAclC,WAAYA,IAEjD,cAAC,GAAD,CACEkC,aAAcA,EACdlC,WAAYA,EACZjO,MAAOA,QCuBAiT,OAxCf,YAA4C,IAAf/K,EAAc,EAAdA,WAC3B,EAAoBgL,eAAdC,EAAN,EAAMA,KAAMjT,EAAZ,EAAYA,IAGZ,OAFA2G,QAAQC,IAAI,cAAeoB,GAGzB,qCAEE,eAACkL,GAAA,EAAD,CAAQtR,QAAQ,OAAOuR,GAAG,YAA1B,UACE,cAACD,GAAA,EAAOE,MAAR,CAAc1G,KAAK,QAAnB,SACE,qBAAK2G,IAAKC,GAAMC,IAAI,mBAEtB,cAACtL,EAAA,EAAD,CAAKjH,UAAU,UAAf,SACGgH,EAAWhF,KAAI,SAACkF,GACf,OACE,cAACD,EAAA,EAAIE,KAAL,CAAUqL,GAAIrL,KAAMsL,GAAE,UAAKzT,EAAL,YAAYkI,EAAMlG,MAAxC,SACGkG,EAAMlG,KAAK0R,wBAMtB,eAAC,KAAD,WACE,cAAC,KAAD,CAAOC,OAAK,EAACV,KAAMA,EAAnB,SACE,cAAC,KAAD,CAAUQ,GAAE,UAAKR,EAAL,YAAajL,EAAW,GAAGhG,UAExCgG,EAAWhF,KAAI,SAACkF,GACf,OACE,cAAC,KAAD,CAAO+K,KAAI,UAAKA,EAAL,YAAa/K,EAAMlG,MAA9B,SACE,cAAC,GAAD,CACEgF,KAAMkB,EAAMG,QACZvI,MAAOoI,EAAMlG,KAAK0R,4BCDnBE,OAxBf,WAGE,IAAM5L,EAAa,CAAC,CAAChG,KAAK,QAASqG,QAASwL,IAAQ,CAAC7R,KAAM,QAASqG,QAASyL,IAAQ,CAAC9R,KAAM,QAASqG,QAAS0L,KAE9G,OACE,qBAAK/S,UAAU,MAAf,SAEE,cAAC,KAAD,UACE,eAAC,KAAD,WAEE,cAAC,KAAD,CAAOiS,KAAK,SAAZ,SACE,cAAC,GAAD,CAAejL,WAAYA,MAG7B,cAAC,KAAD,CAAOiL,KAAK,aAAZ,SACE,cAAC,GAAD,CAAmBjL,WAAYA,cChB5BgM,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFpN,SAASqN,eAAe,SAM1BZ,M","file":"static/js/main.1bf78785.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nfunction AddItemModal({\n  show,\n  onHide,\n  bootcampdatacopy,\n  setbootcampdatacopy,\n  coursedate,\n}) {\n  // input fields for a entry of a new item into the main data file\n  const [title, setTitle] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [section, setSection] = useState(\"\");\n  const [sectionClass, setSectionClass] = useState(\"\");\n\n  // function that adds new item to main data file\n  const handleAddItem = (e) => {\n    e.preventDefault();\n\n    // new item that will be added to main data file\n    const newItem = {\n      name: title,\n      url: url,\n    };\n\n    // if the section that the new item is to be added to is empty, an empty array called items is added to it\n    if (!bootcampdatacopy[coursedate].dateTypes[section][sectionClass].items) {\n      bootcampdatacopy[coursedate].dateTypes[section][sectionClass].items = [];\n    }\n\n    // the new item is then pushed into items array\n    bootcampdatacopy[coursedate].dateTypes[section][sectionClass].items.push(\n      newItem\n    );\n\n    // the new content is saved in state\n    setbootcampdatacopy({ ...bootcampdatacopy });\n  };\n\n  return (\n    // modal that takes in user input for the creation of a new item\n    <Modal\n      show={show}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"add-input-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"add-input-modal\">Add an item</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Group className=\"mb-3\" controlId=\"title\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\" controlId=\"url\">\n            <Form.Label>URL</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter URL\"\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Label>Section</Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSection(e.target.value)}\n          >\n            <option>choose section</option>\n            <option value=\"general\">general</option>\n            <option value=\"css\">css</option>\n            <option value=\"ux\">ux</option>\n            <option value=\"projects\">projects</option>\n            <option value=\"cp\">cp</option>\n            <option value=\"dsa\">dsa</option>\n          </Form.Select>\n\n          <Form.Label>Class </Form.Label>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"sections\"\n            onChange={(e) => setSectionClass(e.target.value)}\n          >\n            <option>choose class type</option>\n            <option value=\"preClass\">preClass</option>\n            <option value=\"postClass\">postClass</option>\n            <option value=\"inClass\">inClass</option>\n            {section === \"projects\" && (\n              <>\n                <option value=\"projectDue\">projectDue</option>\n                <option value=\"projectStart\">projectStart</option>\n              </>\n            )}\n            {section === \"cp\" && <option value=\"cpDue\">cpDue</option>}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleAddItem(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default AddItemModal;\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\n// moves items to a specific date in the schedule\nfunction ShiftItemModal({\n  show,\n  onHide,\n  shiftitem,\n  bootcampdatacopy,\n  setbootcampdatacopy,\n  sectiontype,\n  classtype,\n  classindex,\n  section,\n}) {\n  const [selectedDate, setSelectedDate] = useState(\"\");\n\n  let heading;\n  if (shiftitem.direction === \"up\") {\n    heading = \"Moving back ... \";\n  } else {\n    heading = \"Moving forward ... \";\n  }\n\n  const handleSubmitDate = (e) => {\n    e.preventDefault();\n    // finding the selected item in the data file\n    let selectedItem = sectiontype[classtype].items[classindex];\n    // removing it from it's original position\n    sectiontype[classtype].items.splice(classindex, 1);\n\n    // if items array is empty after removing selected item, remove empty items array\n    if (sectiontype[classtype].items.length === 0) {\n      delete sectiontype[classtype].items;\n    }\n    // this is where we want to move the item to\n    const targetDay = bootcampdatacopy[selectedDate].dateTypes[section];\n\n    // checking to see if items array exists at destination, if not, an empty array called items is added\n    if (!targetDay[classtype].items) {\n      targetDay[classtype].items = [];\n    }\n\n    // selected item is push into items array at destination\n    targetDay[classtype].items.push(selectedItem);\n\n    // depending on whether the main (array) or individual (object) schedule files were updated, new version of data file is saved\n    bootcampdatacopy.constructor === Array\n      ? setbootcampdatacopy([...bootcampdatacopy])\n      : setbootcampdatacopy({ ...bootcampdatacopy });\n  };\n\n  return (\n    <Modal\n      show={show}\n      shiftitem={shiftitem}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"item-modal\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"item-modal\">{heading}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Form.Select\n            className=\"mb-3\"\n            aria-label=\"days\"\n            onChange={(e) => setSelectedDate(e.target.value)}\n          >\n            <option>--</option>\n            {shiftitem.dates.map((date) => {\n              if (typeof date === \"number\") {\n                return (\n                  <>\n                    <option value={date}>\n                      Day {bootcampdatacopy[date].courseDay}\n                    </option>\n                    ;\n                  </>\n                );\n              } else {\n                return (\n                  <>\n                    <option value={date}>{date}</option>;\n                  </>\n                );\n              }\n            })}\n          </Form.Select>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={(e) => handleSubmitDate(e)}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default ShiftItemModal;\n","import React, { useState } from \"react\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport ShiftItemModal from \"./ShiftItemModal\";\n\n// helper functions that populates dateArray\n// ##########################################################\nconst addDates = (datesArray, date) => {\n  if (!datesArray.includes(date)) {\n    datesArray.push(date);\n  }\n  return datesArray;\n};\n\nconst addIndex = (bootcampDataCopy, datesArray, date) => {\n  if (!datesArray.includes(bootcampDataCopy.indexOf(date))) {\n    datesArray.push(bootcampDataCopy.indexOf(date));\n  }\n  return datesArray;\n};\n// ############################################################\n\nfunction ClassItem({\n  setBootcampDataCopy,\n  section,\n  bootcampDataCopy,\n  classType,\n  sectionType,\n  item,\n  dayIndex,\n  classIndex,\n}) {\n  // toggle visibility of buttons\n  const [modalShow, setModalShow] = useState(false);\n  // object shift item is initialised with keys direction and dates to store data that will be passed into the nect component\n  const [shiftItem, setShiftItem] = useState({\n    direction: null,\n    dates: [],\n  });\n\n  // function that handles moving data from one day to another\n  const handleShift = (direction, dayIndex, classIndex) => {\n    // array that contains all the dates either before or after a selected date depending on direction chosen by user\n    let datesArray = [];\n\n    // item is being moved backwards in the schedule\n    if (direction === \"up\") {\n      // if bootcampDataCopy either an object or an array depending on wether the user is editing the main or individual schedule files, and needs to be processed accordingly\n      bootcampDataCopy.constructor === Object\n        ? Object.keys(bootcampDataCopy)\n            .filter(\n              (date) =>\n                bootcampDataCopy[date].courseDay < dayIndex + 1 &&\n                bootcampDataCopy[date].courseDay !== null\n            )\n            .map((date) => {\n              datesArray = addDates(datesArray, date);\n            })\n        : bootcampDataCopy\n            .filter((date) => bootcampDataCopy.indexOf(date) < dayIndex)\n            .map((date) => {\n              datesArray = addIndex(bootcampDataCopy, datesArray, date);\n            });\n\n      // data is put into object shift item\n      setShiftItem({\n        ...shiftItem,\n        direction: \"up\",\n        dates: datesArray,\n      });\n      // modal that takes user input to move item is shown\n      setModalShow(true);\n      // item is being moved forward in the schedule\n    } else if (direction === \"down\") {\n      bootcampDataCopy.constructor === Object\n        ? Object.keys(bootcampDataCopy)\n            .filter(\n              (date) =>\n                bootcampDataCopy[date].courseDay > dayIndex + 1 &&\n                bootcampDataCopy[date].courseDay !== null\n            )\n            .map((date) => {\n              datesArray = addDates(datesArray, date);\n            })\n        : bootcampDataCopy\n            .filter((date) => bootcampDataCopy.indexOf(date) > dayIndex)\n            .map((date) => {\n              datesArray = addIndex(bootcampDataCopy, datesArray, date);\n            });\n\n      setShiftItem({\n        ...shiftItem,\n        direction: \"down\",\n        dates: datesArray,\n      });\n\n      setModalShow(true);\n    } else {\n      // here the item is being deleted from the schedule\n      sectionType[classType].items.splice(classIndex, 1);\n      setBootcampDataCopy({ ...bootcampDataCopy });\n    }\n  };\n\n  return (\n    <div>\n      <div\n        className=\"class-item\"\n      >\n        {item.name}\n        \n          <div>\n            {/* remove item  */}\n            <button className=\"trash-can\" onClick={() => handleShift(\"delete\", dayIndex, classIndex)}>\n              <DeleteOutlinedIcon />\n            </button>\n            {/* move item backwards in the schedule  */}\n            <button onClick={() => handleShift(\"up\", dayIndex, classIndex)}>\n              <ExpandLessIcon />\n            </button>\n            {/* move item forward in the schedule  */}\n            <button onClick={() => handleShift(\"down\", dayIndex, classIndex)}>\n              <ExpandMoreIcon />\n            </button>\n          </div>\n        \n        {modalShow && (\n          // modal that is shown when the user clicks either of the above buttons\n          <ShiftItemModal\n            show={modalShow}\n            onHide={() => setModalShow(false)}\n            shiftitem={shiftItem}\n            bootcampdatacopy={bootcampDataCopy}\n            setbootcampdatacopy={setBootcampDataCopy}\n            sectiontype={sectionType}\n            classtype={classType}\n            classindex={classIndex}\n            section={section}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ClassItem;\n","import React from \"react\";\nimport ClassItem from \"./ClassItem\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nfunction SectionClass({\n  day,\n  sectionIndex,\n  sectionclass,\n  sectionType,\n  bootcampDataCopy,\n  setBootcampDataCopy,\n  section,\n  dayIndex,\n}) {\n\n  // helper function that maps each element in section array to a new course day\n  const shiftSection = (sectionArray, startDay, bootcampDataCopy) => {\n    sectionArray.forEach((element, index) => {\n      if (element !== null) {\n        if (\n          bootcampDataCopy[startDay + index].dateTypes[section][sectionclass]\n            .items\n        ) {\n          sectionArray[index].forEach((item) => {\n            bootcampDataCopy[startDay + index].dateTypes[section][\n              sectionclass\n            ].items.push(item);\n          });\n        } else {\n          bootcampDataCopy[startDay + index].dateTypes[section][\n            sectionclass\n          ].items = sectionArray[index];\n        }\n      }\n    });\n    return bootcampDataCopy;\n  };\n\n  const handleClassShift = (direction, dayIndex) => {\n    // puts all the items in selected class in an array and deletes them from their original position\n    const sectionArray = [];\n    for (let i = dayIndex; i < bootcampDataCopy.length - 1; i += 1) {\n      if (bootcampDataCopy[i].dateTypes[section][sectionclass].items) {\n        const selectedSection =\n          bootcampDataCopy[i].dateTypes[section][sectionclass].items;\n        sectionArray.push(selectedSection);\n        delete bootcampDataCopy[i].dateTypes[section][sectionclass].items;\n      } else {\n        sectionArray.push(null);\n      }\n    }\n\n    let startDay;\n    // when user clicks the down button, items are put into section/class of the next day\n    if (direction === \"down\") {\n      startDay = dayIndex + 1;\n    } else {\n      // when user clicks the up button, items are put into section/class of the previous day\n      startDay = dayIndex - 1;\n    }\n\n    bootcampDataCopy = shiftSection(sectionArray, startDay, bootcampDataCopy);\n    setBootcampDataCopy([...bootcampDataCopy]);\n  };\n\n  return (\n    <div>\n      {sectionType[sectionclass].items && (\n        <div className=\"section-class\">\n          <div className=\"class-title\">{sectionclass}</div>\n          <div className=\"class-items\">\n            {sectionType[sectionclass].items.map((item, classIndex) => {\n              return (\n                <ClassItem\n                  day={day}\n                  sectionclass={sectionclass}\n                  bootcampDataCopy={bootcampDataCopy}\n                  setBootcampDataCopy={setBootcampDataCopy}\n                  section={section}\n                  classType={sectionclass}\n                  sectionType={sectionType}\n                  item={item}\n                  dayIndex={dayIndex}\n                  classIndex={classIndex}\n                />\n              );\n            })}\n          </div>\n          <div\n            className=\"section-class-header\"\n  \n          >\n              <div>\n                <button\n                  onClick={() => handleClassShift(\"up\", dayIndex, sectionIndex)}\n                >\n                  <ExpandLessIcon />\n                </button>\n                <button\n                  onClick={() =>\n                    handleClassShift(\"down\", dayIndex, sectionIndex)\n                  }\n                >\n                  <ExpandMoreIcon />\n                </button>\n              </div>\n          \n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SectionClass;\n","import React from \"react\";\nimport SectionClass from \"./SectionClass\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction Section({\n  day,\n  setBootcampDataCopy,\n  section,\n  sectionType,\n  dayIndex,\n  bootcampDataCopy,\n}) {\n  // variable classExists is created to track if any class of a section exists (it is initially set to false)\n  // if any class of a section exists, classExists is set to true\n  // if classExists is true, a header for this section will be created\n  let classExists = false;\n  if (sectionType.constructor === Object) {\n    if (\n      sectionType.preClass.items ||\n      sectionType.inClass.items ||\n      sectionType.postClass.items ||\n      (sectionType === \"projects\" &&\n        (sectionType.projectDue.items || sectionType.projectStart.items)) ||\n      (sectionType === \"cp\" && sectionType.cpDue.items)\n    ) {\n      classExists = true;\n    }\n  }\n\n  return (\n    <div>\n      {sectionType.constructor === Object && (\n        <>\n          <Accordion>\n            {classExists && (\n              <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>{sectionType.type}</Accordion.Header>\n                <Accordion.Body>\n                  {Object.keys(sectionType)\n                    .filter((sectionClass) => sectionType[sectionClass].items)\n                    .map((sectionclass, sectionIndex) => {\n                      return (\n                        <div className=\"all-classes\">\n                          <SectionClass\n                            day={day}\n                            sectionIndex={sectionIndex}\n                            sectionclass={sectionclass}\n                            sectionType={sectionType}\n                            bootcampDataCopy={bootcampDataCopy}\n                            setBootcampDataCopy={setBootcampDataCopy}\n                            section={section}\n                            dayIndex={dayIndex}\n                          />\n                        </div>\n                      );\n                    })}\n                </Accordion.Body>\n              </Accordion.Item>\n            )}\n          </Accordion>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Section;\n","import React from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Section from \"./inner-accordion/Section\";\n\nfunction MainAccordion({\n  dayIndex,\n  bootcampDataCopy,\n  setBootcampDataCopy,\n  day,\n  setShowInputModal,\n  setCourseDate,\n  // fold,\n  // setFold,\n}) {\n  const handlePlusClick = (day) => {\n    console.log(day);\n    setCourseDate(day);\n    setShowInputModal(true);\n  };\n\n  return (\n    <div>\n      {bootcampDataCopy[day].dateTypes.module && (\n        <Accordion>\n          <Accordion.Item eventKey={dayIndex}>\n            <Accordion.Header>\n              <div\n                className=\"course-day-symbol\"\n                onClick={() => handlePlusClick(day)}\n              >\n                {\" \"}\n                <AddIcon />\n              </div>\n              <div className=\"course-day-header\">\n                {bootcampDataCopy.constructor === Object ? (\n                  <>\n                    {day}, Week: {bootcampDataCopy[day].courseWeek}, Course Day:{\" \"}\n                    {bootcampDataCopy[day].courseDay},{\" \"}\n                    {bootcampDataCopy[day].dateTypes.module}{\" \"}\n                  </>\n                ) : (\n                  <>\n                    Course Day: {bootcampDataCopy[day].courseDay},{\" \"}\n                    {bootcampDataCopy[day].dateTypes.module}{\" \"}\n                  </>\n                )}\n              </div>\n            </Accordion.Header>\n            <Accordion.Body>\n              <div className=\"course-day\">\n                <div>\n                  {Object.keys(bootcampDataCopy[day].dateTypes).map(\n                    (section) => (\n                      <Section\n                        day={day}\n                        setBootcampDataCopy={setBootcampDataCopy}\n                        section={section}\n                        sectionType={bootcampDataCopy[day].dateTypes[section]}\n                        dayIndex={dayIndex}\n                        bootcampDataCopy={bootcampDataCopy}\n                      />\n                    )\n                  )}\n                </div>\n              </div>\n            </Accordion.Body>\n          </Accordion.Item>\n        </Accordion>\n      )}\n    </div>\n  );\n}\n\nexport default MainAccordion;\n","const download = (data, filename) => {\n        // from: https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\n        var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data));\n        var dlAnchorElem = document.createElement('a');\n        dlAnchorElem.setAttribute(\"href\",     dataStr     );\n        dlAnchorElem.setAttribute(\"download\", filename);\n        dlAnchorElem.click();\n    };\n\nexport default download;","import React, { useState } from \"react\";\nimport AddItemModal from \"./main-accordion/AddItemModal\";\nimport MainAccordion from \"./main-accordion/MainAccordion\";\nimport Button from \"react-bootstrap/Button\";\nimport download from \"../../download\";\n\nconst GenerateDataShiftContent = ({\n  bootcampDataCopy,\n  setBootcampDataCopy,\n}) => {\n  const [showInputModal, setShowInputModal] = useState(false);\n  const [courseDate, setCourseDate] = useState(\"\");\n\n  // function that handles download of main data file after edits\n  const handleDownloadMainClick = () => {\n    download(bootcampDataCopy, \"modified-main-data-file.json\");\n  };\n\n  // function that handles download of individual batch data file after edits\n  const handleBatchDownloadClick = () => {\n    download(\n      bootcampDataCopy,\n      `modified-${bootcampDataCopy.courseName}-file.json`\n    );\n  };\n\n  return (\n    <>\n    \n      {/* renders batch schedule data file  */}\n      {bootcampDataCopy.constructor === Object &&\n        Object.keys(bootcampDataCopy).length > 0 && (\n          <div>\n            <div className=\"download-button-container\">\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={handleBatchDownloadClick}\n              >\n                Download File\n              </Button>\n            </div>\n            {Object.keys(bootcampDataCopy).map((day, dayIndex) => {\n              return (\n                <>\n                <div>\n                  <MainAccordion\n                    dayIndex={dayIndex}\n                    bootcampDataCopy={bootcampDataCopy}\n                    setBootcampDataCopy={setBootcampDataCopy}\n                    day={day}\n                    setShowInputModal={setShowInputModal}\n                    setCourseDate={setCourseDate}\n                  />\n                </div>\n                </>\n              );\n            })}\n            {/* modal that takes in user input to create a new item in the schedule  */}\n            {showInputModal && courseDate && (\n              <AddItemModal\n                show={showInputModal}\n                onHide={() => setShowInputModal(false)}\n                bootcampdatacopy={bootcampDataCopy}\n                setbootcampdatacopy={setBootcampDataCopy}\n                setShowInputModal={setShowInputModal}\n                coursedate={courseDate}\n              />\n            )}\n          </div>\n        )}\n      {/* displays main data file  */}\n      {bootcampDataCopy.constructor === Array && (\n        <div className=\"accordion-container\">\n          <div className=\"download-button-container\">\n            <button\n              className=\"btn btn-primary\"\n              onClick={handleDownloadMainClick}\n            >\n              download modified file\n            </button>\n          </div>\n          {bootcampDataCopy.map((day, dayIndex) => {\n            return (\n              <MainAccordion\n                dayIndex={dayIndex}\n                bootcampDataCopy={bootcampDataCopy}\n                setBootcampDataCopy={setBootcampDataCopy}\n                day={dayIndex}\n                setShowInputModal={setShowInputModal}\n                setCourseDate={setCourseDate}\n              />\n            );\n          })}\n          {showInputModal && courseDate && (\n            <AddItemModal\n              show={showInputModal}\n              onHide={() => setShowInputModal(false)}\n              bootcampdatacopy={bootcampDataCopy}\n              setbootcampdatacopy={setBootcampDataCopy}\n              setShowInputModal={setShowInputModal}\n              coursedate={courseDate}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateDataShiftContent;\n","import React from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\n\n// side navbar that displays links to all batch schedules in batchArray\nfunction ActiveCourses({ batchArray, setBootcampDataCopy }) {\n  return (\n    <div>\n      <h4>Batches</h4>\n      <Nav variant=\"pills\" className=\"flex-column \">\n        {/* a link is rendered for each element in batchArray */}\n        {batchArray.map((batch, index) => {\n          return (\n            <Nav.Link\n              // when a link is click , the content of the selected batch file is rendered\n              onClick={() =>\n                setBootcampDataCopy(\n                  JSON.parse(JSON.stringify(batch.content.days))\n                )\n              }\n              eventKey={index}\n            >\n              {batch.name}\n            </Nav.Link>\n          );\n        })}\n      </Nav>\n    </div>\n  );\n}\n\nexport default ActiveCourses;\n","import { DateTime } from 'luxon';\nimport holidayData from './data/2021-sg-stat-holidays.json';\nimport basicsData from './data/basics-course-days.json';\nimport bootcampData from './data/bootcamp-course-days.json';\n\nconst publicHolidays = holidayData.PH;\nconst publicHolidayArray = [];\n// get array of all public holiday dates\nObject.keys(publicHolidays).map((key, index) => {\n    publicHolidayArray.push(key);\n});\n\nconst companyHolidays = holidayData.company;\nconst companyHolidayArray = [];\nconst winterBreak = [];\n// get array of all company holiday dates\nObject.keys(companyHolidays).map((key, index) => {\n    companyHolidayArray.push(key);\n    // get array of winter break dates\n    if(companyHolidays[key].name === 'winter break') {\n        winterBreak.push(companyHolidays[key].date);\n    }\n});\n\nconst phWithoutCh = [];\n// get array of public holidays not including those included in winter break\npublicHolidayArray.forEach((holiday) => {\n    if(!companyHolidayArray.includes(holiday)) {\n        phWithoutCh.push(holiday);\n    }\n});\n\n// helper function for getting utc date/time\nconst getLocalDateTime = (utc, timeString, courseName, courseType, date) => {\n    const changedFormat = date.toFormat(\"yyyy-MM-dd\");\n    if (courseType === 'Basics') {\n        utc = DateTime.fromISO(changedFormat + timeString, {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp FT' && Number(courseName) % 2 === 0) {\n        utc = DateTime.fromISO(changedFormat + 'T13:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if ((courseType === 'Bootcamp FT' && Number(courseName) % 2 !== 0) || (courseType === 'Bootcamp PT' && (date.weekday === 6))) {\n        utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp PT' && (date.weekday === 1)) {\n        utc = DateTime.fromISO(changedFormat + 'T19:30', {zone: 'Singapore'}).toUTC().toISO();\n    } else if (courseType === 'Bootcamp PT' && (date.weekday === 6)) {\n        utc = DateTime.fromISO(changedFormat + 'T10:00', {zone: 'Singapore'}).toUTC().toISO();\n    }\n    return utc;\n}\n\n// helper function for deciding what goes in topLevelObject based on course type\nconst generateTopLevelObject = (courseType, topLevelObject) => {\n        if (courseType === 'Basics') {\n            topLevelObject = {\n                daysOfWeek: basicsData.daysOfWeek,\n                courseStartIndex: basicsData.courseStartIndex,\n                totalCourseDays: basicsData.totalCourseDays,\n                ...topLevelObject\n            };\n        } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            let bootcampDays;\n            let startIndex;\n            if (courseType === 'Bootcamp FT') {\n                bootcampDays = bootcampData.daysOfWeek.fullTime;\n                startIndex = bootcampData.courseStartIndex.fullTime;\n            } else {\n                bootcampDays = bootcampData.daysOfWeek.partTime;\n                startIndex = bootcampData.courseStartIndex.partTime;\n            }\n            topLevelObject = {\n                daysOfWeek: bootcampDays,\n                courseStartIndex: startIndex,\n                totalCourseDays: bootcampData.totalCourseDays,\n                ...topLevelObject\n            }\n        }\n\n        return topLevelObject;\n    }\n\n// helper function that generates dateObj if the course date falls on a public holiday\nconst generateHolidayObject = (dateString, week, date, dateObj) => {\n    dateObj = {\n        courseDay: null,\n        courseDate: dateString,\n        courseWeek: week,\n        dayNumber: date.weekday,\n        dateTypes: {}\n    }\n\n    if (phWithoutCh.includes(dateString)) {\n        dateObj.dateTypes = publicHolidays[dateString];\n    } else {\n        dateObj.dateTypes = companyHolidays[dateString];\n    }\n\n    return dateObj;\n}\n\n// helper function that generates dateObj for a normal courseday\nconst generateCourseDayObject = (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay) => {\n    // get whatever index of basicsData that is specified by courseDayCount\n    dateObj = {\n        courseDate: dateString,\n        courseWeek: week,\n        weekDay: weekDay,\n        dayNumber: date.weekday,\n        meetingDateTimeUTC: utc,\n        };\n\n    // data is different for basics and bootcamp\n    if (courseType === 'Basics') {\n        dateObj = {\n            ...dateObj, ...basicsData.days[courseDay]\n        }\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n            dateObj = {\n            ...dateObj, ...bootcampData.days[courseDay]\n        }\n    }\n    return dateObj;\n}\n\n// ##################################################################\n// ##################################################################\n\nconst generateDataObject = (startDate, courseName, courseType) => {\n    let date = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let utc;\n    utc = getLocalDateTime(utc, 'T16:00', courseName, courseType, date);\n    let dateWeek = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n    let classDatesCount = 1;\n    let week = 1;\n    let weekDay = 1;\n    let data;\n    let courseDayCount;\n    // starts from 0 because it's tracking the index of the json data file\n    let courseDay = 0;\n\n    let topLevelObject = {\n            courseType: courseType,\n            days: {}\n        };\n\n    data = generateTopLevelObject(courseType, topLevelObject);\n\n    // set the number of course days based on course type\n    if (courseType === 'Basics') {\n        courseDayCount = 13;\n    } else if (courseType === 'Bootcamp FT' || courseType === 'Bootcamp PT') {\n        courseDayCount = 115;\n    }\n\n    const dayArray = data.daysOfWeek;\n    let dayIndex = data.courseStartIndex;\n\n    while (courseDayCount > 0) {\n        const dateString = date.toFormat('dd-MM-yyyy');\n\n        // setting filename from start date, end date, courseName of course \n        // if this consition is met, dateString will be the end date of course\n        if (courseDay + 1 === data.totalCourseDays) {\n            // start date\n            const displayDate = DateTime.fromFormat(startDate, \"yyyy-MM-dd\");\n            const displayName = `${displayDate.toFormat('dd-MM-yyyy')}_${dateString}_BATCH${courseName}`;\n            data.courseName = displayName;\n        }\n\n        let dateObj;\n        // if date is a public holiday\n        if (phWithoutCh.includes(dateString) || winterBreak.includes(dateString)) {\n            dateObj = generateHolidayObject (dateString, week, date, dateObj);\n\n        // if date is not a holiday\n        } else {\n            dateObj = generateCourseDayObject (dateObj, dateString, week, weekDay, date, utc, courseType, courseDay);\n\n            // increase course days on days that classes are held,\n            // DO NOT increase course days on holidays\n            courseDayCount -= 1;\n            courseDay += 1;\n        }\n        data.days[dateString] = dateObj;\n\n        \n        if (classDatesCount === data.totalCourseDays && courseType === 'Basics') {\n            date = date.plus({ days: 2 }); \n            utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n            weekDay += 1;\n            week += 1;\n\n        } else {\n            // this is the end of the dayArray (last day of the week)\n            if ( dayIndex === dayArray.length -1) {\n                weekDay = 1;\n                week += 1;\n                dateWeek = dateWeek.plus({ weeks: 1 });\n                // return to beginning of array (return to beginning of week)\n                dayIndex = 0;\n                date = date.plus({ weeks: 1 }).set({ weekday: dayArray[dayIndex] })\n                utc = getLocalDateTime (utc, 'T19:30', courseName, courseType, date);\n\n            } else {\n                // day with the week\n                dayIndex += 1;\n                date = date.set({ weekday: dayArray[dayIndex] })\n                utc = getLocalDateTime (utc, 'T13:00', courseName, courseType, date);\n\n                if (!phWithoutCh.includes(dateString)) {\n                    weekDay += 1;\n                }\n            }\n        }\n        // increase classDatesCount regardless of whether it is a public holiday\n        classDatesCount += 1;\n    }\n\n    return data;\n}\n\nexport default generateDataObject;","import React from \"react\";\nimport { DateTime } from \"luxon\";\n\n// helper function that generates course day header for a normal course day\nconst NormalCourseDay = ({ todaySectionHeader, day, timeZoneSet, id }) => {\n  localDate = DateTime.fromISO(day.meetingDateTimeUTC, { zone: timeZoneSet });\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  meetingTime = localDate.toFormat(\"t\");\n  timeOffset = localDate.toFormat(\"ZZZZ\");\n  timeZone = localDate.toFormat(\"z\");\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header-div\">\n          <div className=\"main-header\">\n            {!todaySectionHeader ? (\n              <h3 className=\"day-header\">\n                {formattedDate}, Week {day.courseWeek}, Course Day{\" \"}\n                {day.courseDay}\n              </h3>\n            ) : (\n              <h3 className=\"day-header\">{formattedDate}</h3>\n            )}\n          </div>\n          <p>\n            Meeting Time: {meetingTime} SGT ({timeOffset})\n          </p>\n          <p>{day.dateTypes.module}</p>\n        </div>\n      )}\n    </>\n  );\n};\n\n// helper function that generates courseday header for a holiday\nconst HolidayCourseDay = ({ todaySectionHeader, day, timeZoneSet, id }) => {\n  localDate = DateTime.fromFormat(day.courseDate, \"dd-MM-yyyy\");\n  formattedDate = localDate.toFormat(\"EEE d MMM\");\n  timeZone = localDate.toFormat(\"z\");\n  // depending on if the holiday is a public/company holiday,\n  // a different output will be rendered\n  if (day.dateTypes.holidayType === \"public holiday\") {\n    holiday = `Public Holiday (${day.dateTypes.name})`;\n  } else {\n    holiday = `Company Holiday (${day.dateTypes.name})`;\n  }\n\n  return (\n    <>\n      {timeZone === timeZoneSet && (\n        <div className=\"main-header\">\n          <h2>\n            {formattedDate}: {day.dateTypes.location} {holiday}\n          </h2>\n        </div>\n      )}\n    </>\n  );\n};\n\nlet localDate;\nlet formattedDate;\nlet meetingTime;\nlet timeZone;\nlet timeOffset;\nlet holiday;\n\n// ######################################################\n// ######################################################\n\n// function that generates the header for each course day\nconst GenerateCourseDayHeader = ({ todaySectionHeader, day, coursetype }) => {\n  // this is the timezone of the area we are in\n  const timeZoneSet = \"Asia/Singapore\";\n\n  if (day.meetingDateTimeUTC) {\n    return (\n      <NormalCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n      />\n    );\n  } else {\n    return (\n      <HolidayCourseDay\n        todaySectionHeader={todaySectionHeader}\n        day={day}\n        timeZoneSet={timeZoneSet}\n      />\n    );\n  }\n};\n\nexport default GenerateCourseDayHeader;\n","import React, { useState } from \"react\";\nimport generateDataObject from \"../../../generateCourseDates.js\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport download from \"../../../download.js\";\n\nconst DatePicker = ({ setBootcampDataCopy }) => {\n  // inputs from user used to generate course data\n  const [startDate, setStartDate] = useState(\"\");\n  const [courseName, setCourseName] = useState(\"\");\n  const [courseType, setCourseType] = useState(\"\");\n\n  // function that generates and downloads schedule data when download button is clicked\n  const handleDownload = async (e) => {\n    try {\n      const data = await generateDataObject(startDate, courseName, courseType);\n      download(data, `${data.courseName}.json`);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // function that generates and renders schedule data when button is clicked\n  const handleRender = async (e) => {\n    try {\n      const data = await generateDataObject(startDate, courseName, courseType);\n      await setBootcampDataCopy(JSON.parse(JSON.stringify(data.days)));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"date-picker\">\n        <div>\n          <h2>Generate Schedule Data File</h2>\n        </div>\n        <div className=\"input-form-container\">\n          <Form className=\"input-form\">\n            <Form.Group className=\"mb-3 input\" controlId=\"formDate\">\n              <Form.Label>Start Date</Form.Label>\n              <Form.Control\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Batch Number</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={courseName}\n                onChange={(e) => setCourseName(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3 input\" controlId=\"formBatchNumber\">\n              <Form.Label>Course Type</Form.Label>\n              <Form.Select\n                aria-label=\"Default select example\"\n                onChange={(e) => setCourseType(e.target.value)}\n              >\n                <option>Select course type</option>\n                <option value=\"Basics\">Basics</option>\n                <option value=\"Bootcamp FT\">Bootcamp FT</option>\n                <option value=\"Bootcamp PT\">Bootcamp PT</option>\n              </Form.Select>\n            </Form.Group>\n          </Form>\n          <div className=\"submit-button-container\">\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={(e) => {\n                handleRender(e);\n              }}\n            >\n              Render Schedule\n            </Button>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={(e) => {\n                handleDownload(e);\n              }}\n            >\n              Download Schedule\n            </Button>\n          </div>\n          <br></br>\n          <div>\n            <a href=\"https://github.com/rocketacademy/scheduler\">\n              link to GitHub repo\n            </a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DatePicker;\n","import React from \"react\";\nimport GenerateDataShiftContent from \"../GenerateDataShiftContent\";\nimport ActiveCourses from \"./ActiveCourses.jsx\";\nimport DatePicker from \"./DatePicker.jsx\";\n\nconst DataShift = ({ batchArray, bootcampDataCopy, setBootcampDataCopy }) => {\n  return (\n    <>\n      <div className=\"datashift-container\">\n        <div className=\"all-courses-navbar\">\n          {/* this component contains links to indivudual batch schedules to be rendered and edited */}\n          <ActiveCourses\n            batchArray={batchArray}\n            setBootcampDataCopy={setBootcampDataCopy}\n          />\n        </div>\n        <div className=\"data-shift\">\n          <div className=\"data-container\">\n            {/* this component generates a course schedule based on start date and course type from the main json data file */}\n            <DatePicker\n              bootcampDataCopy={bootcampDataCopy}\n              setBootcampDataCopy={setBootcampDataCopy}\n            />\n            {/* this component allows the user to edit the schedule rendered */}\n            <GenerateDataShiftContent\n              batchArray={batchArray}\n              bootcampDataCopy={bootcampDataCopy}\n              setBootcampDataCopy={setBootcampDataCopy}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DataShift;\n","import React, { useState } from \"react\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport DataShift from \"./data-shift/DataShift\";\nimport mainDataFile from \"../../data/bootcamp-course-days.json\";\nimport GenerateDataShiftContent from \"./GenerateDataShiftContent\";\n\nconst TabsContainer = ({ batchArray }) => {\n  const [key, setKey] = useState(\"datePicker\");\n  // remains empty until user picks/ generates schedule to edit\n  const [batchDataCopy, setBatchDataCopy] = useState({});\n  // this is the main bootcamp data json file that has not been mapped onto any dates\n  const [mainDataCopy, setMainDataCopy] = useState(\n    JSON.parse(JSON.stringify(mainDataFile.days))\n  );\n\n  return (\n    <Tabs\n      id=\"controlled-tab-example\"\n      activeKey={key}\n      onSelect={(k) => setKey(k)}\n      className=\"mb-3\"\n    >\n      {/* this tab contains the component for editing the main data file */}\n      <Tab eventKey=\"datePicker\" title=\"Main\">\n        <GenerateDataShiftContent\n          bootcampDataCopy={mainDataCopy}\n          setBootcampDataCopy={setMainDataCopy}\n        />\n      </Tab>\n      {/* this tab contains the component for generating/ editing individual batch schedules */}\n      <Tab eventKey=\"dataShift\" title=\"Batch\">\n        <DataShift\n          batchArray={batchArray}\n          bootcampDataCopy={batchDataCopy}\n          setBootcampDataCopy={setBatchDataCopy}\n        />\n      </Tab>\n    </Tabs>\n  );\n};\n\nexport default TabsContainer;\n","export default __webpack_public_path__ + \"static/media/4-MILK.46ae71aa.png\";","import React from \"react\";\n\n// displays items in a section's classes\nfunction DisplaySection({ heading, sectionType, day }) {\n  return (\n    <div>\n      <h6>{heading}</h6>\n      <ul>\n        {sectionType.map((item, index) => {\n          let id;\n          // id used for scrollTo function\n          if (heading === \"Pre Class\") {\n            id = `week-${day.courseWeek}-day-${day.dayNumber}-gpc-${index}`;\n          }\n\n          return (\n            <>\n              {item.url && (\n                <li id={id}>\n                  <a href={item.url}>{item.name}</a>\n                </li>\n              )}\n              {!item.url && <li>{item.name}</li>}\n            </>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default DisplaySection;\n","import React from \"react\";\nimport DisplaySection from \"./DisplaySection\";\n\n// if sections project due/ project start/ cp due exist in a course day,\n// this function will generate a header and content for these sections\nconst GenerateNotifications = ({\n  status,\n  projectdue,\n  cpdue,\n  projectstart,\n  day,\n}) => {\n  let heading;\n\n  // generates header for the section\n  if (status) {\n    if (status.items) {\n      if (status === projectdue) {\n        heading = \"Project Due\";\n      } else if (status === projectstart) {\n        heading = \"Project Start\";\n      } else if (status === cpdue) {\n        heading = \"Inteview Prep due\";\n      }\n    }\n  }\n\n  return (\n    <>\n      {status && status.items && (\n        <div className=\"notifications\">\n          <DisplaySection\n            heading={heading}\n            sectionType={status.items}\n            day={day}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GenerateNotifications;\n","const generateSectionArray = (datetype, classType, sectionArray) => {\n    Object.keys(datetype).forEach((section) => {\n        let classTypeSection;\n    // classTypeSection is determined by what classType is\n        if (classType === 'preClass') {\n            classTypeSection = datetype[section].preClass;\n        } else if (classType === 'inClass') {\n            classTypeSection = datetype[section].inClass;\n        } else {\n            classTypeSection = datetype[section].postClass;\n        } \n\n        if (classTypeSection) {\n            // if there are items in classTypeSection, the items are pushed into sectionArray\n            if (classTypeSection.items) {\n                for (let x = 0; x < classTypeSection.items.length; x += 1) {\n                    sectionArray.push(classTypeSection.items[x]);\n                }\n            }\n        }\n    })\n    return sectionArray;\n}\n\nexport default generateSectionArray;","import React from 'react';\nimport DisplaySection from './DisplaySection';\nimport generateSectionArray from '../../generateSectionArray';\n\n\nfunction GenerateDatetypeSections ({ \n                                datetype, \n                                classType, \n                                day \n                                }) { \n    // stores items that are in a particular section of a datetype\n    const sectionArray = [];\n\n    generateSectionArray(datetype, classType, sectionArray);\n\n    // sets the heading depending on the classtype\n    let heading;\n    if (sectionArray.length > 0) {\n           // a header will be created \n        if (classType === 'preClass') {\n            heading ='Pre Class';\n        } else if (classType === 'inClass') {\n            heading = 'In Class';\n        } else {\n            heading = 'Post Class';\n        }\n    }\n\n    return (\n        <div>\n            <DisplaySection \n                        heading={heading} \n                        sectionType={sectionArray} \n                        day={day}\n                        />\n        </div>\n    )\n}\n\nexport default GenerateDatetypeSections\n","import React from \"react\";\nimport GenerateNotifications from \"./GenerateNotifications\";\nimport GenerateDatetypeSections from \"./GenerateDatetypeSections\";\n\n// generates the content and section headings for each course day\nconst GenerateCourseDayContent = ({ day }) => {\n  const projectdue = day.dateTypes.projects.projectDue;\n  const projectstart = day.dateTypes.projects.projectStart;\n  const cpdue = day.dateTypes.cp.cpDue;\n\n  return (\n    <>\n      {/* project due notification  */}\n      <GenerateNotifications\n        status={projectdue}\n        cpdue={cpdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      {/* career prep due notification  */}\n      <GenerateNotifications\n        status={cpdue}\n        cpdue={cpdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n      {/* preclass section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"preClass\"\n        day={day}\n      />\n      {/* in class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"inClass\"\n        day={day}\n      />\n      {/* post class section  */}\n      <GenerateDatetypeSections\n        datetype={day.dateTypes}\n        classType=\"postClass\"\n        day={day}\n      />\n      {/* project start notification  */}\n      <GenerateNotifications\n        status={projectstart}\n        cpdue={cpdue}\n        projectdue={projectdue}\n        projectstart={projectstart}\n        day={day}\n      />\n    </>\n  );\n};\n\nexport default GenerateCourseDayContent;\n","import React from 'react'\n\n// renders items in a section\nfunction TableSectionContent({ sectionArray }) {\n    return (\n        <ul>\n        {sectionArray.map((item) => {\n            \n            return (\n                <>\n                {item.url && (\n                    <li>\n                        <a href={item.url}>{item.name}</a>\n                    </li>\n                )}\n                {!item.url && (\n                    <li>\n                        {item.name}\n                    </li>\n                )}\n                </>\n            )\n        })}\n        </ul>\n    )\n}\n\nexport default TableSectionContent\n","import React from 'react';\nimport generateSectionArray from '../../../generateSectionArray';\nimport TableSectionContent from './TableSectionContent';\n\n// renders in class/ preclass section of table\nfunction TableClass({ day, \n                      sectionClass\n                     }) {\n\n    const classArray = [];\n    const datetype = day.dateTypes;\n\n    // gets all items in a particular section\n    generateSectionArray(datetype, sectionClass, classArray);\n\n    return (\n        <td>\n            <TableSectionContent sectionArray={classArray} />\n        </td>\n    )\n}\n\nexport default TableClass\n","import React from 'react';\nimport GenerateNotifications from '../GenerateNotifications';\n\n// renders projects section of table\nfunction TableProjects({ day }) {\n    const projectdue = day.dateTypes.projects.projectDue;\n    const projectstart = day.dateTypes.projects.projectStart;\n    const cpdue = day.dateTypes.cp.cpDue;\n\n    return (\n        <div className=\"table-projects\">\n            <GenerateNotifications status={projectdue} \n                               cpdue={cpdue} \n                               projectdue={projectdue} \n                               projectstart={projectstart} \n                               day={day}\n                               />\n            <GenerateNotifications status={projectstart} \n                               cpdue={cpdue} \n                               projectdue={projectdue} \n                               projectstart={projectstart} \n                               day={day}\n                               />\n        </div>\n    )\n}\n\nexport default TableProjects\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport Table from \"react-bootstrap/Table\";\nimport { DateTime } from \"luxon\";\nimport TableClass from \"./TableClass\";\nimport TableProjects from \"./TableProjects\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\nfunction ScheduleTable({ weekNumbers, tableData, coursetype, today }) {\n  return (\n    <>\n      <Accordion.Header>\n        <h5>\n          {/* header shows different info depending on date and coursetype  */}\n          {coursetype === \"ft\" &&\n            today.toFormat(\"dd-MM-yyyy\") ===\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>\n                Current Course Week:{\" \"}\n                {weekNumbers.map((num) => {\n                  return <span>{num}</span>;\n                })}\n              </>\n            )}\n          {coursetype === \"ft\" &&\n            today.toFormat(\"dd-MM-yyyy\") !==\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>\n                Next Course Week:{\" \"}\n                {weekNumbers.map((num) => {\n                  return <span>{num}</span>;\n                })}\n              </>\n            )}\n          {coursetype === \"pt\" &&\n            today.toFormat(\"dd-MM-yyyy\") ===\n              DateTime.now().toFormat(\"dd-MM-yyyy\") && (\n              <>Current Month's Schedule</>\n            )}\n        </h5>\n      </Accordion.Header>\n      <Accordion.Body>\n        <Table bordered hover size=\"sm\">\n          <thead>\n            <tr>\n              <th></th>\n              <th>Projects</th>\n              <th>Pre Class</th>\n              <th>In Class</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tableData.map((date, index) => {\n              // getting the formatted date that will be shown in the table\n              const formattedDate = DateTime.fromFormat(\n                date.courseDate,\n                \"dd-MM-yyyy\"\n              ).toFormat(\"EEE d MMM\");\n              // getting the id that links formattedDate to element in main content page\n              const id = `${coursetype}-week-${date.courseWeek}-day-${date.dayNumber}`;\n\n              return (\n                <tr\n                  className={\n                    today.toFormat(\"dd-MM-yyyy\") ===\n                      DateTime.now().toFormat(\"dd-MM-yyyy\") &&\n                    date.courseDate === today.toFormat(\"dd-MM-yyyy\")\n                      ? \"table-secondary\"\n                      : null\n                  }\n                >\n                  <td\n                    // library react-scroll used to scroll to an element with matching id on main page\n                    className=\"table-date\"\n                  >\n                    <h6\n                      onClick={() =>\n                        scroller.scrollTo(id, {\n                          smooth: true,\n                          offset: -70,\n                          duration: 100,\n                        })\n                      }\n                    >\n                      {formattedDate}\n                    </h6>\n                    <p>\n                      Week {date.courseWeek}\n                      <br></br>Course Day {date.courseDay}\n                    </p>\n                  </td>\n                  {/* getting data for projects section of table */}\n                  <td>\n                    <TableProjects day={tableData[index]} />\n                  </td>\n                  {/* getting data for preclass and inclass section of table */}\n                  <TableClass day={tableData[index]} sectionClass=\"preClass\" />\n                  <TableClass day={tableData[index]} sectionClass=\"inClass\" />\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Accordion.Body>\n    </>\n  );\n}\n\nexport default ScheduleTable;\n","// function that generates data required for rendering schedule table\nconst generateTableData = (scheduleData, coursetype, weekNumbers, tableData, setWeekNumbers, setTableData, today ) => {\n  let firstDay;\n  let moveDate;\n  let lastDay;\n  let firstDayMonth;\n  let lastDayMonth;\n  let moveDateMonth;\n  weekNumbers = [];\n  // shows current month for part time bootcamp\n  firstDayMonth = today.startOf(\"month\");\n  lastDayMonth = today.endOf(\"month\");\n\n  // shows current week for full time bootcamp\n  firstDay = today.startOf(\"week\");\n  lastDay = today.endOf(\"week\");\n\n  moveDate = firstDay;\n  const weekDatesArray = [];\n  // getting all the dates between first day and last day of week inclusive and storing them in an array\n  while (moveDate <= lastDay) {\n    weekDatesArray.push(moveDate.toFormat(\"dd-MM-yyyy\"));\n    moveDate = moveDate.plus({ days: 1 });\n  }\n\n  moveDateMonth = firstDayMonth;\n\n  const monthDatesArray = [];\n  if (coursetype === \"pt\") {\n    // getting all the dates between first day and last day of week inclusive and storing them in an array\n    while (moveDateMonth <= lastDayMonth) {\n      monthDatesArray.push(moveDateMonth.toFormat(\"dd-MM-yyyy\"));\n      moveDateMonth = moveDateMonth.plus({ days: 1 });\n    }\n  }\n\n  const currentWeekData = [];\n  const currentMonthData = [];\n\n  // getting the data (object) for each individual day of the month (used for pt schedule table)\n  if (coursetype === \"pt\") {\n    for (let i = 0; i < monthDatesArray.length; i += 1) {\n      Object.keys(scheduleData).map((day) => {\n        if (day === monthDatesArray[i]) {\n          currentMonthData.push(scheduleData[day]);\n        }\n      });\n    }\n    setTableData(currentMonthData);\n  } else {\n    // getting the data (object) for each individual day of the week\n  for (let i = 0; i < weekDatesArray.length; i += 1) {\n    Object.keys(scheduleData).map((day) => {\n      if (day === weekDatesArray[i]) {\n        currentWeekData.push(scheduleData[day]);\n      }\n    });\n  }\n    setTableData(currentWeekData);\n  }\n\n  \n  // getting the week's courseWeek that the indicator will point to\n  weekDatesArray.forEach((date) => {\n    if (\n      scheduleData[date] &&\n      !weekNumbers.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumbers.push(scheduleData[date].courseWeek);\n    }\n  });\n  setWeekNumbers(weekNumbers);\n\n  console.log('week numbers', weekNumbers);\n  console.log('table data', tableData);\n\n  // // indicates whether or not courseweek and course day is shown on the courseday header\n  // const todaySectionHeader = true;\n\n  // // creating ids for scrollTo function for top section\n  // const currentDayId = `${coursetype}-week-${scheduleData[nextDay].courseWeek}-day-${scheduleData[nextDay].dayNumber}`;\n  // const previousDayId = `${coursetype}-week-${scheduleData[previousDay].courseWeek}-day-${scheduleData[previousDay].dayNumber}`;\n\n}\n\nexport default generateTableData;","import React, { useEffect, useState } from \"react\";\nimport ScheduleTable from \"./ScheduleTable\";\nimport generateTableData from \"../../../generateTableData\";\n\nconst ContentTable = ({ scheduleData, coursetype, startDay }) => {\n  const [weekNumbers, setWeekNumbers] = useState();\n  const [tableData, setTableData] = useState();\n\n  useEffect(() => {\n    generateTableData(\n      scheduleData,\n      coursetype,\n      weekNumbers,\n      tableData,\n      setWeekNumbers,\n      setTableData,\n      startDay\n    );\n  }, [scheduleData]);\n\n  return (\n    <div className=\"schedule-table\">\n      {/* table which displays current week's/ month's content based on course type */}\n      {weekNumbers && tableData && (\n        <ScheduleTable\n          weekNumbers={weekNumbers}\n          tableData={tableData}\n          coursetype={coursetype}\n          today={startDay}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ContentTable;\n","import React from \"react\";\nimport { scroller } from \"react-scroll\";\nimport GenerateCourseDayHeader from \"../GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"../GenerateCourseDayContent\";\nimport GenerateDatetypeSections from \"../GenerateDatetypeSections\";\n\n// helper function that finds previous course day\nconst findPreviousDay = (scheduleData, today, coursetype) => {\n  let dayBefore;\n\n  if (coursetype === \"ft\") {\n    if (today.weekday === 1) {\n      dayBefore = today.plus({ days: -3 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      dayBefore = today.plus({ days: -2 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.plus({ days: -1 }).toFormat('dd-MM-yyyy');\n    }\n  } else if (coursetype === \"pt\") {\n    if (today.weekday === 1) {\n      dayBefore = today\n        .plus({ weeks: -1 })\n        .set({ weekday: 6 })\n        .toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday > 1 && today.weekday <= 6) {\n      dayBefore = today.set({ weekday: 1 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      dayBefore = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    }\n  }\n\n  if (scheduleData[dayBefore].dateTypes.holidayType) {\n    dayBefore = findPreviousDay(scheduleData, dayBefore, coursetype);\n  }\n\n  return dayBefore;\n};\n\n//helper funcyion that finds next course day\nconst findNextDay = (scheduleData, today, coursetype) => {\n  let nextDay;\n\n  if (coursetype === \"ft\") {\n    console.log(today.weekday);\n    if (today.weekday === 6) {\n      nextDay = today.plus({ days: 2 }).toFormat(\"dd-MM-yyyy\");\n    } else if (today.weekday === 7) {\n      nextDay = today.plus({ days: 1}).toFormat('dd-MM-yyyy');\n    } else {\n      nextDay = today.toFormat(\"dd-MM-yyyy\");\n    }\n  } else if (coursetype === \"pt\") {\n    if (today.weekday === 1) {\n      nextDay = today.toFormat('dd-MM-yyyy');\n    } else if (today.weekday > 1 && today.weekday <= 6) {\n      nextDay = today.set({ weekday: 6 }).toFormat(\"dd-MM-yyyy\");\n    } else {\n      nextDay = today.plus({ days: 1 }).toFormat(\"dd-MM-yyyy\");\n    }\n  }\n\n  console.log('next day', nextDay);\n  console.log(scheduleData[nextDay]);\n  if (scheduleData[nextDay].dateTypes.holidayType) {\n    nextDay = findNextDay(scheduleData, nextDay, coursetype);\n  }\n\n  return nextDay;\n};\n// ##############################################################################\n\nfunction CurrentDaySection({ scheduleData, coursetype, today }) {\n  // indicates whether or not courseweek and course day is shown on the courseday header\n  const todaySectionHeader = true;\n  let previousDay;\n  let nextDay;\n\n  // finds previous course day\n  previousDay = findPreviousDay(scheduleData, today, coursetype);\n\n  // find the next day if current day is not a course day\n  nextDay = findNextDay(scheduleData, today, coursetype);\n\n  // creating ids for scrollTo function for top section\n  const currentDayId = `${coursetype}-week-${scheduleData[nextDay].courseWeek}-day-${scheduleData[nextDay].dayNumber}`;\n  const previousDayId = `${coursetype}-week-${scheduleData[previousDay].courseWeek}-day-${scheduleData[previousDay].dayNumber}`;\n\n  return (\n    <div>\n      <div className=\"today-date\">\n        {nextDay && previousDay && (\n          <>\n            <div>\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[nextDay]}\n                coursetype={coursetype}\n              />\n            </div>\n            <div className=\"main-header-course-day\">\n              <h5>\n                Current Course Day:{\" \"}\n                {/* shows either today's content or next course day's content depending on if today's content exists  */}\n                {scheduleData[today.toFormat(\"dd-MM-yyyy\")] ? (\n                  <span>\n                    {scheduleData[today.toFormat(\"dd-MM-yyyy\")].courseDay}\n                  </span>\n                ) : (\n                  <span> {scheduleData[nextDay].courseDay}</span>\n                )}\n              </h5>\n            </div>\n            <div className=\"top-content-container\">\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(currentDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Current Course Day:\n                  </h5>\n                  <br></br>\n                  <GenerateCourseDayContent day={scheduleData[nextDay]} />\n                </>\n              </div>\n              <div className=\"top-content-section\">\n                <>\n                  <h5\n                    className=\"top-content-day\"\n                    onClick={() =>\n                      scroller.scrollTo(previousDayId, {\n                        smooth: true,\n                        offset: -70,\n                        duration: 100,\n                      })\n                    }\n                  >\n                    Previous Course Day:\n                  </h5>\n                  <br></br>\n                  <GenerateDatetypeSections\n                    datetype={scheduleData[previousDay].dateTypes}\n                    classType=\"postClass\"\n                    day={scheduleData[previousDay]}\n                  />\n                </>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default CurrentDaySection;\n","import React from \"react\";\nimport GenerateCourseDayHeader from \"./GenerateCourseDayHeader\";\nimport GenerateCourseDayContent from \"./GenerateCourseDayContent\";\nimport ContentTable from \"./schedule-table/ContentTable\";\nimport { scroller } from \"react-scroll\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport CurrentDaySection from \"./current-day/CurrentDaySection\";\nimport { DateTime } from \"luxon\";\nimport Accordion from \"react-bootstrap/Accordion\";\n\n// generates schedule content for a particular course\nfunction ScheduleContent({ scheduleData, coursetype, title }) {\n  // used by scrollTo function to identify where to scroll to from the up arrow at the bottom of the screen\n  const id = `${coursetype}-top`;\n  const todaySectionHeader = false;\n  const today = DateTime.now();\n  let nextToday;\n  if (coursetype === \"ft\") {\n    nextToday = DateTime.now().plus({ weeks: 1 });\n  } else {\n    nextToday = DateTime.now().plus({ months: 1 });\n  }\n\n  return (\n    <div className=\"content\">\n      {/* button that takes user back to the top of the page  */}\n      <div\n        className=\"up-arrow\"\n        onClick={() =>\n          scroller.scrollTo(id, {\n            smooth: true,\n            offset: -70,\n            duration: 100,\n          })\n        }\n      >\n        <ExpandLessIcon />\n      </div>\n      <h1 className=\"schedule-header\">{title}</h1>\n      <p id={id}></p>\n      {/* generates table which shows schedule for current week/ month depending on course type */}\n      <CurrentDaySection\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        today={today}\n      />\n      <div className=\"schedule-accordion-container\">\n        <Accordion className=\"current-week-accordion\" defaultActiveKey=\"0\">\n          <Accordion.Item eventKey=\"0\">\n            <ContentTable\n              scheduleData={scheduleData}\n              coursetype={coursetype}\n              startDay={today}\n            />\n          </Accordion.Item>\n        </Accordion>\n        <Accordion className=\"current-week-accordion\">\n          {coursetype === \"ft\" && (\n            <Accordion.Item eventKey=\"0\">\n              <ContentTable\n                scheduleData={scheduleData}\n                coursetype={coursetype}\n                startDay={nextToday}\n              />\n            </Accordion.Item>\n          )}\n        </Accordion>\n      </div>\n      <div className=\"schedule-list\">\n        <h1>Full Schedule</h1>\n        {/* generates individual day schedule content */}\n        {Object.keys(scheduleData).map((day) => {\n          const id = `${coursetype}-week-${scheduleData[day].courseWeek}-day-${scheduleData[day].dayNumber}`;\n\n          return (\n            <div className=\"day-class\" id={id}>\n              {/* generates schedule header for individual day */}\n              <GenerateCourseDayHeader\n                todaySectionHeader={todaySectionHeader}\n                day={scheduleData[day]}\n                coursetype={coursetype}\n              />\n              {/* generates content if course day is not a holiday */}\n              {!scheduleData[day].dateTypes.holidayType && (\n                <GenerateCourseDayContent day={scheduleData[day]} />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default ScheduleContent;\n","import React, { useEffect, useRef } from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { scroller } from \"react-scroll\";\nimport { DateTime } from \"luxon\";\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\n\n// one of the components in Sidebar\nfunction CourseWeeks({ scheduleData, coursetype }) {\n  const weeks = [];\n  // used to scroll to current week on page load \n  const executeScroll = () => myRef.current.scrollIntoView({ block: \"center\" });\n\n  useEffect(() => {\n    executeScroll();\n  }, []);\n\n  const CurrentWeekDiv = () => {\n    return (\n      <>\n        <div ref={myRef}></div>\n      </>\n    );\n  };\n\n  // getting all the week numbers\n  Object.keys(scheduleData).forEach((day) => {\n    if (!weeks.includes(scheduleData[day].courseWeek)) {\n      weeks.push(scheduleData[day].courseWeek);\n    }\n  });\n\n  // getting first and last days of week\n  const firstDayOfWeek = DateTime.now().startOf(\"week\");\n  const lastDayOfWeek = DateTime.now().endOf(\"week\");\n  let target = firstDayOfWeek;\n  // array where all course dates in current week will be stored\n  const weeksDates = [];\n\n  // storing week's dates in the array\n  while (target <= lastDayOfWeek) {\n    weeksDates.push(target.toFormat(\"dd-MM-yyyy\"));\n    target = target.plus({ days: 1 });\n  }\n\n  // getting the week's courseWeek that the indicator will point to\n  const weekNumber = [];\n  const myRef = useRef(null);\n\n  weeksDates.forEach((date) => {\n    if (\n      scheduleData[date] &&\n      !weekNumber.includes(scheduleData[date].courseWeek)\n    ) {\n      weekNumber.push(scheduleData[date].courseWeek);\n    }\n  });\n\n  return (\n    <div className=\"sidebar-courseweeks\">\n      <h4>Course Weeks</h4>\n      <Nav\n        variant=\"pills\"\n        defaultActiveKey=\"0\"\n        className=\"flex-column\"\n        navbarScroll=\"true\"\n      >\n        <Nav.Item>\n          <Nav.Link\n            eventKey=\"0\"\n            // uses react-scroll library for scroll function\n            onClick={() =>\n              scroller.scrollTo(`${coursetype}-top`, {\n                smooth: true,\n                offset: -70,\n                duration: 100,\n              })\n            }\n          >\n            Today\n          </Nav.Link>\n        </Nav.Item>\n        {weeks.map((week, index) => {\n          // generating id that is linked to id of an element in main content of page\n          // on click, page will scroll to where the element is\n          const navId = `${index + 1}`;\n          let id;\n          // course starts on dayNumber 6, not 1\n          if (coursetype === \"pt\") {\n            id = `${coursetype}-week-${week}-day-6`;\n          } else {\n            id = `${coursetype}-week-${week}-day-1`;\n          }\n\n          const sidebarId = `${coursetype}-sidebar-week-${week}`;\n          return (\n            <Nav.Item>\n              <Nav.Link\n                eventKey={navId}\n                // uses react-scroll library for scroll function\n                onClick={() =>\n                  scroller.scrollTo(id, {\n                    smooth: true,\n                    offset: -70,\n                    duration: 100,\n                  })\n                }\n              >\n                {week === weekNumber[0] && <CurrentWeekDiv />}\n                <div>\n                  Week {week}\n                  {/* week indicator that indicates that a certain week is the current week  */}\n                  {weeks[index] === weekNumber[0] && (\n                    <span id={sidebarId} className=\"current-wk-indicator\">\n                      <KeyboardBackspaceIcon />\n                      {\"  \"}\n                      this week\n                    </span>\n                  )}\n                </div>\n              </Nav.Link>\n            </Nav.Item>\n          );\n        })}\n      </Nav>\n    </div>\n  );\n}\n\nexport default CourseWeeks;\n","import React from \"react\";\nimport CourseWeeks from \"./CourseWeeks\";\nimport Modules from \"./Modules\";\n\n// side navbar , displays a list of course weeks\nfunction SideBar({ scheduleData, coursetype }) {\n  return (\n    <div className=\"sidebar\">\n      <CourseWeeks scheduleData={scheduleData} coursetype={coursetype} />\n      {/* <Modules scheduleData={scheduleData} /> */}\n    </div>\n  );\n}\n\nexport default SideBar;\n","import React from \"react\";\nimport ScheduleContent from \"./ScheduleContent\";\nimport SideBar from \"./sidebar/SideBar\";\n\nfunction BatchSchedule({ data, title }) {\n  const scheduleData = JSON.parse(JSON.stringify(data.days));\n\n  // needed to generate id for use with react-scroll library, also indicates if course is full time/ part time\n  let coursetype;\n  if (data.courseType === \"Bootcamp PT\") {\n    coursetype = \"pt\";\n  } else {\n    coursetype = \"ft\";\n  }\n\n  return (\n    <div className=\"course-schedule\">\n      {/* contains links to main part of schedule page */}\n\n      <SideBar scheduleData={scheduleData} coursetype={coursetype} />\n      {/* contains current schedule table and main content of page */}\n      <ScheduleContent\n        scheduleData={scheduleData}\n        coursetype={coursetype}\n        title={title}\n      />\n    </div>\n  );\n}\n\nexport default BatchSchedule;\n","import React from \"react\";\nimport { Route, Switch, Link, useRouteMatch, Redirect } from \"react-router-dom\";\nimport logo from \"../../assets/4-MILK.png\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport BatchSchedule from \"./BatchSchedule\";\n\nfunction ScheduleContainer({ batchArray }) {\n  let { path, url } = useRouteMatch();\n  console.log(\"batch array\", batchArray);\n  // pass individual batch json files into BatchSchedule to generate schedules\n  return (\n    <>\n      {/* backup navbar  */}\n      <Navbar variant=\"dark\" bg=\"secondary\">\n        <Navbar.Brand href=\"#home\">\n          <img src={logo} alt=\"company logo\"></img>\n        </Navbar.Brand>\n        <Nav className=\"me-auto\">\n          {batchArray.map((batch) => {\n            return (\n              <Nav.Link as={Link} to={`${url}/${batch.name}`}>\n                {batch.name.toUpperCase()}\n              </Nav.Link>\n            );\n          })}\n        </Nav>\n      </Navbar>\n      <Switch>\n        <Route exact path={path}>\n          <Redirect to={`${path}/${batchArray[0].name}`} />\n        </Route>\n        {batchArray.map((batch) => {\n          return (\n            <Route path={`${path}/${batch.name}`}>\n              <BatchSchedule\n                data={batch.content}\n                title={batch.name.toUpperCase()}\n              />\n            </Route>\n          );\n        })}\n      </Switch>\n    </>\n  );\n}\n\nexport default ScheduleContainer;\n","import React from 'react';\nimport TabsContainer from './components/admin/Tabs';\nimport ptbc1 from '../src/data/21-08-2021_10-10-2022_BATCH1.json';\nimport ftbc3 from '../src/data/12-04-2021_23-09-2021_BATCH3.json';\nimport ftbc4 from '../src/data/12-07-2021_22-12-2021_BATCH4.json';\nimport {\n  HashRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport ScheduleContainer from './components/schedules/ScheduleContainer';\n\nfunction App() {\n\n  // put all batch data files in an array to be passed into separate components for /shedule and /admin\n  const batchArray = [{name:\"ptbc1\", content: ptbc1}, {name: \"ftbc3\", content: ftbc3}, {name: \"ftbc4\", content: ftbc4}];\n\n  return (\n    <div className=\"App\">\n      {/* <BatchSchedule /> */}\n      <HashRouter>\n        <Switch>\n          {/* route that takes user to part of app that edits course schedules */}\n          <Route path=\"/admin\">\n            <TabsContainer batchArray={batchArray} />\n          </Route>\n          {/* route that takes user to part of app that displays batch schedules for student use */}\n          <Route path=\"/schedules\">\n            <ScheduleContainer batchArray={batchArray} />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}